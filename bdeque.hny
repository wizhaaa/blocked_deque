def Bdeque(n) returns buffer:
    '''
    Returns the initial value of an empty deque
    '''
    buffer = { .buffer: [], .size: n}

def put_left(d, v): 
    '''
    d points to a deque and v is some value. 
    Put v at the left-end of the deque. 
    Should block if the bdeque is full.
    '''
    atomically when len(d->buffer) < d->size:
        d->buffer = [v, ] + d->buffer

def put_right(d, v):
    '''
    d points to a deque and v is some value. 
    Put v at the right-end of the deque. 
    Should block if the bdeque is full.
    '''
    atomically when len(d->buffer) < d->size:
        d->buffer = d->buffer + [v, ]
    
def get_left(d) returns left:
    '''
    d points to a deque. 
    If deque is empty, the operation should wait. 
    Otherwise, it should remove and return the value at the left-end of the deque. 
    '''
    atomically when d->buffer != []:
        left = d->buffer[0]
        del d->buffer[0]

def get_right(d) returns right:
    '''
    d points to a deque. 
    If deque is empty, the operation should wait. 
    Otherwise, it should remove and return the value at the right-end of the deque. 
    '''
    atomically when d->buffer !=[]: 
        right = (d->buffer)[len d->buffer -1] 
        del (d->buffer)[len d->buffer -1] 

def peek_left(d) returns left:
    '''
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should return the value at the left-end of the bdeque.
    '''
    atomically when d->buffer != []:
        left = d->buffer[0]

def peek_right(d) returns right: 
    '''
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should return the value at the right-end of the bdeque.
    '''
    atomically when d->buffer !=[]: 
        right = (d->buffer)[len d->buffer -1] 
