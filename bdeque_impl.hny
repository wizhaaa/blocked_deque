from synch import Lock, acquire, release
from alloc import malloc, free

def Deque() returns result:
    '''
    returns the initial value of an empty deque
    '''
    let dummy_tail = malloc({ .value: None, .next: None, .prev: None}):
        let dummy_head = malloc({ .value: None, .next: None, .prev: None}):
            dummy_head->next = dummy_tail
            dummy_tail->prev = dummy_head
            result = { .head: dummy_head, .tail: dummy_tail, .len:0, .lock: Lock()}

def put_left(d, v):
    '''
    d points to a deque and v is some value. 
    Put v at the right-end of the deque. 
    '''
    let node = malloc({ .value: v, .next: None, .prev: None}):
        acquire(?d->lock)
        let next = d->head->next:
            node->next = next
            node->prev = d->head
            d->head->next = node
            next->prev = node
        d->len += 1
        release(?d->lock)

def put_right(d, v):
    '''
    d points to a deque and v is some value. 
    Put v at the left-end of the deque. 
    '''
    let node = malloc({ .value: v, .next: None, .prev: None}):
        acquire(?d->lock)
        let prev = d->tail->prev:
            node->prev = prev
            node->next = d->tail
            d->tail->prev = node
            prev->next = node
        d->len += 1
        release(?d->lock)
    
def get_left(d) returns result:
    '''
    d points to a deque. 
    If deque is empty, the operation should return None. 
    Otherwise, it should remove and return the value at the left-end of the deque. 
    '''
    acquire(?d->lock)
    let head = d->head->next:
        if d->len != 0:
            result = head->value
            d->head->next = head->next
            d->head->next->prev = d->head
            d->len -= 1
            free(head)
        else:
            result = None 
    release(?d->lock)

def get_right(d) returns result:
    '''
    d points to a deque. 
    If deque is empty, the operation should return None. 
    Otherwise, it should remove and return the value at the right-end of the deque. 
    '''
    acquire(?d->lock)
    let tail = d->tail->prev:
        if d->len != 0:
            result = tail->value
            d->tail->prev = tail->prev
            d->tail->prev->next = d->tail
            d->len -= 1
            free(tail)
        else:
            result = None
    release(?d->lock)