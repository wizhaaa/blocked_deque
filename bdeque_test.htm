<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Behavior violation: unexpected output
      </th>
      <th align='center' colspan='9'>
        Shared Variables
      </th>
      <th align='center' colspan='9'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='2'>
        Turn
      </th>
      <th align='center' rowspan='2'>
        Thread
      </th>
      <th align='center' rowspan='2'>
        Instructions Executed
      </th>
      <th align='center' rowspan='2'>
        &nbsp;PC&nbsp;
      </th>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>alloc$next</td>
<td align='center' style='font-style: italic' colspan='8'>d</td>
</tr><tr>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>count</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>data</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>head</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>lock</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>not_empty</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>not_full</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>size</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>tail</td>
</tr><tr>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline0' width='400px' height='60px'>
      </canvas></td></tr>
      <tr><td id='nextstep0'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
<tr id='mes1'>
  <td align='right'>
    2&nbsp;
  </td>
  <td>
    T3: put_right_test(2)  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline1' width='400px' height='40px'>
      </canvas></td></tr>
      <tr><td id='nextstep1'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log1' border='1'>
    </table>
  </td>
</tr>
<tr id='mes2'>
  <td align='right'>
    3&nbsp;
  </td>
  <td>
    T6: peek_right_test(1)  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline2' width='400px' height='30px'>
      </canvas></td></tr>
      <tr><td id='nextstep2'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log2' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 54' id='C1'>
              Jump 54
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method subseq' id='C2'>
              Frame subseq(s, b, e)
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C3'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C4'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu3' id='C5'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of b' id='C6'>
              LoadVar b
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable b' id='C7'>
              DelVar b
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C8'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C9'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C10'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C11'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C12'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C13'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x; push False or True depending on success' id='C14'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 26 if the value is False' id='C15'>
              JumpCond False 26
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu3' id='C16'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C17'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C18'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of x' id='C19'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C20'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C21'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C22'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C23'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu3' id='C24'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 14' id='C25'>
              Jump 14
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C26'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable x' id='C27'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu3' id='C28'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C29'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C30'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C31'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 54' id='C32'>
              Jump 54
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method append' id='C33'>
              Frame append(s, e)
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C34'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C35'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C36'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C37'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C38'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C39'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C40'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C41'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C42'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C43'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 54' id='C44'>
              Jump 54
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method head' id='C45'>
              Frame head(s)
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C46'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C47'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C48'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C49'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C50'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C51'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C52'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C53'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(57)' id='C54'>
              Push PC(57)
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called list$tail' id='C55'>
              Builtin(list$tail)
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C56'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method tail' id='C57'>
              Frame tail(s)
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C58'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C59'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C60'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C61'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C62'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C63'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C64'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C65'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C66'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C67'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(2)' id='C68'>
              Apply PC(2)
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C69'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C70'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C71'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method sum' id='C72'>
              Frame sum(a)
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C73'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in accu' id='C74'>
              StoreVar accu
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C75'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C76'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C77'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C78'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 87 if the value is False' id='C79'>
              JumpCond False 87
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of accu' id='C80'>
              LoadVar accu
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable accu' id='C81'>
              DelVar accu
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C82'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C83'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C84'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in accu' id='C85'>
              StoreVar accu
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 78' id='C86'>
              Jump 78
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C87'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push accu' id='C88'>
              ReturnOp(accu)
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable accu' id='C89'>
              DelVar accu
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C90'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method set' id='C91'>
              Frame set(a)
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C92'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for set comprehension: push constant {}' id='C93'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for set comprehension: pop a value and store in $accu72' id='C94'>
              StoreVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C95'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C96'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C97'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C98'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 107 if the value is False' id='C99'>
              JumpCond False 107
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu72' id='C100'>
              LoadVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu72' id='C101'>
              DelVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C102'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C103'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C104'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu72' id='C105'>
              StoreVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 98' id='C106'>
              Jump 98
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C107'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu72' id='C108'>
              LoadVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu72' id='C109'>
              DelVar $accu72
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C110'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C111'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C112'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method list' id='C113'>
              Frame list(a)
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C114'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C115'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu88' id='C116'>
              StoreVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C117'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C118'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C119'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C120'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 129 if the value is False' id='C121'>
              JumpCond False 129
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu88' id='C122'>
              LoadVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu88' id='C123'>
              DelVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C124'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C125'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C126'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu88' id='C127'>
              StoreVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 120' id='C128'>
              Jump 120
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C129'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu88' id='C130'>
              LoadVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu88' id='C131'>
              DelVar $accu88
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C132'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C133'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C134'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method values' id='C135'>
              Frame values(d)
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C136'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C137'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu104' id='C138'>
              StoreVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C139'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C140'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C141'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to _:v; push False or True depending on success' id='C142'>
              Cut(_, v)
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable _' id='C143'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 152 if the value is False' id='C144'>
              JumpCond False 152
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu104' id='C145'>
              LoadVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu104' id='C146'>
              DelVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C147'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C148'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C149'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu104' id='C150'>
              StoreVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 142' id='C151'>
              Jump 142
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C152'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu104' id='C153'>
              LoadVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu104' id='C154'>
              DelVar $accu104
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C155'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C156'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C157'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method items' id='C158'>
              Frame items(d)
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C159'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C160'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu120' id='C161'>
              StoreVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C162'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C163'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C164'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to k:v; push False or True depending on success' id='C165'>
              Cut(k, v)
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 179 if the value is False' id='C166'>
              JumpCond False 179
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu120' id='C167'>
              LoadVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu120' id='C168'>
              DelVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C169'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C170'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C171'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C172'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C173'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C174'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C175'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C176'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu120' id='C177'>
              StoreVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 165' id='C178'>
              Jump 165
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C179'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C180'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu120' id='C181'>
              LoadVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu120' id='C182'>
              DelVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C183'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C184'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C185'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method qsort' id='C186'>
              Frame qsort(a)
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C187'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C188'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C189'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 195 if the value is False' id='C190'>
              JumpCond False 195
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C191'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C192'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in sorted' id='C193'>
              StoreVar sorted
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 261' id='C194'>
              Jump 261
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C195'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C196'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(45)' id='C197'>
              Apply PC(45)
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C198'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C199'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C200'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(57)' id='C201'>
              Apply PC(57)
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C202'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in (pivot, rest)' id='C203'>
              StoreVar (pivot, rest)
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C204'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu155' id='C205'>
              StoreVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C206'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C207'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C208'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C209'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 222 if the value is False' id='C210'>
              JumpCond False 222
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C211'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C212'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <' id='C213'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 208 if the value is False' id='C214'>
              JumpCond False 208
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu155' id='C215'>
              LoadVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu155' id='C216'>
              DelVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P217'>
          <td align='right'>
            <a name='P217'>217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C217'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P218'>
          <td align='right'>
            <a name='P218'>218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C218'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P219'>
          <td align='right'>
            <a name='P219'>219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C219'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P220'>
          <td align='right'>
            <a name='P220'>220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu155' id='C220'>
              StoreVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P221'>
          <td align='right'>
            <a name='P221'>221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 208' id='C221'>
              Jump 208
            </span>
          </td>
        </tr>
        <tr id='P222'>
          <td align='right'>
            <a name='P222'>222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C222'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P223'>
          <td align='right'>
            <a name='P223'>223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu155' id='C223'>
              LoadVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P224'>
          <td align='right'>
            <a name='P224'>224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu155' id='C224'>
              DelVar $accu155
            </span>
          </td>
        </tr>
        <tr id='P225'>
          <td align='right'>
            <a name='P225'>225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in lower' id='C225'>
              StoreVar lower
            </span>
          </td>
        </tr>
        <tr id='P226'>
          <td align='right'>
            <a name='P226'>226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C226'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P227'>
          <td align='right'>
            <a name='P227'>227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu172' id='C227'>
              StoreVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P228'>
          <td align='right'>
            <a name='P228'>228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C228'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P229'>
          <td align='right'>
            <a name='P229'>229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable rest' id='C229'>
              DelVar rest
            </span>
          </td>
        </tr>
        <tr id='P230'>
          <td align='right'>
            <a name='P230'>230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C230'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P231'>
          <td align='right'>
            <a name='P231'>231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C231'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P232'>
          <td align='right'>
            <a name='P232'>232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C232'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P233'>
          <td align='right'>
            <a name='P233'>233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 245 if the value is False' id='C233'>
              JumpCond False 245
            </span>
          </td>
        </tr>
        <tr id='P234'>
          <td align='right'>
            <a name='P234'>234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C234'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P235'>
          <td align='right'>
            <a name='P235'>235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of pivot' id='C235'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P236'>
          <td align='right'>
            <a name='P236'>236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >=' id='C236'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P237'>
          <td align='right'>
            <a name='P237'>237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 231 if the value is False' id='C237'>
              JumpCond False 231
            </span>
          </td>
        </tr>
        <tr id='P238'>
          <td align='right'>
            <a name='P238'>238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu172' id='C238'>
              LoadVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P239'>
          <td align='right'>
            <a name='P239'>239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu172' id='C239'>
              DelVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P240'>
          <td align='right'>
            <a name='P240'>240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C240'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P241'>
          <td align='right'>
            <a name='P241'>241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C241'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P242'>
          <td align='right'>
            <a name='P242'>242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C242'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P243'>
          <td align='right'>
            <a name='P243'>243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu172' id='C243'>
              StoreVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P244'>
          <td align='right'>
            <a name='P244'>244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 231' id='C244'>
              Jump 231
            </span>
          </td>
        </tr>
        <tr id='P245'>
          <td align='right'>
            <a name='P245'>245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C245'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P246'>
          <td align='right'>
            <a name='P246'>246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu172' id='C246'>
              LoadVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P247'>
          <td align='right'>
            <a name='P247'>247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu172' id='C247'>
              DelVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P248'>
          <td align='right'>
            <a name='P248'>248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in higher' id='C248'>
              StoreVar higher
            </span>
          </td>
        </tr>
        <tr id='P249'>
          <td align='right'>
            <a name='P249'>249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lower' id='C249'>
              LoadVar lower
            </span>
          </td>
        </tr>
        <tr id='P250'>
          <td align='right'>
            <a name='P250'>250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable lower' id='C250'>
              DelVar lower
            </span>
          </td>
        </tr>
        <tr id='P251'>
          <td align='right'>
            <a name='P251'>251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(186)' id='C251'>
              Apply PC(186)
            </span>
          </td>
        </tr>
        <tr id='P252'>
          <td align='right'>
            <a name='P252'>252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C252'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P253'>
          <td align='right'>
            <a name='P253'>253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of pivot' id='C253'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P254'>
          <td align='right'>
            <a name='P254'>254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable pivot' id='C254'>
              DelVar pivot
            </span>
          </td>
        </tr>
        <tr id='P255'>
          <td align='right'>
            <a name='P255'>255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C255'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P256'>
          <td align='right'>
            <a name='P256'>256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of higher' id='C256'>
              LoadVar higher
            </span>
          </td>
        </tr>
        <tr id='P257'>
          <td align='right'>
            <a name='P257'>257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable higher' id='C257'>
              DelVar higher
            </span>
          </td>
        </tr>
        <tr id='P258'>
          <td align='right'>
            <a name='P258'>258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(186)' id='C258'>
              Apply PC(186)
            </span>
          </td>
        </tr>
        <tr id='P259'>
          <td align='right'>
            <a name='P259'>259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying +' id='C259'>
              3-ary +
            </span>
          </td>
        </tr>
        <tr id='P260'>
          <td align='right'>
            <a name='P260'>260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in sorted' id='C260'>
              StoreVar sorted
            </span>
          </td>
        </tr>
        <tr id='P261'>
          <td align='right'>
            <a name='P261'>261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push sorted' id='C261'>
              ReturnOp(sorted)
            </span>
          </td>
        </tr>
        <tr id='P262'>
          <td align='right'>
            <a name='P262'>262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable sorted' id='C262'>
              DelVar sorted
            </span>
          </td>
        </tr>
        <tr id='P263'>
          <td align='right'>
            <a name='P263'>263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C263'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P264'>
          <td align='right'>
            <a name='P264'>264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method sorted' id='C264'>
              Frame sorted(d)
            </span>
          </td>
        </tr>
        <tr id='P265'>
          <td align='right'>
            <a name='P265'>265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C265'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P266'>
          <td align='right'>
            <a name='P266'>266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C266'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P267'>
          <td align='right'>
            <a name='P267'>267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C267'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P268'>
          <td align='right'>
            <a name='P268'>268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(113)' id='C268'>
              Apply PC(113)
            </span>
          </td>
        </tr>
        <tr id='P269'>
          <td align='right'>
            <a name='P269'>269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(186)' id='C269'>
              Apply PC(186)
            </span>
          </td>
        </tr>
        <tr id='P270'>
          <td align='right'>
            <a name='P270'>270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C270'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P271'>
          <td align='right'>
            <a name='P271'>271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C271'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P272'>
          <td align='right'>
            <a name='P272'>272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C272'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P273'>
          <td align='right'>
            <a name='P273'>273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method reversed' id='C273'>
              Frame reversed(d)
            </span>
          </td>
        </tr>
        <tr id='P274'>
          <td align='right'>
            <a name='P274'>274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C274'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P275'>
          <td align='right'>
            <a name='P275'>275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C275'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P276'>
          <td align='right'>
            <a name='P276'>276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C276'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P277'>
          <td align='right'>
            <a name='P277'>277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in n' id='C277'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P278'>
          <td align='right'>
            <a name='P278'>278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C278'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P279'>
          <td align='right'>
            <a name='P279'>279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu211' id='C279'>
              StoreVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P280'>
          <td align='right'>
            <a name='P280'>280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C280'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P281'>
          <td align='right'>
            <a name='P281'>281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C281'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P282'>
          <td align='right'>
            <a name='P282'>282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C282'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P283'>
          <td align='right'>
            <a name='P283'>283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C283'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P284'>
          <td align='right'>
            <a name='P284'>284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C284'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P285'>
          <td align='right'>
            <a name='P285'>285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 298 if the value is False' id='C285'>
              JumpCond False 298
            </span>
          </td>
        </tr>
        <tr id='P286'>
          <td align='right'>
            <a name='P286'>286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu211' id='C286'>
              LoadVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P287'>
          <td align='right'>
            <a name='P287'>287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu211' id='C287'>
              DelVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P288'>
          <td align='right'>
            <a name='P288'>288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C288'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P289'>
          <td align='right'>
            <a name='P289'>289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C289'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P290'>
          <td align='right'>
            <a name='P290'>290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C290'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P291'>
          <td align='right'>
            <a name='P291'>291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C291'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P292'>
          <td align='right'>
            <a name='P292'>292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C292'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P293'>
          <td align='right'>
            <a name='P293'>293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C293'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P294'>
          <td align='right'>
            <a name='P294'>294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C294'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P295'>
          <td align='right'>
            <a name='P295'>295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C295'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P296'>
          <td align='right'>
            <a name='P296'>296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu211' id='C296'>
              StoreVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P297'>
          <td align='right'>
            <a name='P297'>297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 284' id='C297'>
              Jump 284
            </span>
          </td>
        </tr>
        <tr id='P298'>
          <td align='right'>
            <a name='P298'>298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C298'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P299'>
          <td align='right'>
            <a name='P299'>299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C299'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P300'>
          <td align='right'>
            <a name='P300'>300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C300'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P301'>
          <td align='right'>
            <a name='P301'>301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu211' id='C301'>
              LoadVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P302'>
          <td align='right'>
            <a name='P302'>302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu211' id='C302'>
              DelVar $accu211
            </span>
          </td>
        </tr>
        <tr id='P303'>
          <td align='right'>
            <a name='P303'>303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C303'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P304'>
          <td align='right'>
            <a name='P304'>304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C304'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P305'>
          <td align='right'>
            <a name='P305'>305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C305'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P306'>
          <td align='right'>
            <a name='P306'>306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method index' id='C306'>
              Frame index(d, e)
            </span>
          </td>
        </tr>
        <tr id='P307'>
          <td align='right'>
            <a name='P307'>307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C307'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P308'>
          <td align='right'>
            <a name='P308'>308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in i' id='C308'>
              StoreVar i
            </span>
          </td>
        </tr>
        <tr id='P309'>
          <td align='right'>
            <a name='P309'>309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C309'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P310'>
          <td align='right'>
            <a name='P310'>310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C310'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P311'>
          <td align='right'>
            <a name='P311'>311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C311'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P312'>
          <td align='right'>
            <a name='P312'>312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C312'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P313'>
          <td align='right'>
            <a name='P313'>313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C313'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P314'>
          <td align='right'>
            <a name='P314'>314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C314'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P315'>
          <td align='right'>
            <a name='P315'>315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 322 if the value is False' id='C315'>
              JumpCond False 322
            </span>
          </td>
        </tr>
        <tr id='P316'>
          <td align='right'>
            <a name='P316'>316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C316'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P317'>
          <td align='right'>
            <a name='P317'>317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C317'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P318'>
          <td align='right'>
            <a name='P318'>318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C318'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P319'>
          <td align='right'>
            <a name='P319'>319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C319'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P320'>
          <td align='right'>
            <a name='P320'>320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in i' id='C320'>
              StoreVar i
            </span>
          </td>
        </tr>
        <tr id='P321'>
          <td align='right'>
            <a name='P321'>321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 309' id='C321'>
              Jump 309
            </span>
          </td>
        </tr>
        <tr id='P322'>
          <td align='right'>
            <a name='P322'>322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C322'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P323'>
          <td align='right'>
            <a name='P323'>323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C323'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P324'>
          <td align='right'>
            <a name='P324'>324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push i' id='C324'>
              ReturnOp(i)
            </span>
          </td>
        </tr>
        <tr id='P325'>
          <td align='right'>
            <a name='P325'>325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C325'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P326'>
          <td align='right'>
            <a name='P326'>326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C326'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P327'>
          <td align='right'>
            <a name='P327'>327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method startswith' id='C327'>
              Frame startswith(d, prefix)
            </span>
          </td>
        </tr>
        <tr id='P328'>
          <td align='right'>
            <a name='P328'>328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C328'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P329'>
          <td align='right'>
            <a name='P329'>329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of prefix' id='C329'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P330'>
          <td align='right'>
            <a name='P330'>330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C330'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P331'>
          <td align='right'>
            <a name='P331'>331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C331'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P332'>
          <td align='right'>
            <a name='P332'>332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C332'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P333'>
          <td align='right'>
            <a name='P333'>333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <=' id='C333'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P334'>
          <td align='right'>
            <a name='P334'>334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 368 if the value is False' id='C334'>
              JumpCond False 368
            </span>
          </td>
        </tr>
        <tr id='P335'>
          <td align='right'>
            <a name='P335'>335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C335'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P336'>
          <td align='right'>
            <a name='P336'>336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu257' id='C336'>
              StoreVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P337'>
          <td align='right'>
            <a name='P337'>337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C337'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P338'>
          <td align='right'>
            <a name='P338'>338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of prefix' id='C338'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P339'>
          <td align='right'>
            <a name='P339'>339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C339'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P340'>
          <td align='right'>
            <a name='P340'>340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C340'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P341'>
          <td align='right'>
            <a name='P341'>341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C341'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P342'>
          <td align='right'>
            <a name='P342'>342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C342'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P343'>
          <td align='right'>
            <a name='P343'>343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C343'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P344'>
          <td align='right'>
            <a name='P344'>344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C344'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P345'>
          <td align='right'>
            <a name='P345'>345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 361 if the value is False' id='C345'>
              JumpCond False 361
            </span>
          </td>
        </tr>
        <tr id='P346'>
          <td align='right'>
            <a name='P346'>346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu257' id='C346'>
              LoadVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P347'>
          <td align='right'>
            <a name='P347'>347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu257' id='C347'>
              DelVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P348'>
          <td align='right'>
            <a name='P348'>348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C348'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P349'>
          <td align='right'>
            <a name='P349'>349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C349'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P350'>
          <td align='right'>
            <a name='P350'>350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C350'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P351'>
          <td align='right'>
            <a name='P351'>351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C351'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P352'>
          <td align='right'>
            <a name='P352'>352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of prefix' id='C352'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P353'>
          <td align='right'>
            <a name='P353'>353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C353'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P354'>
          <td align='right'>
            <a name='P354'>354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C354'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P355'>
          <td align='right'>
            <a name='P355'>355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C355'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P356'>
          <td align='right'>
            <a name='P356'>356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C356'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P357'>
          <td align='right'>
            <a name='P357'>357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C357'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P358'>
          <td align='right'>
            <a name='P358'>358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C358'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P359'>
          <td align='right'>
            <a name='P359'>359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu257' id='C359'>
              StoreVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P360'>
          <td align='right'>
            <a name='P360'>360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 344' id='C360'>
              Jump 344
            </span>
          </td>
        </tr>
        <tr id='P361'>
          <td align='right'>
            <a name='P361'>361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C361'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P362'>
          <td align='right'>
            <a name='P362'>362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C362'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P363'>
          <td align='right'>
            <a name='P363'>363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable prefix' id='C363'>
              DelVar prefix
            </span>
          </td>
        </tr>
        <tr id='P364'>
          <td align='right'>
            <a name='P364'>364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu257' id='C364'>
              LoadVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P365'>
          <td align='right'>
            <a name='P365'>365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu257' id='C365'>
              DelVar $accu257
            </span>
          </td>
        </tr>
        <tr id='P366'>
          <td align='right'>
            <a name='P366'>366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying all' id='C366'>
              1-ary all
            </span>
          </td>
        </tr>
        <tr id='P367'>
          <td align='right'>
            <a name='P367'>367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C367'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P368'>
          <td align='right'>
            <a name='P368'>368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C368'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P369'>
          <td align='right'>
            <a name='P369'>369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable prefix' id='C369'>
              DelVar prefix
            </span>
          </td>
        </tr>
        <tr id='P370'>
          <td align='right'>
            <a name='P370'>370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C370'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P371'>
          <td align='right'>
            <a name='P371'>371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C371'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P372'>
          <td align='right'>
            <a name='P372'>372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C372'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P373'>
          <td align='right'>
            <a name='P373'>373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C373'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P374'>
          <td align='right'>
            <a name='P374'>374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method foldl' id='C374'>
              Frame foldl(d, f, z)
            </span>
          </td>
        </tr>
        <tr id='P375'>
          <td align='right'>
            <a name='P375'>375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C375'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P376'>
          <td align='right'>
            <a name='P376'>376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of z' id='C376'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P377'>
          <td align='right'>
            <a name='P377'>377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable z' id='C377'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P378'>
          <td align='right'>
            <a name='P378'>378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C378'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P379'>
          <td align='right'>
            <a name='P379'>379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C379'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P380'>
          <td align='right'>
            <a name='P380'>380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C380'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P381'>
          <td align='right'>
            <a name='P381'>381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C381'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P382'>
          <td align='right'>
            <a name='P382'>382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C382'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P383'>
          <td align='right'>
            <a name='P383'>383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 396 if the value is False' id='C383'>
              JumpCond False 396
            </span>
          </td>
        </tr>
        <tr id='P384'>
          <td align='right'>
            <a name='P384'>384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of f' id='C384'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P385'>
          <td align='right'>
            <a name='P385'>385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C385'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P386'>
          <td align='right'>
            <a name='P386'>386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C386'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P387'>
          <td align='right'>
            <a name='P387'>387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C387'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P388'>
          <td align='right'>
            <a name='P388'>388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C388'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P389'>
          <td align='right'>
            <a name='P389'>389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C389'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P390'>
          <td align='right'>
            <a name='P390'>390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C390'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P391'>
          <td align='right'>
            <a name='P391'>391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C391'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P392'>
          <td align='right'>
            <a name='P392'>392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C392'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P393'>
          <td align='right'>
            <a name='P393'>393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C393'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P394'>
          <td align='right'>
            <a name='P394'>394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C394'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P395'>
          <td align='right'>
            <a name='P395'>395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 382' id='C395'>
              Jump 382
            </span>
          </td>
        </tr>
        <tr id='P396'>
          <td align='right'>
            <a name='P396'>396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C396'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P397'>
          <td align='right'>
            <a name='P397'>397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable f' id='C397'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P398'>
          <td align='right'>
            <a name='P398'>398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C398'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P399'>
          <td align='right'>
            <a name='P399'>399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C399'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P400'>
          <td align='right'>
            <a name='P400'>400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method foldr' id='C400'>
              Frame foldr(d, f, z)
            </span>
          </td>
        </tr>
        <tr id='P401'>
          <td align='right'>
            <a name='P401'>401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C401'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P402'>
          <td align='right'>
            <a name='P402'>402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C402'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P403'>
          <td align='right'>
            <a name='P403'>403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C403'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P404'>
          <td align='right'>
            <a name='P404'>404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C404'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P405'>
          <td align='right'>
            <a name='P405'>405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C405'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P406'>
          <td align='right'>
            <a name='P406'>406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 412 if the value is False' id='C406'>
              JumpCond False 412
            </span>
          </td>
        </tr>
        <tr id='P407'>
          <td align='right'>
            <a name='P407'>407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C407'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P408'>
          <td align='right'>
            <a name='P408'>408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable f' id='C408'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P409'>
          <td align='right'>
            <a name='P409'>409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of z' id='C409'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P410'>
          <td align='right'>
            <a name='P410'>410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable z' id='C410'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P411'>
          <td align='right'>
            <a name='P411'>411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 434' id='C411'>
              Jump 434
            </span>
          </td>
        </tr>
        <tr id='P412'>
          <td align='right'>
            <a name='P412'>412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of f' id='C412'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P413'>
          <td align='right'>
            <a name='P413'>413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C413'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P414'>
          <td align='right'>
            <a name='P414'>414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C414'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P415'>
          <td align='right'>
            <a name='P415'>415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C415'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P416'>
          <td align='right'>
            <a name='P416'>416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C416'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P417'>
          <td align='right'>
            <a name='P417'>417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C417'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P418'>
          <td align='right'>
            <a name='P418'>418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C418'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P419'>
          <td align='right'>
            <a name='P419'>419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C419'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P420'>
          <td align='right'>
            <a name='P420'>420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C420'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P421'>
          <td align='right'>
            <a name='P421'>421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C421'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P422'>
          <td align='right'>
            <a name='P422'>422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(57)' id='C422'>
              Apply PC(57)
            </span>
          </td>
        </tr>
        <tr id='P423'>
          <td align='right'>
            <a name='P423'>423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C423'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P424'>
          <td align='right'>
            <a name='P424'>424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of f' id='C424'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P425'>
          <td align='right'>
            <a name='P425'>425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable f' id='C425'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P426'>
          <td align='right'>
            <a name='P426'>426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C426'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P427'>
          <td align='right'>
            <a name='P427'>427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of z' id='C427'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P428'>
          <td align='right'>
            <a name='P428'>428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable z' id='C428'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P429'>
          <td align='right'>
            <a name='P429'>429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C429'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P430'>
          <td align='right'>
            <a name='P430'>430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(400)' id='C430'>
              Apply PC(400)
            </span>
          </td>
        </tr>
        <tr id='P431'>
          <td align='right'>
            <a name='P431'>431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C431'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P432'>
          <td align='right'>
            <a name='P432'>432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C432'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P433'>
          <td align='right'>
            <a name='P433'>433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C433'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P434'>
          <td align='right'>
            <a name='P434'>434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C434'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P435'>
          <td align='right'>
            <a name='P435'>435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C435'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P436'>
          <td align='right'>
            <a name='P436'>436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C436'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P437'>
          <td align='right'>
            <a name='P437'>437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method reduce' id='C437'>
              Frame reduce(f, d, z)
            </span>
          </td>
        </tr>
        <tr id='P438'>
          <td align='right'>
            <a name='P438'>438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C438'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P439'>
          <td align='right'>
            <a name='P439'>439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C439'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P440'>
          <td align='right'>
            <a name='P440'>440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C440'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P441'>
          <td align='right'>
            <a name='P441'>441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C441'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P442'>
          <td align='right'>
            <a name='P442'>442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C442'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P443'>
          <td align='right'>
            <a name='P443'>443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of f' id='C443'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P444'>
          <td align='right'>
            <a name='P444'>444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable f' id='C444'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P445'>
          <td align='right'>
            <a name='P445'>445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C445'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P446'>
          <td align='right'>
            <a name='P446'>446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of z' id='C446'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P447'>
          <td align='right'>
            <a name='P447'>447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable z' id='C447'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P448'>
          <td align='right'>
            <a name='P448'>448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C448'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P449'>
          <td align='right'>
            <a name='P449'>449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(374)' id='C449'>
              Apply PC(374)
            </span>
          </td>
        </tr>
        <tr id='P450'>
          <td align='right'>
            <a name='P450'>450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C450'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P451'>
          <td align='right'>
            <a name='P451'>451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C451'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P452'>
          <td align='right'>
            <a name='P452'>452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C452'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P453'>
          <td align='right'>
            <a name='P453'>453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method permuted' id='C453'>
              Frame permuted(s)
            </span>
          </td>
        </tr>
        <tr id='P454'>
          <td align='right'>
            <a name='P454'>454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C454'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P455'>
          <td align='right'>
            <a name='P455'>455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in perm' id='C455'>
              StoreVar perm
            </span>
          </td>
        </tr>
        <tr id='P456'>
          <td align='right'>
            <a name='P456'>456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C456'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P457'>
          <td align='right'>
            <a name='P457'>457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C457'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P458'>
          <td align='right'>
            <a name='P458'>458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in c' id='C458'>
              StoreVar c
            </span>
          </td>
        </tr>
        <tr id='P459'>
          <td align='right'>
            <a name='P459'>459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C459'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P460'>
          <td align='right'>
            <a name='P460'>460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C460'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P461'>
          <td align='right'>
            <a name='P461'>461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C461'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P462'>
          <td align='right'>
            <a name='P462'>462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 482 if the value is False' id='C462'>
              JumpCond False 482
            </span>
          </td>
        </tr>
        <tr id='P463'>
          <td align='right'>
            <a name='P463'>463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C463'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P464'>
          <td align='right'>
            <a name='P464'>464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a set value and push one of its elements' id='C464'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P465'>
          <td align='right'>
            <a name='P465'>465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in e' id='C465'>
              StoreVar e
            </span>
          </td>
        </tr>
        <tr id='P466'>
          <td align='right'>
            <a name='P466'>466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of perm' id='C466'>
              LoadVar perm
            </span>
          </td>
        </tr>
        <tr id='P467'>
          <td align='right'>
            <a name='P467'>467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable perm' id='C467'>
              DelVar perm
            </span>
          </td>
        </tr>
        <tr id='P468'>
          <td align='right'>
            <a name='P468'>468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C468'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P469'>
          <td align='right'>
            <a name='P469'>469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C469'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P470'>
          <td align='right'>
            <a name='P470'>470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C470'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P471'>
          <td align='right'>
            <a name='P471'>471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C471'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P472'>
          <td align='right'>
            <a name='P472'>472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in perm' id='C472'>
              StoreVar perm
            </span>
          </td>
        </tr>
        <tr id='P473'>
          <td align='right'>
            <a name='P473'>473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C473'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P474'>
          <td align='right'>
            <a name='P474'>474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C474'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P475'>
          <td align='right'>
            <a name='P475'>475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C475'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P476'>
          <td align='right'>
            <a name='P476'>476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C476'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P477'>
          <td align='right'>
            <a name='P477'>477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C477'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P478'>
          <td align='right'>
            <a name='P478'>478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C478'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P479'>
          <td align='right'>
            <a name='P479'>479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C479'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P480'>
          <td align='right'>
            <a name='P480'>480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in c' id='C480'>
              StoreVar c
            </span>
          </td>
        </tr>
        <tr id='P481'>
          <td align='right'>
            <a name='P481'>481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 459' id='C481'>
              Jump 459
            </span>
          </td>
        </tr>
        <tr id='P482'>
          <td align='right'>
            <a name='P482'>482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C482'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P483'>
          <td align='right'>
            <a name='P483'>483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push perm' id='C483'>
              ReturnOp(perm)
            </span>
          </td>
        </tr>
        <tr id='P484'>
          <td align='right'>
            <a name='P484'>484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable perm' id='C484'>
              DelVar perm
            </span>
          </td>
        </tr>
        <tr id='P485'>
          <td align='right'>
            <a name='P485'>485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C485'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P486'>
          <td align='right'>
            <a name='P486'>486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method filter' id='C486'>
              Frame filter(cond, s)
            </span>
          </td>
        </tr>
        <tr id='P487'>
          <td align='right'>
            <a name='P487'>487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C487'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P488'>
          <td align='right'>
            <a name='P488'>488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu377' id='C488'>
              StoreVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P489'>
          <td align='right'>
            <a name='P489'>489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C489'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P490'>
          <td align='right'>
            <a name='P490'>490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C490'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P491'>
          <td align='right'>
            <a name='P491'>491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C491'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P492'>
          <td align='right'>
            <a name='P492'>492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C492'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P493'>
          <td align='right'>
            <a name='P493'>493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C493'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P494'>
          <td align='right'>
            <a name='P494'>494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 507 if the value is False' id='C494'>
              JumpCond False 507
            </span>
          </td>
        </tr>
        <tr id='P495'>
          <td align='right'>
            <a name='P495'>495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of cond' id='C495'>
              LoadVar cond
            </span>
          </td>
        </tr>
        <tr id='P496'>
          <td align='right'>
            <a name='P496'>496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C496'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P497'>
          <td align='right'>
            <a name='P497'>497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C497'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P498'>
          <td align='right'>
            <a name='P498'>498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C498'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P499'>
          <td align='right'>
            <a name='P499'>499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 492 if the value is False' id='C499'>
              JumpCond False 492
            </span>
          </td>
        </tr>
        <tr id='P500'>
          <td align='right'>
            <a name='P500'>500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu377' id='C500'>
              LoadVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P501'>
          <td align='right'>
            <a name='P501'>501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu377' id='C501'>
              DelVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P502'>
          <td align='right'>
            <a name='P502'>502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C502'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P503'>
          <td align='right'>
            <a name='P503'>503</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C503'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P504'>
          <td align='right'>
            <a name='P504'>504</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C504'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P505'>
          <td align='right'>
            <a name='P505'>505</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu377' id='C505'>
              StoreVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P506'>
          <td align='right'>
            <a name='P506'>506</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 492' id='C506'>
              Jump 492
            </span>
          </td>
        </tr>
        <tr id='P507'>
          <td align='right'>
            <a name='P507'>507</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cond' id='C507'>
              DelVar cond
            </span>
          </td>
        </tr>
        <tr id='P508'>
          <td align='right'>
            <a name='P508'>508</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C508'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P509'>
          <td align='right'>
            <a name='P509'>509</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu377' id='C509'>
              LoadVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P510'>
          <td align='right'>
            <a name='P510'>510</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu377' id='C510'>
              DelVar $accu377
            </span>
          </td>
        </tr>
        <tr id='P511'>
          <td align='right'>
            <a name='P511'>511</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in t' id='C511'>
              StoreVar t
            </span>
          </td>
        </tr>
        <tr id='P512'>
          <td align='right'>
            <a name='P512'>512</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push t' id='C512'>
              ReturnOp(t)
            </span>
          </td>
        </tr>
        <tr id='P513'>
          <td align='right'>
            <a name='P513'>513</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable t' id='C513'>
              DelVar t
            </span>
          </td>
        </tr>
        <tr id='P514'>
          <td align='right'>
            <a name='P514'>514</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C514'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P515'>
          <td align='right'>
            <a name='P515'>515</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method map' id='C515'>
              Frame map(f, s)
            </span>
          </td>
        </tr>
        <tr id='P516'>
          <td align='right'>
            <a name='P516'>516</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C516'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P517'>
          <td align='right'>
            <a name='P517'>517</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu398' id='C517'>
              StoreVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P518'>
          <td align='right'>
            <a name='P518'>518</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C518'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P519'>
          <td align='right'>
            <a name='P519'>519</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C519'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P520'>
          <td align='right'>
            <a name='P520'>520</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C520'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P521'>
          <td align='right'>
            <a name='P521'>521</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C521'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P522'>
          <td align='right'>
            <a name='P522'>522</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 533 if the value is False' id='C522'>
              JumpCond False 533
            </span>
          </td>
        </tr>
        <tr id='P523'>
          <td align='right'>
            <a name='P523'>523</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu398' id='C523'>
              LoadVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P524'>
          <td align='right'>
            <a name='P524'>524</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu398' id='C524'>
              DelVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P525'>
          <td align='right'>
            <a name='P525'>525</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of f' id='C525'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P526'>
          <td align='right'>
            <a name='P526'>526</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C526'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P527'>
          <td align='right'>
            <a name='P527'>527</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C527'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P528'>
          <td align='right'>
            <a name='P528'>528</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C528'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P529'>
          <td align='right'>
            <a name='P529'>529</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C529'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P530'>
          <td align='right'>
            <a name='P530'>530</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C530'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P531'>
          <td align='right'>
            <a name='P531'>531</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu398' id='C531'>
              StoreVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P532'>
          <td align='right'>
            <a name='P532'>532</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 521' id='C532'>
              Jump 521
            </span>
          </td>
        </tr>
        <tr id='P533'>
          <td align='right'>
            <a name='P533'>533</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C533'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P534'>
          <td align='right'>
            <a name='P534'>534</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable f' id='C534'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P535'>
          <td align='right'>
            <a name='P535'>535</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu398' id='C535'>
              LoadVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P536'>
          <td align='right'>
            <a name='P536'>536</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu398' id='C536'>
              DelVar $accu398
            </span>
          </td>
        </tr>
        <tr id='P537'>
          <td align='right'>
            <a name='P537'>537</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in t' id='C537'>
              StoreVar t
            </span>
          </td>
        </tr>
        <tr id='P538'>
          <td align='right'>
            <a name='P538'>538</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push t' id='C538'>
              ReturnOp(t)
            </span>
          </td>
        </tr>
        <tr id='P539'>
          <td align='right'>
            <a name='P539'>539</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable t' id='C539'>
              DelVar t
            </span>
          </td>
        </tr>
        <tr id='P540'>
          <td align='right'>
            <a name='P540'>540</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C540'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P541'>
          <td align='right'>
            <a name='P541'>541</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method empty' id='C541'>
              Frame empty()
            </span>
          </td>
        </tr>
        <tr id='P542'>
          <td align='right'>
            <a name='P542'>542</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C542'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P543'>
          <td align='right'>
            <a name='P543'>543</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in bg' id='C543'>
              StoreVar bg
            </span>
          </td>
        </tr>
        <tr id='P544'>
          <td align='right'>
            <a name='P544'>544</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push bg' id='C544'>
              ReturnOp(bg)
            </span>
          </td>
        </tr>
        <tr id='P545'>
          <td align='right'>
            <a name='P545'>545</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C545'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P546'>
          <td align='right'>
            <a name='P546'>546</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 602' id='C546'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P547'>
          <td align='right'>
            <a name='P547'>547</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method fromSet' id='C547'>
              Frame fromSet(s)
            </span>
          </td>
        </tr>
        <tr id='P548'>
          <td align='right'>
            <a name='P548'>548</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for dict comprehension: push constant {:}' id='C548'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P549'>
          <td align='right'>
            <a name='P549'>549</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for dict comprehension: pop a value and store in $accu422' id='C549'>
              StoreVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P550'>
          <td align='right'>
            <a name='P550'>550</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C550'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P551'>
          <td align='right'>
            <a name='P551'>551</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C551'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P552'>
          <td align='right'>
            <a name='P552'>552</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C552'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P553'>
          <td align='right'>
            <a name='P553'>553</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to elt; push False or True depending on success' id='C553'>
              Cut(elt)
            </span>
          </td>
        </tr>
        <tr id='P554'>
          <td align='right'>
            <a name='P554'>554</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 563 if the value is False' id='C554'>
              JumpCond False 563
            </span>
          </td>
        </tr>
        <tr id='P555'>
          <td align='right'>
            <a name='P555'>555</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu422' id='C555'>
              LoadVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P556'>
          <td align='right'>
            <a name='P556'>556</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu422' id='C556'>
              DelVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P557'>
          <td align='right'>
            <a name='P557'>557</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C557'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P558'>
          <td align='right'>
            <a name='P558'>558</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C558'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P559'>
          <td align='right'>
            <a name='P559'>559</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C559'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P560'>
          <td align='right'>
            <a name='P560'>560</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C560'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P561'>
          <td align='right'>
            <a name='P561'>561</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu422' id='C561'>
              StoreVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P562'>
          <td align='right'>
            <a name='P562'>562</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 553' id='C562'>
              Jump 553
            </span>
          </td>
        </tr>
        <tr id='P563'>
          <td align='right'>
            <a name='P563'>563</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C563'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P564'>
          <td align='right'>
            <a name='P564'>564</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu422' id='C564'>
              LoadVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P565'>
          <td align='right'>
            <a name='P565'>565</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu422' id='C565'>
              DelVar $accu422
            </span>
          </td>
        </tr>
        <tr id='P566'>
          <td align='right'>
            <a name='P566'>566</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in bg' id='C566'>
              StoreVar bg
            </span>
          </td>
        </tr>
        <tr id='P567'>
          <td align='right'>
            <a name='P567'>567</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push bg' id='C567'>
              ReturnOp(bg)
            </span>
          </td>
        </tr>
        <tr id='P568'>
          <td align='right'>
            <a name='P568'>568</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C568'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P569'>
          <td align='right'>
            <a name='P569'>569</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 602' id='C569'>
              Jump 602
            </span>
          </td>
        </tr>
        <tr id='P570'>
          <td align='right'>
            <a name='P570'>570</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fromList' id='C570'>
              Frame fromList(a)
            </span>
          </td>
        </tr>
        <tr id='P571'>
          <td align='right'>
            <a name='P571'>571</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C571'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P572'>
          <td align='right'>
            <a name='P572'>572</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in bg' id='C572'>
              StoreVar bg
            </span>
          </td>
        </tr>
        <tr id='P573'>
          <td align='right'>
            <a name='P573'>573</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C573'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P574'>
          <td align='right'>
            <a name='P574'>574</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C574'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P575'>
          <td align='right'>
            <a name='P575'>575</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C575'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P576'>
          <td align='right'>
            <a name='P576'>576</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C576'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P577'>
          <td align='right'>
            <a name='P577'>577</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 599 if the value is False' id='C577'>
              JumpCond False 599
            </span>
          </td>
        </tr>
        <tr id='P578'>
          <td align='right'>
            <a name='P578'>578</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C578'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P579'>
          <td align='right'>
            <a name='P579'>579</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C579'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P580'>
          <td align='right'>
            <a name='P580'>580</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C580'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P581'>
          <td align='right'>
            <a name='P581'>581</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 592 if the value is False' id='C581'>
              JumpCond False 592
            </span>
          </td>
        </tr>
        <tr id='P582'>
          <td align='right'>
            <a name='P582'>582</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?bg' id='C582'>
              Push ?bg
            </span>
          </td>
        </tr>
        <tr id='P583'>
          <td align='right'>
            <a name='P583'>583</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C583'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P584'>
          <td align='right'>
            <a name='P584'>584</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C584'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P585'>
          <td align='right'>
            <a name='P585'>585</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C585'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P586'>
          <td align='right'>
            <a name='P586'>586</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C586'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P587'>
          <td align='right'>
            <a name='P587'>587</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C587'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P588'>
          <td align='right'>
            <a name='P588'>588</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C588'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P589'>
          <td align='right'>
            <a name='P589'>589</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C589'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P590'>
          <td align='right'>
            <a name='P590'>590</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C590'>
              StoreVar [bg]
            </span>
          </td>
        </tr>
        <tr id='P591'>
          <td align='right'>
            <a name='P591'>591</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 576' id='C591'>
              Jump 576
            </span>
          </td>
        </tr>
        <tr id='P592'>
          <td align='right'>
            <a name='P592'>592</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?bg' id='C592'>
              Push ?bg
            </span>
          </td>
        </tr>
        <tr id='P593'>
          <td align='right'>
            <a name='P593'>593</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C593'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P594'>
          <td align='right'>
            <a name='P594'>594</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C594'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P595'>
          <td align='right'>
            <a name='P595'>595</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C595'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P596'>
          <td align='right'>
            <a name='P596'>596</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C596'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P597'>
          <td align='right'>
            <a name='P597'>597</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C597'>
              StoreVar [bg]
            </span>
          </td>
        </tr>
        <tr id='P598'>
          <td align='right'>
            <a name='P598'>598</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 576' id='C598'>
              Jump 576
            </span>
          </td>
        </tr>
        <tr id='P599'>
          <td align='right'>
            <a name='P599'>599</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C599'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P600'>
          <td align='right'>
            <a name='P600'>600</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push bg' id='C600'>
              ReturnOp(bg)
            </span>
          </td>
        </tr>
        <tr id='P601'>
          <td align='right'>
            <a name='P601'>601</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C601'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P602'>
          <td align='right'>
            <a name='P602'>602</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(605)' id='C602'>
              Push PC(605)
            </span>
          </td>
        </tr>
        <tr id='P603'>
          <td align='right'>
            <a name='P603'>603</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$multiplicity' id='C603'>
              Builtin(bag$multiplicity)
            </span>
          </td>
        </tr>
        <tr id='P604'>
          <td align='right'>
            <a name='P604'>604</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 624' id='C604'>
              Jump 624
            </span>
          </td>
        </tr>
        <tr id='P605'>
          <td align='right'>
            <a name='P605'>605</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method multiplicity' id='C605'>
              Frame multiplicity(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P606'>
          <td align='right'>
            <a name='P606'>606</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C606'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P607'>
          <td align='right'>
            <a name='P607'>607</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C607'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P608'>
          <td align='right'>
            <a name='P608'>608</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C608'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P609'>
          <td align='right'>
            <a name='P609'>609</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 618 if the value is False' id='C609'>
              JumpCond False 618
            </span>
          </td>
        </tr>
        <tr id='P610'>
          <td align='right'>
            <a name='P610'>610</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C610'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P611'>
          <td align='right'>
            <a name='P611'>611</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C611'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P612'>
          <td align='right'>
            <a name='P612'>612</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C612'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P613'>
          <td align='right'>
            <a name='P613'>613</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C613'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P614'>
          <td align='right'>
            <a name='P614'>614</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C614'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P615'>
          <td align='right'>
            <a name='P615'>615</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C615'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P616'>
          <td align='right'>
            <a name='P616'>616</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in count' id='C616'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P617'>
          <td align='right'>
            <a name='P617'>617</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 622' id='C617'>
              Jump 622
            </span>
          </td>
        </tr>
        <tr id='P618'>
          <td align='right'>
            <a name='P618'>618</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C618'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P619'>
          <td align='right'>
            <a name='P619'>619</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C619'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P620'>
          <td align='right'>
            <a name='P620'>620</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C620'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P621'>
          <td align='right'>
            <a name='P621'>621</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in count' id='C621'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P622'>
          <td align='right'>
            <a name='P622'>622</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push count' id='C622'>
              ReturnOp(count)
            </span>
          </td>
        </tr>
        <tr id='P623'>
          <td align='right'>
            <a name='P623'>623</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable count' id='C623'>
              DelVar count
            </span>
          </td>
        </tr>
        <tr id='P624'>
          <td align='right'>
            <a name='P624'>624</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(627)' id='C624'>
              Push PC(627)
            </span>
          </td>
        </tr>
        <tr id='P625'>
          <td align='right'>
            <a name='P625'>625</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$size' id='C625'>
              Builtin(bag$size)
            </span>
          </td>
        </tr>
        <tr id='P626'>
          <td align='right'>
            <a name='P626'>626</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 646' id='C626'>
              Jump 646
            </span>
          </td>
        </tr>
        <tr id='P627'>
          <td align='right'>
            <a name='P627'>627</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method size' id='C627'>
              Frame size(bg)
            </span>
          </td>
        </tr>
        <tr id='P628'>
          <td align='right'>
            <a name='P628'>628</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C628'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P629'>
          <td align='right'>
            <a name='P629'>629</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in count' id='C629'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P630'>
          <td align='right'>
            <a name='P630'>630</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C630'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P631'>
          <td align='right'>
            <a name='P631'>631</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C631'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P632'>
          <td align='right'>
            <a name='P632'>632</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C632'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P633'>
          <td align='right'>
            <a name='P633'>633</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to _:c; push False or True depending on success' id='C633'>
              Cut(_, c)
            </span>
          </td>
        </tr>
        <tr id='P634'>
          <td align='right'>
            <a name='P634'>634</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable _' id='C634'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P635'>
          <td align='right'>
            <a name='P635'>635</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 643 if the value is False' id='C635'>
              JumpCond False 643
            </span>
          </td>
        </tr>
        <tr id='P636'>
          <td align='right'>
            <a name='P636'>636</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of count' id='C636'>
              LoadVar count
            </span>
          </td>
        </tr>
        <tr id='P637'>
          <td align='right'>
            <a name='P637'>637</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable count' id='C637'>
              DelVar count
            </span>
          </td>
        </tr>
        <tr id='P638'>
          <td align='right'>
            <a name='P638'>638</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C638'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P639'>
          <td align='right'>
            <a name='P639'>639</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C639'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P640'>
          <td align='right'>
            <a name='P640'>640</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C640'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P641'>
          <td align='right'>
            <a name='P641'>641</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in count' id='C641'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P642'>
          <td align='right'>
            <a name='P642'>642</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 633' id='C642'>
              Jump 633
            </span>
          </td>
        </tr>
        <tr id='P643'>
          <td align='right'>
            <a name='P643'>643</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C643'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P644'>
          <td align='right'>
            <a name='P644'>644</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push count' id='C644'>
              ReturnOp(count)
            </span>
          </td>
        </tr>
        <tr id='P645'>
          <td align='right'>
            <a name='P645'>645</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable count' id='C645'>
              DelVar count
            </span>
          </td>
        </tr>
        <tr id='P646'>
          <td align='right'>
            <a name='P646'>646</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(649)' id='C646'>
              Push PC(649)
            </span>
          </td>
        </tr>
        <tr id='P647'>
          <td align='right'>
            <a name='P647'>647</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$bmin' id='C647'>
              Builtin(bag$bmin)
            </span>
          </td>
        </tr>
        <tr id='P648'>
          <td align='right'>
            <a name='P648'>648</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 665' id='C648'>
              Jump 665
            </span>
          </td>
        </tr>
        <tr id='P649'>
          <td align='right'>
            <a name='P649'>649</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bmin' id='C649'>
              Frame bmin(bg)
            </span>
          </td>
        </tr>
        <tr id='P650'>
          <td align='right'>
            <a name='P650'>650</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C650'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P651'>
          <td align='right'>
            <a name='P651'>651</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C651'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P652'>
          <td align='right'>
            <a name='P652'>652</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C652'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P653'>
          <td align='right'>
            <a name='P653'>653</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C653'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P654'>
          <td align='right'>
            <a name='P654'>654</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C654'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P655'>
          <td align='right'>
            <a name='P655'>655</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a condition and raise exception if condition is false' id='C655'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P656'>
          <td align='right'>
            <a name='P656'>656</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C656'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P657'>
          <td align='right'>
            <a name='P657'>657</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C657'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P658'>
          <td align='right'>
            <a name='P658'>658</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C658'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P659'>
          <td align='right'>
            <a name='P659'>659</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C659'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P660'>
          <td align='right'>
            <a name='P660'>660</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying keys' id='C660'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P661'>
          <td align='right'>
            <a name='P661'>661</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying min' id='C661'>
              1-ary min
            </span>
          </td>
        </tr>
        <tr id='P662'>
          <td align='right'>
            <a name='P662'>662</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in count' id='C662'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P663'>
          <td align='right'>
            <a name='P663'>663</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push count' id='C663'>
              ReturnOp(count)
            </span>
          </td>
        </tr>
        <tr id='P664'>
          <td align='right'>
            <a name='P664'>664</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable count' id='C664'>
              DelVar count
            </span>
          </td>
        </tr>
        <tr id='P665'>
          <td align='right'>
            <a name='P665'>665</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(668)' id='C665'>
              Push PC(668)
            </span>
          </td>
        </tr>
        <tr id='P666'>
          <td align='right'>
            <a name='P666'>666</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$bmax' id='C666'>
              Builtin(bag$bmax)
            </span>
          </td>
        </tr>
        <tr id='P667'>
          <td align='right'>
            <a name='P667'>667</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 693' id='C667'>
              Jump 693
            </span>
          </td>
        </tr>
        <tr id='P668'>
          <td align='right'>
            <a name='P668'>668</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method bmax' id='C668'>
              Frame bmax(bg)
            </span>
          </td>
        </tr>
        <tr id='P669'>
          <td align='right'>
            <a name='P669'>669</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C669'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P670'>
          <td align='right'>
            <a name='P670'>670</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C670'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P671'>
          <td align='right'>
            <a name='P671'>671</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C671'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P672'>
          <td align='right'>
            <a name='P672'>672</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C672'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P673'>
          <td align='right'>
            <a name='P673'>673</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C673'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P674'>
          <td align='right'>
            <a name='P674'>674</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C674'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P675'>
          <td align='right'>
            <a name='P675'>675</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C675'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P676'>
          <td align='right'>
            <a name='P676'>676</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C676'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P677'>
          <td align='right'>
            <a name='P677'>677</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C677'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P678'>
          <td align='right'>
            <a name='P678'>678</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C678'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P679'>
          <td align='right'>
            <a name='P679'>679</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying keys' id='C679'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P680'>
          <td align='right'>
            <a name='P680'>680</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying max' id='C680'>
              1-ary max
            </span>
          </td>
        </tr>
        <tr id='P681'>
          <td align='right'>
            <a name='P681'>681</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in count' id='C681'>
              StoreVar count
            </span>
          </td>
        </tr>
        <tr id='P682'>
          <td align='right'>
            <a name='P682'>682</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push count' id='C682'>
              ReturnOp(count)
            </span>
          </td>
        </tr>
        <tr id='P683'>
          <td align='right'>
            <a name='P683'>683</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable count' id='C683'>
              DelVar count
            </span>
          </td>
        </tr>
        <tr id='P684'>
          <td align='right'>
            <a name='P684'>684</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 693' id='C684'>
              Jump 693
            </span>
          </td>
        </tr>
        <tr id='P685'>
          <td align='right'>
            <a name='P685'>685</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bchoose' id='C685'>
              Frame bchoose(bg)
            </span>
          </td>
        </tr>
        <tr id='P686'>
          <td align='right'>
            <a name='P686'>686</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C686'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P687'>
          <td align='right'>
            <a name='P687'>687</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C687'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P688'>
          <td align='right'>
            <a name='P688'>688</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying keys' id='C688'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P689'>
          <td align='right'>
            <a name='P689'>689</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C689'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P690'>
          <td align='right'>
            <a name='P690'>690</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in elt' id='C690'>
              StoreVar elt
            </span>
          </td>
        </tr>
        <tr id='P691'>
          <td align='right'>
            <a name='P691'>691</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push elt' id='C691'>
              ReturnOp(elt)
            </span>
          </td>
        </tr>
        <tr id='P692'>
          <td align='right'>
            <a name='P692'>692</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C692'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P693'>
          <td align='right'>
            <a name='P693'>693</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(696)' id='C693'>
              Push PC(696)
            </span>
          </td>
        </tr>
        <tr id='P694'>
          <td align='right'>
            <a name='P694'>694</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$add' id='C694'>
              Builtin(bag$add)
            </span>
          </td>
        </tr>
        <tr id='P695'>
          <td align='right'>
            <a name='P695'>695</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 722' id='C695'>
              Jump 722
            </span>
          </td>
        </tr>
        <tr id='P696'>
          <td align='right'>
            <a name='P696'>696</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method add' id='C696'>
              Frame add(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P697'>
          <td align='right'>
            <a name='P697'>697</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C697'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P698'>
          <td align='right'>
            <a name='P698'>698</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C698'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P699'>
          <td align='right'>
            <a name='P699'>699</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C699'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P700'>
          <td align='right'>
            <a name='P700'>700</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C700'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P701'>
          <td align='right'>
            <a name='P701'>701</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C701'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P702'>
          <td align='right'>
            <a name='P702'>702</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C702'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P703'>
          <td align='right'>
            <a name='P703'>703</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying in' id='C703'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P704'>
          <td align='right'>
            <a name='P704'>704</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 715 if the value is False' id='C704'>
              JumpCond False 715
            </span>
          </td>
        </tr>
        <tr id='P705'>
          <td align='right'>
            <a name='P705'>705</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C705'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P706'>
          <td align='right'>
            <a name='P706'>706</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C706'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P707'>
          <td align='right'>
            <a name='P707'>707</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C707'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P708'>
          <td align='right'>
            <a name='P708'>708</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C708'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P709'>
          <td align='right'>
            <a name='P709'>709</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C709'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P710'>
          <td align='right'>
            <a name='P710'>710</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C710'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P711'>
          <td align='right'>
            <a name='P711'>711</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C711'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P712'>
          <td align='right'>
            <a name='P712'>712</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C712'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P713'>
          <td align='right'>
            <a name='P713'>713</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C713'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P714'>
          <td align='right'>
            <a name='P714'>714</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 721' id='C714'>
              Jump 721
            </span>
          </td>
        </tr>
        <tr id='P715'>
          <td align='right'>
            <a name='P715'>715</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C715'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P716'>
          <td align='right'>
            <a name='P716'>716</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C716'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P717'>
          <td align='right'>
            <a name='P717'>717</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C717'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P718'>
          <td align='right'>
            <a name='P718'>718</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C718'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P719'>
          <td align='right'>
            <a name='P719'>719</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C719'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P720'>
          <td align='right'>
            <a name='P720'>720</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C720'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P721'>
          <td align='right'>
            <a name='P721'>721</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C721'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P722'>
          <td align='right'>
            <a name='P722'>722</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(725)' id='C722'>
              Push PC(725)
            </span>
          </td>
        </tr>
        <tr id='P723'>
          <td align='right'>
            <a name='P723'>723</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$remove' id='C723'>
              Builtin(bag$remove)
            </span>
          </td>
        </tr>
        <tr id='P724'>
          <td align='right'>
            <a name='P724'>724</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C724'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P725'>
          <td align='right'>
            <a name='P725'>725</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method remove' id='C725'>
              Frame remove(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P726'>
          <td align='right'>
            <a name='P726'>726</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C726'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P727'>
          <td align='right'>
            <a name='P727'>727</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C727'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P728'>
          <td align='right'>
            <a name='P728'>728</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C728'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P729'>
          <td align='right'>
            <a name='P729'>729</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C729'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P730'>
          <td align='right'>
            <a name='P730'>730</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C730'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P731'>
          <td align='right'>
            <a name='P731'>731</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C731'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P732'>
          <td align='right'>
            <a name='P732'>732</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C732'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P733'>
          <td align='right'>
            <a name='P733'>733</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 765 if the value is False' id='C733'>
              JumpCond False 765
            </span>
          </td>
        </tr>
        <tr id='P734'>
          <td align='right'>
            <a name='P734'>734</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C734'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P735'>
          <td align='right'>
            <a name='P735'>735</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C735'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P736'>
          <td align='right'>
            <a name='P736'>736</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C736'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P737'>
          <td align='right'>
            <a name='P737'>737</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C737'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P738'>
          <td align='right'>
            <a name='P738'>738</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C738'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P739'>
          <td align='right'>
            <a name='P739'>739</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C739'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P740'>
          <td align='right'>
            <a name='P740'>740</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C740'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P741'>
          <td align='right'>
            <a name='P741'>741</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C741'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P742'>
          <td align='right'>
            <a name='P742'>742</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C742'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P743'>
          <td align='right'>
            <a name='P743'>743</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C743'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P744'>
          <td align='right'>
            <a name='P744'>744</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C744'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P745'>
          <td align='right'>
            <a name='P745'>745</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C745'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P746'>
          <td align='right'>
            <a name='P746'>746</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C746'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P747'>
          <td align='right'>
            <a name='P747'>747</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C747'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P748'>
          <td align='right'>
            <a name='P748'>748</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C748'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P749'>
          <td align='right'>
            <a name='P749'>749</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C749'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P750'>
          <td align='right'>
            <a name='P750'>750</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C750'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P751'>
          <td align='right'>
            <a name='P751'>751</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C751'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P752'>
          <td align='right'>
            <a name='P752'>752</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C752'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P753'>
          <td align='right'>
            <a name='P753'>753</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C753'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P754'>
          <td align='right'>
            <a name='P754'>754</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C754'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P755'>
          <td align='right'>
            <a name='P755'>755</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C755'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P756'>
          <td align='right'>
            <a name='P756'>756</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C756'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P757'>
          <td align='right'>
            <a name='P757'>757</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C757'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P758'>
          <td align='right'>
            <a name='P758'>758</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C758'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P759'>
          <td align='right'>
            <a name='P759'>759</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 765 if the value is False' id='C759'>
              JumpCond False 765
            </span>
          </td>
        </tr>
        <tr id='P760'>
          <td align='right'>
            <a name='P760'>760</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C760'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P761'>
          <td align='right'>
            <a name='P761'>761</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C761'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P762'>
          <td align='right'>
            <a name='P762'>762</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C762'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P763'>
          <td align='right'>
            <a name='P763'>763</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C763'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P764'>
          <td align='right'>
            <a name='P764'>764</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address of a method variable and delete that variable' id='C764'>
              DelVar [result]
            </span>
          </td>
        </tr>
        <tr id='P765'>
          <td align='right'>
            <a name='P765'>765</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C765'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P766'>
          <td align='right'>
            <a name='P766'>766</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C766'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P767'>
          <td align='right'>
            <a name='P767'>767</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C767'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P768'>
          <td align='right'>
            <a name='P768'>768</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method combinations' id='C768'>
              Frame combinations(bg, k)
            </span>
          </td>
        </tr>
        <tr id='P769'>
          <td align='right'>
            <a name='P769'>769</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C769'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P770'>
          <td align='right'>
            <a name='P770'>770</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C770'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P771'>
          <td align='right'>
            <a name='P771'>771</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C771'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P772'>
          <td align='right'>
            <a name='P772'>772</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C772'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P773'>
          <td align='right'>
            <a name='P773'>773</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 781 if the value is False' id='C773'>
              JumpCond False 781
            </span>
          </td>
        </tr>
        <tr id='P774'>
          <td align='right'>
            <a name='P774'>774</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C774'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P775'>
          <td align='right'>
            <a name='P775'>775</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C775'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P776'>
          <td align='right'>
            <a name='P776'>776</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C776'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P777'>
          <td align='right'>
            <a name='P777'>777</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C777'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P778'>
          <td align='right'>
            <a name='P778'>778</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C778'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P779'>
          <td align='right'>
            <a name='P779'>779</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C779'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P780'>
          <td align='right'>
            <a name='P780'>780</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 856' id='C780'>
              Jump 856
            </span>
          </td>
        </tr>
        <tr id='P781'>
          <td align='right'>
            <a name='P781'>781</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C781'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P782'>
          <td align='right'>
            <a name='P782'>782</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(627)' id='C782'>
              Apply PC(627)
            </span>
          </td>
        </tr>
        <tr id='P783'>
          <td align='right'>
            <a name='P783'>783</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in n' id='C783'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P784'>
          <td align='right'>
            <a name='P784'>784</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C784'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P785'>
          <td align='right'>
            <a name='P785'>785</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C785'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P786'>
          <td align='right'>
            <a name='P786'>786</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >' id='C786'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P787'>
          <td align='right'>
            <a name='P787'>787</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 794 if the value is False' id='C787'>
              JumpCond False 794
            </span>
          </td>
        </tr>
        <tr id='P788'>
          <td align='right'>
            <a name='P788'>788</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C788'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P789'>
          <td align='right'>
            <a name='P789'>789</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C789'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P790'>
          <td align='right'>
            <a name='P790'>790</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C790'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P791'>
          <td align='right'>
            <a name='P791'>791</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C791'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P792'>
          <td align='right'>
            <a name='P792'>792</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C792'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P793'>
          <td align='right'>
            <a name='P793'>793</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 856' id='C793'>
              Jump 856
            </span>
          </td>
        </tr>
        <tr id='P794'>
          <td align='right'>
            <a name='P794'>794</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C794'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P795'>
          <td align='right'>
            <a name='P795'>795</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C795'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P796'>
          <td align='right'>
            <a name='P796'>796</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C796'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P797'>
          <td align='right'>
            <a name='P797'>797</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C797'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P798'>
          <td align='right'>
            <a name='P798'>798</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 806 if the value is False' id='C798'>
              JumpCond False 806
            </span>
          </td>
        </tr>
        <tr id='P799'>
          <td align='right'>
            <a name='P799'>799</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C799'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P800'>
          <td align='right'>
            <a name='P800'>800</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C800'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P801'>
          <td align='right'>
            <a name='P801'>801</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C801'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P802'>
          <td align='right'>
            <a name='P802'>802</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C802'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P803'>
          <td align='right'>
            <a name='P803'>803</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C803'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P804'>
          <td align='right'>
            <a name='P804'>804</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C804'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P805'>
          <td align='right'>
            <a name='P805'>805</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 856' id='C805'>
              Jump 856
            </span>
          </td>
        </tr>
        <tr id='P806'>
          <td align='right'>
            <a name='P806'>806</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C806'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P807'>
          <td align='right'>
            <a name='P807'>807</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(649)' id='C807'>
              Apply PC(649)
            </span>
          </td>
        </tr>
        <tr id='P808'>
          <td align='right'>
            <a name='P808'>808</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in hd' id='C808'>
              StoreVar hd
            </span>
          </td>
        </tr>
        <tr id='P809'>
          <td align='right'>
            <a name='P809'>809</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C809'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P810'>
          <td align='right'>
            <a name='P810'>810</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C810'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P811'>
          <td align='right'>
            <a name='P811'>811</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C811'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P812'>
          <td align='right'>
            <a name='P812'>812</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C812'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P813'>
          <td align='right'>
            <a name='P813'>813</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of hd' id='C813'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P814'>
          <td align='right'>
            <a name='P814'>814</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C814'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P815'>
          <td align='right'>
            <a name='P815'>815</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(725)' id='C815'>
              Apply PC(725)
            </span>
          </td>
        </tr>
        <tr id='P816'>
          <td align='right'>
            <a name='P816'>816</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in tl' id='C816'>
              StoreVar tl
            </span>
          </td>
        </tr>
        <tr id='P817'>
          <td align='right'>
            <a name='P817'>817</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for set comprehension: push constant {}' id='C817'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P818'>
          <td align='right'>
            <a name='P818'>818</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for set comprehension: pop a value and store in $accu645' id='C818'>
              StoreVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P819'>
          <td align='right'>
            <a name='P819'>819</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C819'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P820'>
          <td align='right'>
            <a name='P820'>820</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of tl' id='C820'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P821'>
          <td align='right'>
            <a name='P821'>821</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C821'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P822'>
          <td align='right'>
            <a name='P822'>822</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C822'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P823'>
          <td align='right'>
            <a name='P823'>823</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C823'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P824'>
          <td align='right'>
            <a name='P824'>824</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C824'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P825'>
          <td align='right'>
            <a name='P825'>825</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C825'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P826'>
          <td align='right'>
            <a name='P826'>826</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(768)' id='C826'>
              Apply PC(768)
            </span>
          </td>
        </tr>
        <tr id='P827'>
          <td align='right'>
            <a name='P827'>827</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C827'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P828'>
          <td align='right'>
            <a name='P828'>828</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x; push False or True depending on success' id='C828'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P829'>
          <td align='right'>
            <a name='P829'>829</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 842 if the value is False' id='C829'>
              JumpCond False 842
            </span>
          </td>
        </tr>
        <tr id='P830'>
          <td align='right'>
            <a name='P830'>830</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu645' id='C830'>
              LoadVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P831'>
          <td align='right'>
            <a name='P831'>831</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu645' id='C831'>
              DelVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P832'>
          <td align='right'>
            <a name='P832'>832</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C832'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P833'>
          <td align='right'>
            <a name='P833'>833</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of x' id='C833'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P834'>
          <td align='right'>
            <a name='P834'>834</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C834'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P835'>
          <td align='right'>
            <a name='P835'>835</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C835'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P836'>
          <td align='right'>
            <a name='P836'>836</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of hd' id='C836'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P837'>
          <td align='right'>
            <a name='P837'>837</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C837'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P838'>
          <td align='right'>
            <a name='P838'>838</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(696)' id='C838'>
              Apply PC(696)
            </span>
          </td>
        </tr>
        <tr id='P839'>
          <td align='right'>
            <a name='P839'>839</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C839'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P840'>
          <td align='right'>
            <a name='P840'>840</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu645' id='C840'>
              StoreVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P841'>
          <td align='right'>
            <a name='P841'>841</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 828' id='C841'>
              Jump 828
            </span>
          </td>
        </tr>
        <tr id='P842'>
          <td align='right'>
            <a name='P842'>842</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable hd' id='C842'>
              DelVar hd
            </span>
          </td>
        </tr>
        <tr id='P843'>
          <td align='right'>
            <a name='P843'>843</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable x' id='C843'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P844'>
          <td align='right'>
            <a name='P844'>844</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu645' id='C844'>
              LoadVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P845'>
          <td align='right'>
            <a name='P845'>845</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu645' id='C845'>
              DelVar $accu645
            </span>
          </td>
        </tr>
        <tr id='P846'>
          <td align='right'>
            <a name='P846'>846</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C846'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P847'>
          <td align='right'>
            <a name='P847'>847</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of tl' id='C847'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P848'>
          <td align='right'>
            <a name='P848'>848</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable tl' id='C848'>
              DelVar tl
            </span>
          </td>
        </tr>
        <tr id='P849'>
          <td align='right'>
            <a name='P849'>849</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C849'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P850'>
          <td align='right'>
            <a name='P850'>850</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C850'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P851'>
          <td align='right'>
            <a name='P851'>851</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C851'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P852'>
          <td align='right'>
            <a name='P852'>852</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C852'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P853'>
          <td align='right'>
            <a name='P853'>853</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(768)' id='C853'>
              Apply PC(768)
            </span>
          </td>
        </tr>
        <tr id='P854'>
          <td align='right'>
            <a name='P854'>854</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying |' id='C854'>
              2-ary |
            </span>
          </td>
        </tr>
        <tr id='P855'>
          <td align='right'>
            <a name='P855'>855</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C855'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P856'>
          <td align='right'>
            <a name='P856'>856</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C856'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P857'>
          <td align='right'>
            <a name='P857'>857</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C857'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P858'>
          <td align='right'>
            <a name='P858'>858</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_load' id='C858'>
              Frame atomic_load(p)
            </span>
          </td>
        </tr>
        <tr id='P859'>
          <td align='right'>
            <a name='P859'>859</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C859'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P860'>
          <td align='right'>
            <a name='P860'>860</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C860'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P861'>
          <td align='right'>
            <a name='P861'>861</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C861'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P862'>
          <td align='right'>
            <a name='P862'>862</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C862'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P863'>
          <td align='right'>
            <a name='P863'>863</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in current' id='C863'>
              StoreVar current
            </span>
          </td>
        </tr>
        <tr id='P864'>
          <td align='right'>
            <a name='P864'>864</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C864'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P865'>
          <td align='right'>
            <a name='P865'>865</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push current' id='C865'>
              ReturnOp(current)
            </span>
          </td>
        </tr>
        <tr id='P866'>
          <td align='right'>
            <a name='P866'>866</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable current' id='C866'>
              DelVar current
            </span>
          </td>
        </tr>
        <tr id='P867'>
          <td align='right'>
            <a name='P867'>867</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C867'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P868'>
          <td align='right'>
            <a name='P868'>868</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_store' id='C868'>
              Frame atomic_store(p, v)
            </span>
          </td>
        </tr>
        <tr id='P869'>
          <td align='right'>
            <a name='P869'>869</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C869'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P870'>
          <td align='right'>
            <a name='P870'>870</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C870'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P871'>
          <td align='right'>
            <a name='P871'>871</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C871'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P872'>
          <td align='right'>
            <a name='P872'>872</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C872'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P873'>
          <td align='right'>
            <a name='P873'>873</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C873'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P874'>
          <td align='right'>
            <a name='P874'>874</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C874'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P875'>
          <td align='right'>
            <a name='P875'>875</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C875'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P876'>
          <td align='right'>
            <a name='P876'>876</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C876'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P877'>
          <td align='right'>
            <a name='P877'>877</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C877'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P878'>
          <td align='right'>
            <a name='P878'>878</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method tas' id='C878'>
              Frame tas(lk)
            </span>
          </td>
        </tr>
        <tr id='P879'>
          <td align='right'>
            <a name='P879'>879</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C879'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P880'>
          <td align='right'>
            <a name='P880'>880</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C880'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P881'>
          <td align='right'>
            <a name='P881'>881</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C881'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P882'>
          <td align='right'>
            <a name='P882'>882</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in oldvalue' id='C882'>
              StoreVar oldvalue
            </span>
          </td>
        </tr>
        <tr id='P883'>
          <td align='right'>
            <a name='P883'>883</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lk' id='C883'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P884'>
          <td align='right'>
            <a name='P884'>884</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable lk' id='C884'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P885'>
          <td align='right'>
            <a name='P885'>885</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C885'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P886'>
          <td align='right'>
            <a name='P886'>886</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C886'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P887'>
          <td align='right'>
            <a name='P887'>887</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C887'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P888'>
          <td align='right'>
            <a name='P888'>888</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push oldvalue' id='C888'>
              ReturnOp(oldvalue)
            </span>
          </td>
        </tr>
        <tr id='P889'>
          <td align='right'>
            <a name='P889'>889</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable oldvalue' id='C889'>
              DelVar oldvalue
            </span>
          </td>
        </tr>
        <tr id='P890'>
          <td align='right'>
            <a name='P890'>890</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C890'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P891'>
          <td align='right'>
            <a name='P891'>891</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method cas' id='C891'>
              Frame cas(p, old, new)
            </span>
          </td>
        </tr>
        <tr id='P892'>
          <td align='right'>
            <a name='P892'>892</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C892'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P893'>
          <td align='right'>
            <a name='P893'>893</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p' id='C893'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P894'>
          <td align='right'>
            <a name='P894'>894</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C894'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P895'>
          <td align='right'>
            <a name='P895'>895</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of old' id='C895'>
              LoadVar old
            </span>
          </td>
        </tr>
        <tr id='P896'>
          <td align='right'>
            <a name='P896'>896</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable old' id='C896'>
              DelVar old
            </span>
          </td>
        </tr>
        <tr id='P897'>
          <td align='right'>
            <a name='P897'>897</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C897'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P898'>
          <td align='right'>
            <a name='P898'>898</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in success' id='C898'>
              StoreVar success
            </span>
          </td>
        </tr>
        <tr id='P899'>
          <td align='right'>
            <a name='P899'>899</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of success' id='C899'>
              LoadVar success
            </span>
          </td>
        </tr>
        <tr id='P900'>
          <td align='right'>
            <a name='P900'>900</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 906 if the value is False' id='C900'>
              JumpCond False 906
            </span>
          </td>
        </tr>
        <tr id='P901'>
          <td align='right'>
            <a name='P901'>901</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p' id='C901'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P902'>
          <td align='right'>
            <a name='P902'>902</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C902'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P903'>
          <td align='right'>
            <a name='P903'>903</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of new' id='C903'>
              LoadVar new
            </span>
          </td>
        </tr>
        <tr id='P904'>
          <td align='right'>
            <a name='P904'>904</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable new' id='C904'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P905'>
          <td align='right'>
            <a name='P905'>905</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C905'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P906'>
          <td align='right'>
            <a name='P906'>906</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable new' id='C906'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P907'>
          <td align='right'>
            <a name='P907'>907</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C907'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P908'>
          <td align='right'>
            <a name='P908'>908</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C908'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P909'>
          <td align='right'>
            <a name='P909'>909</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push success' id='C909'>
              ReturnOp(success)
            </span>
          </td>
        </tr>
        <tr id='P910'>
          <td align='right'>
            <a name='P910'>910</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable success' id='C910'>
              DelVar success
            </span>
          </td>
        </tr>
        <tr id='P911'>
          <td align='right'>
            <a name='P911'>911</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C911'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P912'>
          <td align='right'>
            <a name='P912'>912</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method BinSema' id='C912'>
              Frame BinSema(initial)
            </span>
          </td>
        </tr>
        <tr id='P913'>
          <td align='right'>
            <a name='P913'>913</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C913'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P914'>
          <td align='right'>
            <a name='P914'>914</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C914'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P915'>
          <td align='right'>
            <a name='P915'>915</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of initial' id='C915'>
              LoadVar initial
            </span>
          </td>
        </tr>
        <tr id='P916'>
          <td align='right'>
            <a name='P916'>916</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C916'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P917'>
          <td align='right'>
            <a name='P917'>917</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C917'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P918'>
          <td align='right'>
            <a name='P918'>918</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C918'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P919'>
          <td align='right'>
            <a name='P919'>919</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C919'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P920'>
          <td align='right'>
            <a name='P920'>920</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C920'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P921'>
          <td align='right'>
            <a name='P921'>921</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying in' id='C921'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P922'>
          <td align='right'>
            <a name='P922'>922</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C922'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P923'>
          <td align='right'>
            <a name='P923'>923</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C923'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P924'>
          <td align='right'>
            <a name='P924'>924</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C924'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P925'>
          <td align='right'>
            <a name='P925'>925</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of initial' id='C925'>
              LoadVar initial
            </span>
          </td>
        </tr>
        <tr id='P926'>
          <td align='right'>
            <a name='P926'>926</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable initial' id='C926'>
              DelVar initial
            </span>
          </td>
        </tr>
        <tr id='P927'>
          <td align='right'>
            <a name='P927'>927</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in sema' id='C927'>
              StoreVar sema
            </span>
          </td>
        </tr>
        <tr id='P928'>
          <td align='right'>
            <a name='P928'>928</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push sema' id='C928'>
              ReturnOp(sema)
            </span>
          </td>
        </tr>
        <tr id='P929'>
          <td align='right'>
            <a name='P929'>929</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sema' id='C929'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P930'>
          <td align='right'>
            <a name='P930'>930</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C930'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P931'>
          <td align='right'>
            <a name='P931'>931</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Lock' id='C931'>
              Frame Lock()
            </span>
          </td>
        </tr>
        <tr id='P932'>
          <td align='right'>
            <a name='P932'>932</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C932'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P933'>
          <td align='right'>
            <a name='P933'>933</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C933'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P934'>
          <td align='right'>
            <a name='P934'>934</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(912)' id='C934'>
              Apply PC(912)
            </span>
          </td>
        </tr>
        <tr id='P935'>
          <td align='right'>
            <a name='P935'>935</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C935'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P936'>
          <td align='right'>
            <a name='P936'>936</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C936'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P937'>
          <td align='right'>
            <a name='P937'>937</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C937'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P938'>
          <td align='right'>
            <a name='P938'>938</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method acquired' id='C938'>
              Frame acquired(binsema)
            </span>
          </td>
        </tr>
        <tr id='P939'>
          <td align='right'>
            <a name='P939'>939</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C939'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P940'>
          <td align='right'>
            <a name='P940'>940</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C940'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P941'>
          <td align='right'>
            <a name='P941'>941</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C941'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P942'>
          <td align='right'>
            <a name='P942'>942</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C942'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P943'>
          <td align='right'>
            <a name='P943'>943</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C943'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P944'>
          <td align='right'>
            <a name='P944'>944</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C944'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P945'>
          <td align='right'>
            <a name='P945'>945</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C945'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P946'>
          <td align='right'>
            <a name='P946'>946</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method held' id='C946'>
              Frame held(binsema)
            </span>
          </td>
        </tr>
        <tr id='P947'>
          <td align='right'>
            <a name='P947'>947</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C947'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P948'>
          <td align='right'>
            <a name='P948'>948</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C948'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P949'>
          <td align='right'>
            <a name='P949'>949</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C949'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P950'>
          <td align='right'>
            <a name='P950'>950</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C950'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P951'>
          <td align='right'>
            <a name='P951'>951</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C951'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P952'>
          <td align='right'>
            <a name='P952'>952</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C952'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P953'>
          <td align='right'>
            <a name='P953'>953</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C953'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P954'>
          <td align='right'>
            <a name='P954'>954</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method acquire' id='C954'>
              Frame acquire(binsema)
            </span>
          </td>
        </tr>
        <tr id='P955'>
          <td align='right'>
            <a name='P955'>955</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C955'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P956'>
          <td align='right'>
            <a name='P956'>956</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C956'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P957'>
          <td align='right'>
            <a name='P957'>957</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C957'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P958'>
          <td align='right'>
            <a name='P958'>958</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C958'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P959'>
          <td align='right'>
            <a name='P959'>959</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying not' id='C959'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P960'>
          <td align='right'>
            <a name='P960'>960</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 962 if the value is False' id='C960'>
              JumpCond False 962
            </span>
          </td>
        </tr>
        <tr id='P961'>
          <td align='right'>
            <a name='P961'>961</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 965' id='C961'>
              Jump 965
            </span>
          </td>
        </tr>
        <tr id='P962'>
          <td align='right'>
            <a name='P962'>962</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C962'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P963'>
          <td align='right'>
            <a name='P963'>963</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C963'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P964'>
          <td align='right'>
            <a name='P964'>964</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 955' id='C964'>
              Jump 955
            </span>
          </td>
        </tr>
        <tr id='P965'>
          <td align='right'>
            <a name='P965'>965</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C965'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P966'>
          <td align='right'>
            <a name='P966'>966</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C966'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P967'>
          <td align='right'>
            <a name='P967'>967</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C967'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P968'>
          <td align='right'>
            <a name='P968'>968</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C968'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P969'>
          <td align='right'>
            <a name='P969'>969</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C969'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P970'>
          <td align='right'>
            <a name='P970'>970</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C970'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P971'>
          <td align='right'>
            <a name='P971'>971</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C971'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P972'>
          <td align='right'>
            <a name='P972'>972</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C972'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P973'>
          <td align='right'>
            <a name='P973'>973</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method release' id='C973'>
              Frame release(binsema)
            </span>
          </td>
        </tr>
        <tr id='P974'>
          <td align='right'>
            <a name='P974'>974</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C974'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P975'>
          <td align='right'>
            <a name='P975'>975</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C975'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P976'>
          <td align='right'>
            <a name='P976'>976</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C976'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P977'>
          <td align='right'>
            <a name='P977'>977</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C977'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P978'>
          <td align='right'>
            <a name='P978'>978</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C978'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P979'>
          <td align='right'>
            <a name='P979'>979</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a condition and raise exception if condition is false' id='C979'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P980'>
          <td align='right'>
            <a name='P980'>980</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C980'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P981'>
          <td align='right'>
            <a name='P981'>981</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C981'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P982'>
          <td align='right'>
            <a name='P982'>982</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C982'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P983'>
          <td align='right'>
            <a name='P983'>983</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C983'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P984'>
          <td align='right'>
            <a name='P984'>984</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C984'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P985'>
          <td align='right'>
            <a name='P985'>985</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C985'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P986'>
          <td align='right'>
            <a name='P986'>986</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C986'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P987'>
          <td align='right'>
            <a name='P987'>987</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C987'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P988'>
          <td align='right'>
            <a name='P988'>988</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C988'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P989'>
          <td align='right'>
            <a name='P989'>989</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Condition' id='C989'>
              Frame Condition()
            </span>
          </td>
        </tr>
        <tr id='P990'>
          <td align='right'>
            <a name='P990'>990</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C990'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P991'>
          <td align='right'>
            <a name='P991'>991</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(541)' id='C991'>
              Push PC(541)
            </span>
          </td>
        </tr>
        <tr id='P992'>
          <td align='right'>
            <a name='P992'>992</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C992'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P993'>
          <td align='right'>
            <a name='P993'>993</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C993'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P994'>
          <td align='right'>
            <a name='P994'>994</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C994'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P995'>
          <td align='right'>
            <a name='P995'>995</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C995'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P996'>
          <td align='right'>
            <a name='P996'>996</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C996'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P997'>
          <td align='right'>
            <a name='P997'>997</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C997'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P998'>
          <td align='right'>
            <a name='P998'>998</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method wait' id='C998'>
              Frame wait(c, lk)
            </span>
          </td>
        </tr>
        <tr id='P999'>
          <td align='right'>
            <a name='P999'>999</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C999'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1000'>
          <td align='right'>
            <a name='P1000'>1000</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in cnt' id='C1000'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1001'>
          <td align='right'>
            <a name='P1001'>1001</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C1001'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1002'>
          <td align='right'>
            <a name='P1002'>1002</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C1002'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1003'>
          <td align='right'>
            <a name='P1003'>1003</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and save context' id='C1003'>
              Save
            </span>
          </td>
        </tr>
        <tr id='P1004'>
          <td align='right'>
            <a name='P1004'>1004</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='a no-op, must follow a Stop or Save operation' id='C1004'>
              Continue
            </span>
          </td>
        </tr>
        <tr id='P1005'>
          <td align='right'>
            <a name='P1005'>1005</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in ((), ctx)' id='C1005'>
              StoreVar ((), ctx)
            </span>
          </td>
        </tr>
        <tr id='P1006'>
          <td align='right'>
            <a name='P1006'>1006</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1006'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1007'>
          <td align='right'>
            <a name='P1007'>1007</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(605)' id='C1007'>
              Push PC(605)
            </span>
          </td>
        </tr>
        <tr id='P1008'>
          <td align='right'>
            <a name='P1008'>1008</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1008'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1009'>
          <td align='right'>
            <a name='P1009'>1009</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C1009'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1010'>
          <td align='right'>
            <a name='P1010'>1010</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1010'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1011'>
          <td align='right'>
            <a name='P1011'>1011</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1011'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1012'>
          <td align='right'>
            <a name='P1012'>1012</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of ctx' id='C1012'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P1013'>
          <td align='right'>
            <a name='P1013'>1013</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1013'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1014'>
          <td align='right'>
            <a name='P1014'>1014</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1014'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1015'>
          <td align='right'>
            <a name='P1015'>1015</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1015'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1016'>
          <td align='right'>
            <a name='P1016'>1016</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in cnt' id='C1016'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1017'>
          <td align='right'>
            <a name='P1017'>1017</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C1017'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1018'>
          <td align='right'>
            <a name='P1018'>1018</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(696)' id='C1018'>
              Push PC(696)
            </span>
          </td>
        </tr>
        <tr id='P1019'>
          <td align='right'>
            <a name='P1019'>1019</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1019'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1020'>
          <td align='right'>
            <a name='P1020'>1020</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C1020'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1021'>
          <td align='right'>
            <a name='P1021'>1021</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1021'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1022'>
          <td align='right'>
            <a name='P1022'>1022</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1022'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1023'>
          <td align='right'>
            <a name='P1023'>1023</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of ctx' id='C1023'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P1024'>
          <td align='right'>
            <a name='P1024'>1024</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1024'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1025'>
          <td align='right'>
            <a name='P1025'>1025</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1025'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1026'>
          <td align='right'>
            <a name='P1026'>1026</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1026'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1027'>
          <td align='right'>
            <a name='P1027'>1027</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1027'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1028'>
          <td align='right'>
            <a name='P1028'>1028</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C1028'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P1029'>
          <td align='right'>
            <a name='P1029'>1029</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C1029'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1030'>
          <td align='right'>
            <a name='P1030'>1030</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1030'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1031'>
          <td align='right'>
            <a name='P1031'>1031</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1031'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1032'>
          <td align='right'>
            <a name='P1032'>1032</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1032'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1033'>
          <td align='right'>
            <a name='P1033'>1033</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1033'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1034'>
          <td align='right'>
            <a name='P1034'>1034</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C1034'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P1035'>
          <td align='right'>
            <a name='P1035'>1035</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1035'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1036'>
          <td align='right'>
            <a name='P1036'>1036</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C1036'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P1037'>
          <td align='right'>
            <a name='P1037'>1037</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1050 if the value is False' id='C1037'>
              JumpCond False 1050
            </span>
          </td>
        </tr>
        <tr id='P1038'>
          <td align='right'>
            <a name='P1038'>1038</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(605)' id='C1038'>
              Push PC(605)
            </span>
          </td>
        </tr>
        <tr id='P1039'>
          <td align='right'>
            <a name='P1039'>1039</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1039'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1040'>
          <td align='right'>
            <a name='P1040'>1040</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C1040'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1041'>
          <td align='right'>
            <a name='P1041'>1041</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1041'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1042'>
          <td align='right'>
            <a name='P1042'>1042</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1042'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1043'>
          <td align='right'>
            <a name='P1043'>1043</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of ctx' id='C1043'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P1044'>
          <td align='right'>
            <a name='P1044'>1044</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1044'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1045'>
          <td align='right'>
            <a name='P1045'>1045</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1045'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1046'>
          <td align='right'>
            <a name='P1046'>1046</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1046'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1047'>
          <td align='right'>
            <a name='P1047'>1047</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of cnt' id='C1047'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1048'>
          <td align='right'>
            <a name='P1048'>1048</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <=' id='C1048'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P1049'>
          <td align='right'>
            <a name='P1049'>1049</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1051' id='C1049'>
              Jump 1051
            </span>
          </td>
        </tr>
        <tr id='P1050'>
          <td align='right'>
            <a name='P1050'>1050</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C1050'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1051'>
          <td align='right'>
            <a name='P1051'>1051</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1056 if the value is False' id='C1051'>
              JumpCond False 1056
            </span>
          </td>
        </tr>
        <tr id='P1052'>
          <td align='right'>
            <a name='P1052'>1052</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C1052'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P1053'>
          <td align='right'>
            <a name='P1053'>1053</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C1053'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1054'>
          <td align='right'>
            <a name='P1054'>1054</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable ctx' id='C1054'>
              DelVar ctx
            </span>
          </td>
        </tr>
        <tr id='P1055'>
          <td align='right'>
            <a name='P1055'>1055</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1059' id='C1055'>
              Jump 1059
            </span>
          </td>
        </tr>
        <tr id='P1056'>
          <td align='right'>
            <a name='P1056'>1056</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1056'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1057'>
          <td align='right'>
            <a name='P1057'>1057</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1057'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1058'>
          <td align='right'>
            <a name='P1058'>1058</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1032' id='C1058'>
              Jump 1032
            </span>
          </td>
        </tr>
        <tr id='P1059'>
          <td align='right'>
            <a name='P1059'>1059</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C1059'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1060'>
          <td align='right'>
            <a name='P1060'>1060</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C1060'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P1061'>
          <td align='right'>
            <a name='P1061'>1061</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lk' id='C1061'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P1062'>
          <td align='right'>
            <a name='P1062'>1062</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C1062'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P1063'>
          <td align='right'>
            <a name='P1063'>1063</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1063'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1064'>
          <td align='right'>
            <a name='P1064'>1064</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1064'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1065'>
          <td align='right'>
            <a name='P1065'>1065</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1065'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1066'>
          <td align='right'>
            <a name='P1066'>1066</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1066'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1067'>
          <td align='right'>
            <a name='P1067'>1067</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method notify' id='C1067'>
              Frame notify(c)
            </span>
          </td>
        </tr>
        <tr id='P1068'>
          <td align='right'>
            <a name='P1068'>1068</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1068'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1069'>
          <td align='right'>
            <a name='P1069'>1069</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C1069'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1070'>
          <td align='right'>
            <a name='P1070'>1070</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1070'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1071'>
          <td align='right'>
            <a name='P1071'>1071</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(541)' id='C1071'>
              Push PC(541)
            </span>
          </td>
        </tr>
        <tr id='P1072'>
          <td align='right'>
            <a name='P1072'>1072</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C1072'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1073'>
          <td align='right'>
            <a name='P1073'>1073</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1073'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1074'>
          <td align='right'>
            <a name='P1074'>1074</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1074'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1075'>
          <td align='right'>
            <a name='P1075'>1075</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C1075'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P1076'>
          <td align='right'>
            <a name='P1076'>1076</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1093 if the value is False' id='C1076'>
              JumpCond False 1093
            </span>
          </td>
        </tr>
        <tr id='P1077'>
          <td align='right'>
            <a name='P1077'>1077</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C1077'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1078'>
          <td align='right'>
            <a name='P1078'>1078</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(725)' id='C1078'>
              Push PC(725)
            </span>
          </td>
        </tr>
        <tr id='P1079'>
          <td align='right'>
            <a name='P1079'>1079</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1079'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1080'>
          <td align='right'>
            <a name='P1080'>1080</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C1080'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1081'>
          <td align='right'>
            <a name='P1081'>1081</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1081'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1082'>
          <td align='right'>
            <a name='P1082'>1082</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1082'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1083'>
          <td align='right'>
            <a name='P1083'>1083</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(685)' id='C1083'>
              Push PC(685)
            </span>
          </td>
        </tr>
        <tr id='P1084'>
          <td align='right'>
            <a name='P1084'>1084</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C1084'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1085'>
          <td align='right'>
            <a name='P1085'>1085</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C1085'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P1086'>
          <td align='right'>
            <a name='P1086'>1086</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1086'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1087'>
          <td align='right'>
            <a name='P1087'>1087</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1087'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1088'>
          <td align='right'>
            <a name='P1088'>1088</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1088'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1089'>
          <td align='right'>
            <a name='P1089'>1089</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1089'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1090'>
          <td align='right'>
            <a name='P1090'>1090</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1090'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1091'>
          <td align='right'>
            <a name='P1091'>1091</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1091'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1092'>
          <td align='right'>
            <a name='P1092'>1092</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1092'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1093'>
          <td align='right'>
            <a name='P1093'>1093</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C1093'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P1094'>
          <td align='right'>
            <a name='P1094'>1094</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1094'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1095'>
          <td align='right'>
            <a name='P1095'>1095</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1095'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1096'>
          <td align='right'>
            <a name='P1096'>1096</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1096'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1097'>
          <td align='right'>
            <a name='P1097'>1097</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method notifyAll' id='C1097'>
              Frame notifyAll(c)
            </span>
          </td>
        </tr>
        <tr id='P1098'>
          <td align='right'>
            <a name='P1098'>1098</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1098'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1099'>
          <td align='right'>
            <a name='P1099'>1099</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C1099'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P1100'>
          <td align='right'>
            <a name='P1100'>1100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C1100'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P1101'>
          <td align='right'>
            <a name='P1101'>1101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(541)' id='C1101'>
              Push PC(541)
            </span>
          </td>
        </tr>
        <tr id='P1102'>
          <td align='right'>
            <a name='P1102'>1102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C1102'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1103'>
          <td align='right'>
            <a name='P1103'>1103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1103'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1104'>
          <td align='right'>
            <a name='P1104'>1104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1104'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1105'>
          <td align='right'>
            <a name='P1105'>1105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1105'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1106'>
          <td align='right'>
            <a name='P1106'>1106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1106'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1107'>
          <td align='right'>
            <a name='P1107'>1107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1107'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1108'>
          <td align='right'>
            <a name='P1108'>1108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1108'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1109'>
          <td align='right'>
            <a name='P1109'>1109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Semaphore' id='C1109'>
              Frame Semaphore(cnt)
            </span>
          </td>
        </tr>
        <tr id='P1110'>
          <td align='right'>
            <a name='P1110'>1110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1110'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1111'>
          <td align='right'>
            <a name='P1111'>1111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of cnt' id='C1111'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1112'>
          <td align='right'>
            <a name='P1112'>1112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable cnt' id='C1112'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P1113'>
          <td align='right'>
            <a name='P1113'>1113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C1113'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1114'>
          <td align='right'>
            <a name='P1114'>1114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1114'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P1115'>
          <td align='right'>
            <a name='P1115'>1115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C1115'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1116'>
          <td align='right'>
            <a name='P1116'>1116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method P' id='C1116'>
              Frame P(sema)
            </span>
          </td>
        </tr>
        <tr id='P1117'>
          <td align='right'>
            <a name='P1117'>1117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1117'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1118'>
          <td align='right'>
            <a name='P1118'>1118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1118'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1119'>
          <td align='right'>
            <a name='P1119'>1119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of sema' id='C1119'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P1120'>
          <td align='right'>
            <a name='P1120'>1120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1120'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1121'>
          <td align='right'>
            <a name='P1121'>1121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1121'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1122'>
          <td align='right'>
            <a name='P1122'>1122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >' id='C1122'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P1123'>
          <td align='right'>
            <a name='P1123'>1123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1125 if the value is False' id='C1123'>
              JumpCond False 1125
            </span>
          </td>
        </tr>
        <tr id='P1124'>
          <td align='right'>
            <a name='P1124'>1124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1128' id='C1124'>
              Jump 1128
            </span>
          </td>
        </tr>
        <tr id='P1125'>
          <td align='right'>
            <a name='P1125'>1125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C1125'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1126'>
          <td align='right'>
            <a name='P1126'>1126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1126'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1127'>
          <td align='right'>
            <a name='P1127'>1127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1117' id='C1127'>
              Jump 1117
            </span>
          </td>
        </tr>
        <tr id='P1128'>
          <td align='right'>
            <a name='P1128'>1128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1128'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1129'>
          <td align='right'>
            <a name='P1129'>1129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of sema' id='C1129'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P1130'>
          <td align='right'>
            <a name='P1130'>1130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable sema' id='C1130'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P1131'>
          <td align='right'>
            <a name='P1131'>1131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1131'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1132'>
          <td align='right'>
            <a name='P1132'>1132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1132'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1133'>
          <td align='right'>
            <a name='P1133'>1133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1133'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1134'>
          <td align='right'>
            <a name='P1134'>1134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C1134'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1135'>
          <td align='right'>
            <a name='P1135'>1135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1135'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1136'>
          <td align='right'>
            <a name='P1136'>1136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1136'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1137'>
          <td align='right'>
            <a name='P1137'>1137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1137'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1138'>
          <td align='right'>
            <a name='P1138'>1138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1138'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1139'>
          <td align='right'>
            <a name='P1139'>1139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method V' id='C1139'>
              Frame V(sema)
            </span>
          </td>
        </tr>
        <tr id='P1140'>
          <td align='right'>
            <a name='P1140'>1140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1140'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1141'>
          <td align='right'>
            <a name='P1141'>1141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of sema' id='C1141'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P1142'>
          <td align='right'>
            <a name='P1142'>1142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable sema' id='C1142'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P1143'>
          <td align='right'>
            <a name='P1143'>1143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1143'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1144'>
          <td align='right'>
            <a name='P1144'>1144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1144'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1145'>
          <td align='right'>
            <a name='P1145'>1145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1145'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1146'>
          <td align='right'>
            <a name='P1146'>1146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C1146'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1147'>
          <td align='right'>
            <a name='P1147'>1147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1147'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1148'>
          <td align='right'>
            <a name='P1148'>1148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1148'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1149'>
          <td align='right'>
            <a name='P1149'>1149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1149'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1150'>
          <td align='right'>
            <a name='P1150'>1150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1150'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1151'>
          <td align='right'>
            <a name='P1151'>1151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Queue' id='C1151'>
              Frame Queue()
            </span>
          </td>
        </tr>
        <tr id='P1152'>
          <td align='right'>
            <a name='P1152'>1152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1152'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1153'>
          <td align='right'>
            <a name='P1153'>1153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1153'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1154'>
          <td align='right'>
            <a name='P1154'>1154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C1154'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1155'>
          <td align='right'>
            <a name='P1155'>1155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1155'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P1156'>
          <td align='right'>
            <a name='P1156'>1156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1205' id='C1156'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1157'>
          <td align='right'>
            <a name='P1157'>1157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method get' id='C1157'>
              Frame get(q)
            </span>
          </td>
        </tr>
        <tr id='P1158'>
          <td align='right'>
            <a name='P1158'>1158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1158'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1159'>
          <td align='right'>
            <a name='P1159'>1159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C1159'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1160'>
          <td align='right'>
            <a name='P1160'>1160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1160'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1161'>
          <td align='right'>
            <a name='P1161'>1161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C1161'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1162'>
          <td align='right'>
            <a name='P1162'>1162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1162'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1163'>
          <td align='right'>
            <a name='P1163'>1163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1163'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1164'>
          <td align='right'>
            <a name='P1164'>1164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C1164'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P1165'>
          <td align='right'>
            <a name='P1165'>1165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1167 if the value is False' id='C1165'>
              JumpCond False 1167
            </span>
          </td>
        </tr>
        <tr id='P1166'>
          <td align='right'>
            <a name='P1166'>1166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1170' id='C1166'>
              Jump 1170
            </span>
          </td>
        </tr>
        <tr id='P1167'>
          <td align='right'>
            <a name='P1167'>1167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C1167'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1168'>
          <td align='right'>
            <a name='P1168'>1168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1168'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1169'>
          <td align='right'>
            <a name='P1169'>1169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1158' id='C1169'>
              Jump 1158
            </span>
          </td>
        </tr>
        <tr id='P1170'>
          <td align='right'>
            <a name='P1170'>1170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1170'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1171'>
          <td align='right'>
            <a name='P1171'>1171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(45)' id='C1171'>
              Push PC(45)
            </span>
          </td>
        </tr>
        <tr id='P1172'>
          <td align='right'>
            <a name='P1172'>1172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C1172'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1173'>
          <td align='right'>
            <a name='P1173'>1173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1173'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1174'>
          <td align='right'>
            <a name='P1174'>1174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1174'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1175'>
          <td align='right'>
            <a name='P1175'>1175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1175'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1176'>
          <td align='right'>
            <a name='P1176'>1176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C1176'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1177'>
          <td align='right'>
            <a name='P1177'>1177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C1177'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1178'>
          <td align='right'>
            <a name='P1178'>1178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(57)' id='C1178'>
              Push PC(57)
            </span>
          </td>
        </tr>
        <tr id='P1179'>
          <td align='right'>
            <a name='P1179'>1179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C1179'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1180'>
          <td align='right'>
            <a name='P1180'>1180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable q' id='C1180'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P1181'>
          <td align='right'>
            <a name='P1181'>1181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1181'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1182'>
          <td align='right'>
            <a name='P1182'>1182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1182'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1183'>
          <td align='right'>
            <a name='P1183'>1183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1183'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1184'>
          <td align='right'>
            <a name='P1184'>1184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1184'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1185'>
          <td align='right'>
            <a name='P1185'>1185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1185'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1186'>
          <td align='right'>
            <a name='P1186'>1186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1186'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P1187'>
          <td align='right'>
            <a name='P1187'>1187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1205' id='C1187'>
              Jump 1205
            </span>
          </td>
        </tr>
        <tr id='P1188'>
          <td align='right'>
            <a name='P1188'>1188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method put' id='C1188'>
              Frame put(q, item)
            </span>
          </td>
        </tr>
        <tr id='P1189'>
          <td align='right'>
            <a name='P1189'>1189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1189'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1190'>
          <td align='right'>
            <a name='P1190'>1190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C1190'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1191'>
          <td align='right'>
            <a name='P1191'>1191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(33)' id='C1191'>
              Push PC(33)
            </span>
          </td>
        </tr>
        <tr id='P1192'>
          <td align='right'>
            <a name='P1192'>1192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1192'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1193'>
          <td align='right'>
            <a name='P1193'>1193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C1193'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P1194'>
          <td align='right'>
            <a name='P1194'>1194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable q' id='C1194'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P1195'>
          <td align='right'>
            <a name='P1195'>1195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1195'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1196'>
          <td align='right'>
            <a name='P1196'>1196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1196'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1197'>
          <td align='right'>
            <a name='P1197'>1197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of item' id='C1197'>
              LoadVar item
            </span>
          </td>
        </tr>
        <tr id='P1198'>
          <td align='right'>
            <a name='P1198'>1198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable item' id='C1198'>
              DelVar item
            </span>
          </td>
        </tr>
        <tr id='P1199'>
          <td align='right'>
            <a name='P1199'>1199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1199'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1200'>
          <td align='right'>
            <a name='P1200'>1200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1200'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1201'>
          <td align='right'>
            <a name='P1201'>1201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1201'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1202'>
          <td align='right'>
            <a name='P1202'>1202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1202'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1203'>
          <td align='right'>
            <a name='P1203'>1203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1203'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1204'>
          <td align='right'>
            <a name='P1204'>1204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1204'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1205'>
          <td align='right'>
            <a name='P1205'>1205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1205'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1206'>
          <td align='right'>
            <a name='P1206'>1206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable pool' id='C1206'>
              Store alloc$pool
            </span>
          </td>
        </tr>
        <tr id='P1207'>
          <td align='right'>
            <a name='P1207'>1207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1207'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1208'>
          <td align='right'>
            <a name='P1208'>1208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable next' id='C1208'>
              Store alloc$next
            </span>
          </td>
        </tr>
        <tr id='P1209'>
          <td align='right'>
            <a name='P1209'>1209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1209'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1210'>
          <td align='right'>
            <a name='P1210'>1210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method malloc' id='C1210'>
              Frame malloc(v)
            </span>
          </td>
        </tr>
        <tr id='P1211'>
          <td align='right'>
            <a name='P1211'>1211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1211'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1212'>
          <td align='right'>
            <a name='P1212'>1212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?alloc$pool' id='C1212'>
              Push ?alloc$pool
            </span>
          </td>
        </tr>
        <tr id='P1213'>
          <td align='right'>
            <a name='P1213'>1213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable next' id='C1213'>
              Load alloc$next
            </span>
          </td>
        </tr>
        <tr id='P1214'>
          <td align='right'>
            <a name='P1214'>1214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1214'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1215'>
          <td align='right'>
            <a name='P1215'>1215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C1215'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1216'>
          <td align='right'>
            <a name='P1216'>1216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C1216'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1217'>
          <td align='right'>
            <a name='P1217'>1217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1217'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1218'>
          <td align='right'>
            <a name='P1218'>1218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?alloc$pool' id='C1218'>
              Push ?alloc$pool
            </span>
          </td>
        </tr>
        <tr id='P1219'>
          <td align='right'>
            <a name='P1219'>1219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable next' id='C1219'>
              Load alloc$next
            </span>
          </td>
        </tr>
        <tr id='P1220'>
          <td align='right'>
            <a name='P1220'>1220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1220'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1221'>
          <td align='right'>
            <a name='P1221'>1221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in copy' id='C1221'>
              StoreVar copy
            </span>
          </td>
        </tr>
        <tr id='P1222'>
          <td align='right'>
            <a name='P1222'>1222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable next' id='C1222'>
              Load alloc$next
            </span>
          </td>
        </tr>
        <tr id='P1223'>
          <td align='right'>
            <a name='P1223'>1223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1223'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1224'>
          <td align='right'>
            <a name='P1224'>1224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C1224'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1225'>
          <td align='right'>
            <a name='P1225'>1225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable next' id='C1225'>
              Store alloc$next
            </span>
          </td>
        </tr>
        <tr id='P1226'>
          <td align='right'>
            <a name='P1226'>1226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1226'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1227'>
          <td align='right'>
            <a name='P1227'>1227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push copy' id='C1227'>
              ReturnOp(copy)
            </span>
          </td>
        </tr>
        <tr id='P1228'>
          <td align='right'>
            <a name='P1228'>1228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable copy' id='C1228'>
              DelVar copy
            </span>
          </td>
        </tr>
        <tr id='P1229'>
          <td align='right'>
            <a name='P1229'>1229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1229'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1230'>
          <td align='right'>
            <a name='P1230'>1230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method free' id='C1230'>
              Frame free(r)
            </span>
          </td>
        </tr>
        <tr id='P1231'>
          <td align='right'>
            <a name='P1231'>1231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1231'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P1232'>
          <td align='right'>
            <a name='P1232'>1232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of r' id='C1232'>
              LoadVar r
            </span>
          </td>
        </tr>
        <tr id='P1233'>
          <td align='right'>
            <a name='P1233'>1233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable r' id='C1233'>
              DelVar r
            </span>
          </td>
        </tr>
        <tr id='P1234'>
          <td align='right'>
            <a name='P1234'>1234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and delete the shared variable at the address' id='C1234'>
              Del
            </span>
          </td>
        </tr>
        <tr id='P1235'>
          <td align='right'>
            <a name='P1235'>1235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1235'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1236'>
          <td align='right'>
            <a name='P1236'>1236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1236'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1237'>
          <td align='right'>
            <a name='P1237'>1237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1237'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1238'>
          <td align='right'>
            <a name='P1238'>1238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method leak_check' id='C1238'>
              Frame leak_check()
            </span>
          </td>
        </tr>
        <tr id='P1239'>
          <td align='right'>
            <a name='P1239'>1239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1239'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P1240'>
          <td align='right'>
            <a name='P1240'>1240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1240'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1241'>
          <td align='right'>
            <a name='P1241'>1241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable pool' id='C1241'>
              Load alloc$pool
            </span>
          </td>
        </tr>
        <tr id='P1242'>
          <td align='right'>
            <a name='P1242'>1242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1242'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1243'>
          <td align='right'>
            <a name='P1243'>1243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1243'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1244'>
          <td align='right'>
            <a name='P1244'>1244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "alloc_leak"' id='C1244'>
              Push "alloc_leak"
            </span>
          </td>
        </tr>
        <tr id='P1245'>
          <td align='right'>
            <a name='P1245'>1245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and a condition and raise exception if condition is false' id='C1245'>
              Assert2
            </span>
          </td>
        </tr>
        <tr id='P1246'>
          <td align='right'>
            <a name='P1246'>1246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1246'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1247'>
          <td align='right'>
            <a name='P1247'>1247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1247'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1248'>
          <td align='right'>
            <a name='P1248'>1248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1248'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1249'>
          <td align='right'>
            <a name='P1249'>1249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1249'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1250'>
          <td align='right'>
            <a name='P1250'>1250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Bdeque' id='C1250'>
              Frame Bdeque(n)
            </span>
          </td>
        </tr>
        <tr id='P1251'>
          <td align='right'>
            <a name='P1251'>1251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1251'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1252'>
          <td align='right'>
            <a name='P1252'>1252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "data"' id='C1252'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1253'>
          <td align='right'>
            <a name='P1253'>1253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1253'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1254'>
          <td align='right'>
            <a name='P1254'>1254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant None' id='C1254'>
              Push None
            </span>
          </td>
        </tr>
        <tr id='P1255'>
          <td align='right'>
            <a name='P1255'>1255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1255'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1256'>
          <td align='right'>
            <a name='P1256'>1256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C1256'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P1257'>
          <td align='right'>
            <a name='P1257'>1257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying *' id='C1257'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P1258'>
          <td align='right'>
            <a name='P1258'>1258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1258'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1259'>
          <td align='right'>
            <a name='P1259'>1259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1259'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1260'>
          <td align='right'>
            <a name='P1260'>1260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1260'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1261'>
          <td align='right'>
            <a name='P1261'>1261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1261'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1262'>
          <td align='right'>
            <a name='P1262'>1262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1262'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1263'>
          <td align='right'>
            <a name='P1263'>1263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1263'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1264'>
          <td align='right'>
            <a name='P1264'>1264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C1264'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P1265'>
          <td align='right'>
            <a name='P1265'>1265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying %' id='C1265'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1266'>
          <td align='right'>
            <a name='P1266'>1266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1266'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1267'>
          <td align='right'>
            <a name='P1267'>1267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1267'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1268'>
          <td align='right'>
            <a name='P1268'>1268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1268'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1269'>
          <td align='right'>
            <a name='P1269'>1269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1269'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1270'>
          <td align='right'>
            <a name='P1270'>1270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "size"' id='C1270'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1271'>
          <td align='right'>
            <a name='P1271'>1271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C1271'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P1272'>
          <td align='right'>
            <a name='P1272'>1272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C1272'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P1273'>
          <td align='right'>
            <a name='P1273'>1273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1273'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1274'>
          <td align='right'>
            <a name='P1274'>1274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_full"' id='C1274'>
              Push "not_full"
            </span>
          </td>
        </tr>
        <tr id='P1275'>
          <td align='right'>
            <a name='P1275'>1275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1275'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1276'>
          <td align='right'>
            <a name='P1276'>1276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(989)' id='C1276'>
              Apply PC(989)
            </span>
          </td>
        </tr>
        <tr id='P1277'>
          <td align='right'>
            <a name='P1277'>1277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1277'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1278'>
          <td align='right'>
            <a name='P1278'>1278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_empty"' id='C1278'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1279'>
          <td align='right'>
            <a name='P1279'>1279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1279'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1280'>
          <td align='right'>
            <a name='P1280'>1280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(989)' id='C1280'>
              Apply PC(989)
            </span>
          </td>
        </tr>
        <tr id='P1281'>
          <td align='right'>
            <a name='P1281'>1281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1281'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1282'>
          <td align='right'>
            <a name='P1282'>1282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1282'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1283'>
          <td align='right'>
            <a name='P1283'>1283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1283'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1284'>
          <td align='right'>
            <a name='P1284'>1284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(931)' id='C1284'>
              Apply PC(931)
            </span>
          </td>
        </tr>
        <tr id='P1285'>
          <td align='right'>
            <a name='P1285'>1285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C1285'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P1286'>
          <td align='right'>
            <a name='P1286'>1286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in initial' id='C1286'>
              StoreVar initial
            </span>
          </td>
        </tr>
        <tr id='P1287'>
          <td align='right'>
            <a name='P1287'>1287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push initial' id='C1287'>
              ReturnOp(initial)
            </span>
          </td>
        </tr>
        <tr id='P1288'>
          <td align='right'>
            <a name='P1288'>1288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable initial' id='C1288'>
              DelVar initial
            </span>
          </td>
        </tr>
        <tr id='P1289'>
          <td align='right'>
            <a name='P1289'>1289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1289'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1290'>
          <td align='right'>
            <a name='P1290'>1290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method put_left' id='C1290'>
              Frame put_left(d, v)
            </span>
          </td>
        </tr>
        <tr id='P1291'>
          <td align='right'>
            <a name='P1291'>1291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1291'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1292'>
          <td align='right'>
            <a name='P1292'>1292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1292'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1293'>
          <td align='right'>
            <a name='P1293'>1293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1293'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1294'>
          <td align='right'>
            <a name='P1294'>1294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(954)' id='C1294'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1295'>
          <td align='right'>
            <a name='P1295'>1295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1295'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1296'>
          <td align='right'>
            <a name='P1296'>1296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1296'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1297'>
          <td align='right'>
            <a name='P1297'>1297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1297'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1298'>
          <td align='right'>
            <a name='P1298'>1298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1298'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1299'>
          <td align='right'>
            <a name='P1299'>1299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1299'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1300'>
          <td align='right'>
            <a name='P1300'>1300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1300'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1301'>
          <td align='right'>
            <a name='P1301'>1301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1301'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1302'>
          <td align='right'>
            <a name='P1302'>1302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1302'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1303'>
          <td align='right'>
            <a name='P1303'>1303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1303'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1304'>
          <td align='right'>
            <a name='P1304'>1304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1304'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1305'>
          <td align='right'>
            <a name='P1305'>1305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1318 if the value is False' id='C1305'>
              JumpCond False 1318
            </span>
          </td>
        </tr>
        <tr id='P1306'>
          <td align='right'>
            <a name='P1306'>1306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1306'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1307'>
          <td align='right'>
            <a name='P1307'>1307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1307'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1308'>
          <td align='right'>
            <a name='P1308'>1308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_full"' id='C1308'>
              Push "not_full"
            </span>
          </td>
        </tr>
        <tr id='P1309'>
          <td align='right'>
            <a name='P1309'>1309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1309'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1310'>
          <td align='right'>
            <a name='P1310'>1310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1310'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1311'>
          <td align='right'>
            <a name='P1311'>1311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1311'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1312'>
          <td align='right'>
            <a name='P1312'>1312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1312'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1313'>
          <td align='right'>
            <a name='P1313'>1313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1313'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1314'>
          <td align='right'>
            <a name='P1314'>1314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1314'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1315'>
          <td align='right'>
            <a name='P1315'>1315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(998)' id='C1315'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1316'>
          <td align='right'>
            <a name='P1316'>1316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1316'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1317'>
          <td align='right'>
            <a name='P1317'>1317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1296' id='C1317'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P1318'>
          <td align='right'>
            <a name='P1318'>1318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1318'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1319'>
          <td align='right'>
            <a name='P1319'>1319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "data"' id='C1319'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1320'>
          <td align='right'>
            <a name='P1320'>1320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1320'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1321'>
          <td align='right'>
            <a name='P1321'>1321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1321'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1322'>
          <td align='right'>
            <a name='P1322'>1322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "head"' id='C1322'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1323'>
          <td align='right'>
            <a name='P1323'>1323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1323'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1324'>
          <td align='right'>
            <a name='P1324'>1324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1324'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1325'>
          <td align='right'>
            <a name='P1325'>1325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1325'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1326'>
          <td align='right'>
            <a name='P1326'>1326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C1326'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1327'>
          <td align='right'>
            <a name='P1327'>1327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C1327'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1328'>
          <td align='right'>
            <a name='P1328'>1328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1328'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1329'>
          <td align='right'>
            <a name='P1329'>1329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1329'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1330'>
          <td align='right'>
            <a name='P1330'>1330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "head"' id='C1330'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1331'>
          <td align='right'>
            <a name='P1331'>1331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1331'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1332'>
          <td align='right'>
            <a name='P1332'>1332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1332'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1333'>
          <td align='right'>
            <a name='P1333'>1333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1333'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1334'>
          <td align='right'>
            <a name='P1334'>1334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1334'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1335'>
          <td align='right'>
            <a name='P1335'>1335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1335'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1336'>
          <td align='right'>
            <a name='P1336'>1336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1336'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1337'>
          <td align='right'>
            <a name='P1337'>1337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C1337'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1338'>
          <td align='right'>
            <a name='P1338'>1338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1338'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1339'>
          <td align='right'>
            <a name='P1339'>1339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1339'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1340'>
          <td align='right'>
            <a name='P1340'>1340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1340'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1341'>
          <td align='right'>
            <a name='P1341'>1341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1341'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1342'>
          <td align='right'>
            <a name='P1342'>1342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying %' id='C1342'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1343'>
          <td align='right'>
            <a name='P1343'>1343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1343'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1344'>
          <td align='right'>
            <a name='P1344'>1344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1344'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1345'>
          <td align='right'>
            <a name='P1345'>1345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1345'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1346'>
          <td align='right'>
            <a name='P1346'>1346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1346'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1347'>
          <td align='right'>
            <a name='P1347'>1347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1347'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1348'>
          <td align='right'>
            <a name='P1348'>1348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1348'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1349'>
          <td align='right'>
            <a name='P1349'>1349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1349'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1350'>
          <td align='right'>
            <a name='P1350'>1350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C1350'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1351'>
          <td align='right'>
            <a name='P1351'>1351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1351'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1352'>
          <td align='right'>
            <a name='P1352'>1352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1352'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1353'>
          <td align='right'>
            <a name='P1353'>1353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1353'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1354'>
          <td align='right'>
            <a name='P1354'>1354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1354'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1355'>
          <td align='right'>
            <a name='P1355'>1355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1355'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1356'>
          <td align='right'>
            <a name='P1356'>1356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1356'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1357'>
          <td align='right'>
            <a name='P1357'>1357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1357'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1358'>
          <td align='right'>
            <a name='P1358'>1358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1364 if the value is False' id='C1358'>
              JumpCond False 1364
            </span>
          </td>
        </tr>
        <tr id='P1359'>
          <td align='right'>
            <a name='P1359'>1359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1359'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1360'>
          <td align='right'>
            <a name='P1360'>1360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_empty"' id='C1360'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1361'>
          <td align='right'>
            <a name='P1361'>1361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1361'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1362'>
          <td align='right'>
            <a name='P1362'>1362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(1097)' id='C1362'>
              Apply PC(1097)
            </span>
          </td>
        </tr>
        <tr id='P1363'>
          <td align='right'>
            <a name='P1363'>1363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1363'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1364'>
          <td align='right'>
            <a name='P1364'>1364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1364'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1365'>
          <td align='right'>
            <a name='P1365'>1365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C1365'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1366'>
          <td align='right'>
            <a name='P1366'>1366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1366'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1367'>
          <td align='right'>
            <a name='P1367'>1367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1367'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1368'>
          <td align='right'>
            <a name='P1368'>1368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(973)' id='C1368'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1369'>
          <td align='right'>
            <a name='P1369'>1369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1369'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1370'>
          <td align='right'>
            <a name='P1370'>1370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1370'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1371'>
          <td align='right'>
            <a name='P1371'>1371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1371'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1372'>
          <td align='right'>
            <a name='P1372'>1372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method put_right' id='C1372'>
              Frame put_right(d, v)
            </span>
          </td>
        </tr>
        <tr id='P1373'>
          <td align='right'>
            <a name='P1373'>1373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1373'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1374'>
          <td align='right'>
            <a name='P1374'>1374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1374'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1375'>
          <td align='right'>
            <a name='P1375'>1375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1375'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1376'>
          <td align='right'>
            <a name='P1376'>1376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(954)' id='C1376'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1377'>
          <td align='right'>
            <a name='P1377'>1377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1377'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1378'>
          <td align='right'>
            <a name='P1378'>1378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1378'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1379'>
          <td align='right'>
            <a name='P1379'>1379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1379'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1380'>
          <td align='right'>
            <a name='P1380'>1380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1380'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1381'>
          <td align='right'>
            <a name='P1381'>1381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1381'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1382'>
          <td align='right'>
            <a name='P1382'>1382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1382'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1383'>
          <td align='right'>
            <a name='P1383'>1383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1383'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1384'>
          <td align='right'>
            <a name='P1384'>1384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1384'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1385'>
          <td align='right'>
            <a name='P1385'>1385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1385'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1386'>
          <td align='right'>
            <a name='P1386'>1386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1386'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1387'>
          <td align='right'>
            <a name='P1387'>1387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1400 if the value is False' id='C1387'>
              JumpCond False 1400
            </span>
          </td>
        </tr>
        <tr id='P1388'>
          <td align='right'>
            <a name='P1388'>1388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1388'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1389'>
          <td align='right'>
            <a name='P1389'>1389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1389'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1390'>
          <td align='right'>
            <a name='P1390'>1390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_full"' id='C1390'>
              Push "not_full"
            </span>
          </td>
        </tr>
        <tr id='P1391'>
          <td align='right'>
            <a name='P1391'>1391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1391'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1392'>
          <td align='right'>
            <a name='P1392'>1392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1392'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1393'>
          <td align='right'>
            <a name='P1393'>1393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1393'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1394'>
          <td align='right'>
            <a name='P1394'>1394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1394'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1395'>
          <td align='right'>
            <a name='P1395'>1395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1395'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1396'>
          <td align='right'>
            <a name='P1396'>1396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1396'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1397'>
          <td align='right'>
            <a name='P1397'>1397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(998)' id='C1397'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1398'>
          <td align='right'>
            <a name='P1398'>1398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1398'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1399'>
          <td align='right'>
            <a name='P1399'>1399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1378' id='C1399'>
              Jump 1378
            </span>
          </td>
        </tr>
        <tr id='P1400'>
          <td align='right'>
            <a name='P1400'>1400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1400'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1401'>
          <td align='right'>
            <a name='P1401'>1401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "data"' id='C1401'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1402'>
          <td align='right'>
            <a name='P1402'>1402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1402'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1403'>
          <td align='right'>
            <a name='P1403'>1403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1403'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1404'>
          <td align='right'>
            <a name='P1404'>1404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1404'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1405'>
          <td align='right'>
            <a name='P1405'>1405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1405'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1406'>
          <td align='right'>
            <a name='P1406'>1406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1406'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1407'>
          <td align='right'>
            <a name='P1407'>1407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1407'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1408'>
          <td align='right'>
            <a name='P1408'>1408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C1408'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1409'>
          <td align='right'>
            <a name='P1409'>1409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C1409'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1410'>
          <td align='right'>
            <a name='P1410'>1410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1410'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1411'>
          <td align='right'>
            <a name='P1411'>1411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1411'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1412'>
          <td align='right'>
            <a name='P1412'>1412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1412'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1413'>
          <td align='right'>
            <a name='P1413'>1413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1413'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1414'>
          <td align='right'>
            <a name='P1414'>1414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1414'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1415'>
          <td align='right'>
            <a name='P1415'>1415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1415'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1416'>
          <td align='right'>
            <a name='P1416'>1416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1416'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1417'>
          <td align='right'>
            <a name='P1417'>1417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1417'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1418'>
          <td align='right'>
            <a name='P1418'>1418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1418'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1419'>
          <td align='right'>
            <a name='P1419'>1419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C1419'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1420'>
          <td align='right'>
            <a name='P1420'>1420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1420'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1421'>
          <td align='right'>
            <a name='P1421'>1421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1421'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1422'>
          <td align='right'>
            <a name='P1422'>1422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1422'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1423'>
          <td align='right'>
            <a name='P1423'>1423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1423'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1424'>
          <td align='right'>
            <a name='P1424'>1424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying %' id='C1424'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1425'>
          <td align='right'>
            <a name='P1425'>1425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1425'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1426'>
          <td align='right'>
            <a name='P1426'>1426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1426'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1427'>
          <td align='right'>
            <a name='P1427'>1427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1427'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1428'>
          <td align='right'>
            <a name='P1428'>1428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1428'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1429'>
          <td align='right'>
            <a name='P1429'>1429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1429'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1430'>
          <td align='right'>
            <a name='P1430'>1430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1430'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1431'>
          <td align='right'>
            <a name='P1431'>1431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1431'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1432'>
          <td align='right'>
            <a name='P1432'>1432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C1432'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1433'>
          <td align='right'>
            <a name='P1433'>1433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1433'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1434'>
          <td align='right'>
            <a name='P1434'>1434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1434'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1435'>
          <td align='right'>
            <a name='P1435'>1435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1435'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1436'>
          <td align='right'>
            <a name='P1436'>1436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1436'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1437'>
          <td align='right'>
            <a name='P1437'>1437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1437'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1438'>
          <td align='right'>
            <a name='P1438'>1438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1438'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1439'>
          <td align='right'>
            <a name='P1439'>1439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1439'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1440'>
          <td align='right'>
            <a name='P1440'>1440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1446 if the value is False' id='C1440'>
              JumpCond False 1446
            </span>
          </td>
        </tr>
        <tr id='P1441'>
          <td align='right'>
            <a name='P1441'>1441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1441'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1442'>
          <td align='right'>
            <a name='P1442'>1442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_empty"' id='C1442'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1443'>
          <td align='right'>
            <a name='P1443'>1443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1443'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1444'>
          <td align='right'>
            <a name='P1444'>1444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(1097)' id='C1444'>
              Apply PC(1097)
            </span>
          </td>
        </tr>
        <tr id='P1445'>
          <td align='right'>
            <a name='P1445'>1445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1445'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1446'>
          <td align='right'>
            <a name='P1446'>1446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1446'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1447'>
          <td align='right'>
            <a name='P1447'>1447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C1447'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1448'>
          <td align='right'>
            <a name='P1448'>1448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1448'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1449'>
          <td align='right'>
            <a name='P1449'>1449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1449'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1450'>
          <td align='right'>
            <a name='P1450'>1450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(973)' id='C1450'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1451'>
          <td align='right'>
            <a name='P1451'>1451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1451'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1452'>
          <td align='right'>
            <a name='P1452'>1452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1452'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1453'>
          <td align='right'>
            <a name='P1453'>1453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1453'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1454'>
          <td align='right'>
            <a name='P1454'>1454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method get_left' id='C1454'>
              Frame get_left(d)
            </span>
          </td>
        </tr>
        <tr id='P1455'>
          <td align='right'>
            <a name='P1455'>1455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1455'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1456'>
          <td align='right'>
            <a name='P1456'>1456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1456'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1457'>
          <td align='right'>
            <a name='P1457'>1457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1457'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1458'>
          <td align='right'>
            <a name='P1458'>1458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(954)' id='C1458'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1459'>
          <td align='right'>
            <a name='P1459'>1459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1459'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1460'>
          <td align='right'>
            <a name='P1460'>1460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1460'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1461'>
          <td align='right'>
            <a name='P1461'>1461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1461'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1462'>
          <td align='right'>
            <a name='P1462'>1462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1462'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1463'>
          <td align='right'>
            <a name='P1463'>1463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1463'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1464'>
          <td align='right'>
            <a name='P1464'>1464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1464'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1465'>
          <td align='right'>
            <a name='P1465'>1465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1465'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1466'>
          <td align='right'>
            <a name='P1466'>1466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1479 if the value is False' id='C1466'>
              JumpCond False 1479
            </span>
          </td>
        </tr>
        <tr id='P1467'>
          <td align='right'>
            <a name='P1467'>1467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1467'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1468'>
          <td align='right'>
            <a name='P1468'>1468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1468'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1469'>
          <td align='right'>
            <a name='P1469'>1469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "not_empty"' id='C1469'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1470'>
          <td align='right'>
            <a name='P1470'>1470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1470'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1471'>
          <td align='right'>
            <a name='P1471'>1471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1471'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1472'>
          <td align='right'>
            <a name='P1472'>1472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1472'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1473'>
          <td align='right'>
            <a name='P1473'>1473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1473'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1474'>
          <td align='right'>
            <a name='P1474'>1474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1474'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1475'>
          <td align='right'>
            <a name='P1475'>1475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1475'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1476'>
          <td align='right'>
            <a name='P1476'>1476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(998)' id='C1476'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1477'>
          <td align='right'>
            <a name='P1477'>1477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1477'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1478'>
          <td align='right'>
            <a name='P1478'>1478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1460' id='C1478'>
              Jump 1460
            </span>
          </td>
        </tr>
        <tr id='P1479'>
          <td align='right'>
            <a name='P1479'>1479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1479'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1480'>
          <td align='right'>
            <a name='P1480'>1480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "head"' id='C1480'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1481'>
          <td align='right'>
            <a name='P1481'>1481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1481'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1482'>
          <td align='right'>
            <a name='P1482'>1482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1482'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1483'>
          <td align='right'>
            <a name='P1483'>1483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1483'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1484'>
          <td align='right'>
            <a name='P1484'>1484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1484'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1485'>
          <td align='right'>
            <a name='P1485'>1485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1485'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1486'>
          <td align='right'>
            <a name='P1486'>1486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1486'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1487'>
          <td align='right'>
            <a name='P1487'>1487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C1487'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1488'>
          <td align='right'>
            <a name='P1488'>1488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1488'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1489'>
          <td align='right'>
            <a name='P1489'>1489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1489'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1490'>
          <td align='right'>
            <a name='P1490'>1490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1490'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1491'>
          <td align='right'>
            <a name='P1491'>1491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1491'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1492'>
          <td align='right'>
            <a name='P1492'>1492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying %' id='C1492'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1493'>
          <td align='right'>
            <a name='P1493'>1493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1493'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1494'>
          <td align='right'>
            <a name='P1494'>1494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1494'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1495'>
          <td align='right'>
            <a name='P1495'>1495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "data"' id='C1495'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1496'>
          <td align='right'>
            <a name='P1496'>1496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1496'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1497'>
          <td align='right'>
            <a name='P1497'>1497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1497'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1498'>
          <td align='right'>
            <a name='P1498'>1498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "head"' id='C1498'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1499'>
          <td align='right'>
            <a name='P1499'>1499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1499'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1500'>
          <td align='right'>
            <a name='P1500'>1500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1500'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1501'>
          <td align='right'>
            <a name='P1501'>1501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1501'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1502'>
          <td align='right'>
            <a name='P1502'>1502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1502'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1503'>
          <td align='right'>
            <a name='P1503'>1503</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in left' id='C1503'>
              StoreVar left
            </span>
          </td>
        </tr>
        <tr id='P1504'>
          <td align='right'>
            <a name='P1504'>1504</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1504'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1505'>
          <td align='right'>
            <a name='P1505'>1505</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1505'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1506'>
          <td align='right'>
            <a name='P1506'>1506</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1506'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1507'>
          <td align='right'>
            <a name='P1507'>1507</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1507'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1508'>
          <td align='right'>
            <a name='P1508'>1508</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1508'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1509'>
          <td align='right'>
            <a name='P1509'>1509</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1509'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1510'>
          <td align='right'>
            <a name='P1510'>1510</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C1510'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1511'>
          <td align='right'>
            <a name='P1511'>1511</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1511'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1512'>
          <td align='right'>
            <a name='P1512'>1512</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1512'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1513'>
          <td align='right'>
            <a name='P1513'>1513</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1513'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1514'>
          <td align='right'>
            <a name='P1514'>1514</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1514'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1515'>
          <td align='right'>
            <a name='P1515'>1515</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1515'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1516'>
          <td align='right'>
            <a name='P1516'>1516</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1516'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1517'>
          <td align='right'>
            <a name='P1517'>1517</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1517'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1518'>
          <td align='right'>
            <a name='P1518'>1518</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1518'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1519'>
          <td align='right'>
            <a name='P1519'>1519</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1519'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1520'>
          <td align='right'>
            <a name='P1520'>1520</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1520'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1521'>
          <td align='right'>
            <a name='P1521'>1521</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C1521'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1522'>
          <td align='right'>
            <a name='P1522'>1522</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1522'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1523'>
          <td align='right'>
            <a name='P1523'>1523</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1529 if the value is False' id='C1523'>
              JumpCond False 1529
            </span>
          </td>
        </tr>
        <tr id='P1524'>
          <td align='right'>
            <a name='P1524'>1524</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1524'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1525'>
          <td align='right'>
            <a name='P1525'>1525</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "not_full"' id='C1525'>
              Push "not_full"
            </span>
          </td>
        </tr>
        <tr id='P1526'>
          <td align='right'>
            <a name='P1526'>1526</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1526'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1527'>
          <td align='right'>
            <a name='P1527'>1527</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(1097)' id='C1527'>
              Apply PC(1097)
            </span>
          </td>
        </tr>
        <tr id='P1528'>
          <td align='right'>
            <a name='P1528'>1528</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1528'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1529'>
          <td align='right'>
            <a name='P1529'>1529</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1529'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1530'>
          <td align='right'>
            <a name='P1530'>1530</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C1530'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1531'>
          <td align='right'>
            <a name='P1531'>1531</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1531'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1532'>
          <td align='right'>
            <a name='P1532'>1532</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1532'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1533'>
          <td align='right'>
            <a name='P1533'>1533</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(973)' id='C1533'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1534'>
          <td align='right'>
            <a name='P1534'>1534</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1534'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1535'>
          <td align='right'>
            <a name='P1535'>1535</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push left' id='C1535'>
              ReturnOp(left)
            </span>
          </td>
        </tr>
        <tr id='P1536'>
          <td align='right'>
            <a name='P1536'>1536</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable left' id='C1536'>
              DelVar left
            </span>
          </td>
        </tr>
        <tr id='P1537'>
          <td align='right'>
            <a name='P1537'>1537</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1537'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1538'>
          <td align='right'>
            <a name='P1538'>1538</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method get_right' id='C1538'>
              Frame get_right(d)
            </span>
          </td>
        </tr>
        <tr id='P1539'>
          <td align='right'>
            <a name='P1539'>1539</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1539'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1540'>
          <td align='right'>
            <a name='P1540'>1540</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1540'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1541'>
          <td align='right'>
            <a name='P1541'>1541</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1541'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1542'>
          <td align='right'>
            <a name='P1542'>1542</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(954)' id='C1542'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1543'>
          <td align='right'>
            <a name='P1543'>1543</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1543'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1544'>
          <td align='right'>
            <a name='P1544'>1544</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1544'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1545'>
          <td align='right'>
            <a name='P1545'>1545</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1545'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1546'>
          <td align='right'>
            <a name='P1546'>1546</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1546'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1547'>
          <td align='right'>
            <a name='P1547'>1547</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1547'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1548'>
          <td align='right'>
            <a name='P1548'>1548</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1548'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1549'>
          <td align='right'>
            <a name='P1549'>1549</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1549'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1550'>
          <td align='right'>
            <a name='P1550'>1550</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1563 if the value is False' id='C1550'>
              JumpCond False 1563
            </span>
          </td>
        </tr>
        <tr id='P1551'>
          <td align='right'>
            <a name='P1551'>1551</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1551'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1552'>
          <td align='right'>
            <a name='P1552'>1552</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1552'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1553'>
          <td align='right'>
            <a name='P1553'>1553</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "not_empty"' id='C1553'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1554'>
          <td align='right'>
            <a name='P1554'>1554</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1554'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1555'>
          <td align='right'>
            <a name='P1555'>1555</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1555'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1556'>
          <td align='right'>
            <a name='P1556'>1556</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1556'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1557'>
          <td align='right'>
            <a name='P1557'>1557</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1557'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1558'>
          <td align='right'>
            <a name='P1558'>1558</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1558'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1559'>
          <td align='right'>
            <a name='P1559'>1559</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1559'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1560'>
          <td align='right'>
            <a name='P1560'>1560</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(998)' id='C1560'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1561'>
          <td align='right'>
            <a name='P1561'>1561</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1561'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1562'>
          <td align='right'>
            <a name='P1562'>1562</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1544' id='C1562'>
              Jump 1544
            </span>
          </td>
        </tr>
        <tr id='P1563'>
          <td align='right'>
            <a name='P1563'>1563</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1563'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1564'>
          <td align='right'>
            <a name='P1564'>1564</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1564'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1565'>
          <td align='right'>
            <a name='P1565'>1565</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1565'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1566'>
          <td align='right'>
            <a name='P1566'>1566</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1566'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1567'>
          <td align='right'>
            <a name='P1567'>1567</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1567'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1568'>
          <td align='right'>
            <a name='P1568'>1568</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1568'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1569'>
          <td align='right'>
            <a name='P1569'>1569</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1569'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1570'>
          <td align='right'>
            <a name='P1570'>1570</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1570'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1571'>
          <td align='right'>
            <a name='P1571'>1571</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C1571'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1572'>
          <td align='right'>
            <a name='P1572'>1572</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1572'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1573'>
          <td align='right'>
            <a name='P1573'>1573</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1573'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1574'>
          <td align='right'>
            <a name='P1574'>1574</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1574'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1575'>
          <td align='right'>
            <a name='P1575'>1575</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1575'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1576'>
          <td align='right'>
            <a name='P1576'>1576</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying %' id='C1576'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1577'>
          <td align='right'>
            <a name='P1577'>1577</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1577'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1578'>
          <td align='right'>
            <a name='P1578'>1578</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1578'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1579'>
          <td align='right'>
            <a name='P1579'>1579</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "data"' id='C1579'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1580'>
          <td align='right'>
            <a name='P1580'>1580</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1580'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1581'>
          <td align='right'>
            <a name='P1581'>1581</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1581'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1582'>
          <td align='right'>
            <a name='P1582'>1582</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1582'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1583'>
          <td align='right'>
            <a name='P1583'>1583</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1583'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1584'>
          <td align='right'>
            <a name='P1584'>1584</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1584'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1585'>
          <td align='right'>
            <a name='P1585'>1585</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1585'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1586'>
          <td align='right'>
            <a name='P1586'>1586</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1586'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1587'>
          <td align='right'>
            <a name='P1587'>1587</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in right' id='C1587'>
              StoreVar right
            </span>
          </td>
        </tr>
        <tr id='P1588'>
          <td align='right'>
            <a name='P1588'>1588</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1588'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1589'>
          <td align='right'>
            <a name='P1589'>1589</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1589'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1590'>
          <td align='right'>
            <a name='P1590'>1590</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1590'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1591'>
          <td align='right'>
            <a name='P1591'>1591</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C1591'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1592'>
          <td align='right'>
            <a name='P1592'>1592</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1592'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1593'>
          <td align='right'>
            <a name='P1593'>1593</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1593'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1594'>
          <td align='right'>
            <a name='P1594'>1594</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C1594'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1595'>
          <td align='right'>
            <a name='P1595'>1595</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1595'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1596'>
          <td align='right'>
            <a name='P1596'>1596</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1596'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1597'>
          <td align='right'>
            <a name='P1597'>1597</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1597'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1598'>
          <td align='right'>
            <a name='P1598'>1598</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1598'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1599'>
          <td align='right'>
            <a name='P1599'>1599</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1599'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1600'>
          <td align='right'>
            <a name='P1600'>1600</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1600'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1601'>
          <td align='right'>
            <a name='P1601'>1601</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "size"' id='C1601'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1602'>
          <td align='right'>
            <a name='P1602'>1602</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1602'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1603'>
          <td align='right'>
            <a name='P1603'>1603</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1603'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1604'>
          <td align='right'>
            <a name='P1604'>1604</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1604'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1605'>
          <td align='right'>
            <a name='P1605'>1605</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C1605'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1606'>
          <td align='right'>
            <a name='P1606'>1606</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1606'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1607'>
          <td align='right'>
            <a name='P1607'>1607</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1613 if the value is False' id='C1607'>
              JumpCond False 1613
            </span>
          </td>
        </tr>
        <tr id='P1608'>
          <td align='right'>
            <a name='P1608'>1608</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1608'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1609'>
          <td align='right'>
            <a name='P1609'>1609</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "not_full"' id='C1609'>
              Push "not_full"
            </span>
          </td>
        </tr>
        <tr id='P1610'>
          <td align='right'>
            <a name='P1610'>1610</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1610'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1611'>
          <td align='right'>
            <a name='P1611'>1611</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(1097)' id='C1611'>
              Apply PC(1097)
            </span>
          </td>
        </tr>
        <tr id='P1612'>
          <td align='right'>
            <a name='P1612'>1612</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1612'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1613'>
          <td align='right'>
            <a name='P1613'>1613</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1613'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1614'>
          <td align='right'>
            <a name='P1614'>1614</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C1614'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1615'>
          <td align='right'>
            <a name='P1615'>1615</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1615'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1616'>
          <td align='right'>
            <a name='P1616'>1616</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1616'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1617'>
          <td align='right'>
            <a name='P1617'>1617</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(973)' id='C1617'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1618'>
          <td align='right'>
            <a name='P1618'>1618</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1618'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1619'>
          <td align='right'>
            <a name='P1619'>1619</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push right' id='C1619'>
              ReturnOp(right)
            </span>
          </td>
        </tr>
        <tr id='P1620'>
          <td align='right'>
            <a name='P1620'>1620</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable right' id='C1620'>
              DelVar right
            </span>
          </td>
        </tr>
        <tr id='P1621'>
          <td align='right'>
            <a name='P1621'>1621</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1723' id='C1621'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1622'>
          <td align='right'>
            <a name='P1622'>1622</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method peek_left' id='C1622'>
              Frame peek_left(d)
            </span>
          </td>
        </tr>
        <tr id='P1623'>
          <td align='right'>
            <a name='P1623'>1623</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1623'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1624'>
          <td align='right'>
            <a name='P1624'>1624</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1624'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1625'>
          <td align='right'>
            <a name='P1625'>1625</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1625'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1626'>
          <td align='right'>
            <a name='P1626'>1626</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(954)' id='C1626'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1627'>
          <td align='right'>
            <a name='P1627'>1627</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1627'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1628'>
          <td align='right'>
            <a name='P1628'>1628</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1628'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1629'>
          <td align='right'>
            <a name='P1629'>1629</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "count"' id='C1629'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1630'>
          <td align='right'>
            <a name='P1630'>1630</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1630'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1631'>
          <td align='right'>
            <a name='P1631'>1631</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1631'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1632'>
          <td align='right'>
            <a name='P1632'>1632</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1632'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1633'>
          <td align='right'>
            <a name='P1633'>1633</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1633'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1634'>
          <td align='right'>
            <a name='P1634'>1634</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1647 if the value is False' id='C1634'>
              JumpCond False 1647
            </span>
          </td>
        </tr>
        <tr id='P1635'>
          <td align='right'>
            <a name='P1635'>1635</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1635'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1636'>
          <td align='right'>
            <a name='P1636'>1636</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1636'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1637'>
          <td align='right'>
            <a name='P1637'>1637</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "not_empty"' id='C1637'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1638'>
          <td align='right'>
            <a name='P1638'>1638</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1638'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1639'>
          <td align='right'>
            <a name='P1639'>1639</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1639'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1640'>
          <td align='right'>
            <a name='P1640'>1640</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1640'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1641'>
          <td align='right'>
            <a name='P1641'>1641</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1641'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1642'>
          <td align='right'>
            <a name='P1642'>1642</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1642'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1643'>
          <td align='right'>
            <a name='P1643'>1643</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1643'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1644'>
          <td align='right'>
            <a name='P1644'>1644</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(998)' id='C1644'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1645'>
          <td align='right'>
            <a name='P1645'>1645</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1645'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1646'>
          <td align='right'>
            <a name='P1646'>1646</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1628' id='C1646'>
              Jump 1628
            </span>
          </td>
        </tr>
        <tr id='P1647'>
          <td align='right'>
            <a name='P1647'>1647</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1647'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1648'>
          <td align='right'>
            <a name='P1648'>1648</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "data"' id='C1648'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1649'>
          <td align='right'>
            <a name='P1649'>1649</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1649'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1650'>
          <td align='right'>
            <a name='P1650'>1650</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1650'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1651'>
          <td align='right'>
            <a name='P1651'>1651</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "head"' id='C1651'>
              Push "head"
            </span>
          </td>
        </tr>
        <tr id='P1652'>
          <td align='right'>
            <a name='P1652'>1652</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1652'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1653'>
          <td align='right'>
            <a name='P1653'>1653</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1653'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1654'>
          <td align='right'>
            <a name='P1654'>1654</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1654'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1655'>
          <td align='right'>
            <a name='P1655'>1655</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C1655'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1656'>
          <td align='right'>
            <a name='P1656'>1656</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1656'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1657'>
          <td align='right'>
            <a name='P1657'>1657</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "n"' id='C1657'>
              Push "n"
            </span>
          </td>
        </tr>
        <tr id='P1658'>
          <td align='right'>
            <a name='P1658'>1658</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1658'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1659'>
          <td align='right'>
            <a name='P1659'>1659</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1659'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1660'>
          <td align='right'>
            <a name='P1660'>1660</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying %' id='C1660'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1661'>
          <td align='right'>
            <a name='P1661'>1661</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1661'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1662'>
          <td align='right'>
            <a name='P1662'>1662</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1662'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1663'>
          <td align='right'>
            <a name='P1663'>1663</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in left' id='C1663'>
              StoreVar left
            </span>
          </td>
        </tr>
        <tr id='P1664'>
          <td align='right'>
            <a name='P1664'>1664</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1664'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1665'>
          <td align='right'>
            <a name='P1665'>1665</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C1665'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1666'>
          <td align='right'>
            <a name='P1666'>1666</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1666'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1667'>
          <td align='right'>
            <a name='P1667'>1667</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1667'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1668'>
          <td align='right'>
            <a name='P1668'>1668</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(973)' id='C1668'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1669'>
          <td align='right'>
            <a name='P1669'>1669</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1669'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1670'>
          <td align='right'>
            <a name='P1670'>1670</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push left' id='C1670'>
              ReturnOp(left)
            </span>
          </td>
        </tr>
        <tr id='P1671'>
          <td align='right'>
            <a name='P1671'>1671</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable left' id='C1671'>
              DelVar left
            </span>
          </td>
        </tr>
        <tr id='P1672'>
          <td align='right'>
            <a name='P1672'>1672</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1723' id='C1672'>
              Jump 1723
            </span>
          </td>
        </tr>
        <tr id='P1673'>
          <td align='right'>
            <a name='P1673'>1673</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method peek_right' id='C1673'>
              Frame peek_right(d)
            </span>
          </td>
        </tr>
        <tr id='P1674'>
          <td align='right'>
            <a name='P1674'>1674</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1674'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1675'>
          <td align='right'>
            <a name='P1675'>1675</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1675'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1676'>
          <td align='right'>
            <a name='P1676'>1676</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1676'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1677'>
          <td align='right'>
            <a name='P1677'>1677</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(954)' id='C1677'>
              Apply PC(954)
            </span>
          </td>
        </tr>
        <tr id='P1678'>
          <td align='right'>
            <a name='P1678'>1678</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1678'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1679'>
          <td align='right'>
            <a name='P1679'>1679</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1679'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1680'>
          <td align='right'>
            <a name='P1680'>1680</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "count"' id='C1680'>
              Push "count"
            </span>
          </td>
        </tr>
        <tr id='P1681'>
          <td align='right'>
            <a name='P1681'>1681</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1681'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1682'>
          <td align='right'>
            <a name='P1682'>1682</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1682'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1683'>
          <td align='right'>
            <a name='P1683'>1683</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1683'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1684'>
          <td align='right'>
            <a name='P1684'>1684</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1684'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1685'>
          <td align='right'>
            <a name='P1685'>1685</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1698 if the value is False' id='C1685'>
              JumpCond False 1698
            </span>
          </td>
        </tr>
        <tr id='P1686'>
          <td align='right'>
            <a name='P1686'>1686</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1686'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1687'>
          <td align='right'>
            <a name='P1687'>1687</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1687'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1688'>
          <td align='right'>
            <a name='P1688'>1688</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "not_empty"' id='C1688'>
              Push "not_empty"
            </span>
          </td>
        </tr>
        <tr id='P1689'>
          <td align='right'>
            <a name='P1689'>1689</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1689'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1690'>
          <td align='right'>
            <a name='P1690'>1690</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1690'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1691'>
          <td align='right'>
            <a name='P1691'>1691</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1691'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1692'>
          <td align='right'>
            <a name='P1692'>1692</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "lock"' id='C1692'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1693'>
          <td align='right'>
            <a name='P1693'>1693</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1693'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1694'>
          <td align='right'>
            <a name='P1694'>1694</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1694'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1695'>
          <td align='right'>
            <a name='P1695'>1695</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(998)' id='C1695'>
              Apply PC(998)
            </span>
          </td>
        </tr>
        <tr id='P1696'>
          <td align='right'>
            <a name='P1696'>1696</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1696'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1697'>
          <td align='right'>
            <a name='P1697'>1697</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1679' id='C1697'>
              Jump 1679
            </span>
          </td>
        </tr>
        <tr id='P1698'>
          <td align='right'>
            <a name='P1698'>1698</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C1698'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1699'>
          <td align='right'>
            <a name='P1699'>1699</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "data"' id='C1699'>
              Push "data"
            </span>
          </td>
        </tr>
        <tr id='P1700'>
          <td align='right'>
            <a name='P1700'>1700</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1700'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1701'>
          <td align='right'>
            <a name='P1701'>1701</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1701'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1702'>
          <td align='right'>
            <a name='P1702'>1702</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "tail"' id='C1702'>
              Push "tail"
            </span>
          </td>
        </tr>
        <tr id='P1703'>
          <td align='right'>
            <a name='P1703'>1703</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1703'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1704'>
          <td align='right'>
            <a name='P1704'>1704</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1704'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1705'>
          <td align='right'>
            <a name='P1705'>1705</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1705'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1706'>
          <td align='right'>
            <a name='P1706'>1706</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C1706'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1707'>
          <td align='right'>
            <a name='P1707'>1707</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1707'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1708'>
          <td align='right'>
            <a name='P1708'>1708</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "size"' id='C1708'>
              Push "size"
            </span>
          </td>
        </tr>
        <tr id='P1709'>
          <td align='right'>
            <a name='P1709'>1709</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1709'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1710'>
          <td align='right'>
            <a name='P1710'>1710</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1710'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1711'>
          <td align='right'>
            <a name='P1711'>1711</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying %' id='C1711'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P1712'>
          <td align='right'>
            <a name='P1712'>1712</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1712'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1713'>
          <td align='right'>
            <a name='P1713'>1713</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1713'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1714'>
          <td align='right'>
            <a name='P1714'>1714</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in right' id='C1714'>
              StoreVar right
            </span>
          </td>
        </tr>
        <tr id='P1715'>
          <td align='right'>
            <a name='P1715'>1715</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C1715'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P1716'>
          <td align='right'>
            <a name='P1716'>1716</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C1716'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P1717'>
          <td align='right'>
            <a name='P1717'>1717</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "lock"' id='C1717'>
              Push "lock"
            </span>
          </td>
        </tr>
        <tr id='P1718'>
          <td align='right'>
            <a name='P1718'>1718</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1718'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1719'>
          <td align='right'>
            <a name='P1719'>1719</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(973)' id='C1719'>
              Apply PC(973)
            </span>
          </td>
        </tr>
        <tr id='P1720'>
          <td align='right'>
            <a name='P1720'>1720</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1720'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1721'>
          <td align='right'>
            <a name='P1721'>1721</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push right' id='C1721'>
              ReturnOp(right)
            </span>
          </td>
        </tr>
        <tr id='P1722'>
          <td align='right'>
            <a name='P1722'>1722</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable right' id='C1722'>
              DelVar right
            </span>
          </td>
        </tr>
        <tr id='P1723'>
          <td align='right'>
            <a name='P1723'>1723</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1250)' id='C1723'>
              Push PC(1250)
            </span>
          </td>
        </tr>
        <tr id='P1724'>
          <td align='right'>
            <a name='P1724'>1724</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C1724'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P1725'>
          <td align='right'>
            <a name='P1725'>1725</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1725'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1726'>
          <td align='right'>
            <a name='P1726'>1726</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1726'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1727'>
          <td align='right'>
            <a name='P1727'>1727</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable d' id='C1727'>
              Store d
            </span>
          </td>
        </tr>
        <tr id='P1728'>
          <td align='right'>
            <a name='P1728'>1728</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1882' id='C1728'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1729'>
          <td align='right'>
            <a name='P1729'>1729</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method put_left_test' id='C1729'>
              Frame put_left_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1730'>
          <td align='right'>
            <a name='P1730'>1730</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1730'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1731'>
          <td align='right'>
            <a name='P1731'>1731</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "call left put"' id='C1731'>
              Push "call left put"
            </span>
          </td>
        </tr>
        <tr id='P1732'>
          <td align='right'>
            <a name='P1732'>1732</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1732'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1733'>
          <td align='right'>
            <a name='P1733'>1733</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1733'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1734'>
          <td align='right'>
            <a name='P1734'>1734</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1734'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1735'>
          <td align='right'>
            <a name='P1735'>1735</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1735'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1736'>
          <td align='right'>
            <a name='P1736'>1736</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1290)' id='C1736'>
              Push PC(1290)
            </span>
          </td>
        </tr>
        <tr id='P1737'>
          <td align='right'>
            <a name='P1737'>1737</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1737'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1738'>
          <td align='right'>
            <a name='P1738'>1738</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?d' id='C1738'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1739'>
          <td align='right'>
            <a name='P1739'>1739</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1739'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1740'>
          <td align='right'>
            <a name='P1740'>1740</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1740'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1741'>
          <td align='right'>
            <a name='P1741'>1741</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1741'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1742'>
          <td align='right'>
            <a name='P1742'>1742</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1742'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1743'>
          <td align='right'>
            <a name='P1743'>1743</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "left"' id='C1743'>
              Push "left"
            </span>
          </td>
        </tr>
        <tr id='P1744'>
          <td align='right'>
            <a name='P1744'>1744</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1744'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1745'>
          <td align='right'>
            <a name='P1745'>1745</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1745'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1746'>
          <td align='right'>
            <a name='P1746'>1746</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1746'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1747'>
          <td align='right'>
            <a name='P1747'>1747</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1747'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1748'>
          <td align='right'>
            <a name='P1748'>1748</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1748'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1749'>
          <td align='right'>
            <a name='P1749'>1749</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1749'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1750'>
          <td align='right'>
            <a name='P1750'>1750</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "done left put"' id='C1750'>
              Push "done left put"
            </span>
          </td>
        </tr>
        <tr id='P1751'>
          <td align='right'>
            <a name='P1751'>1751</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1751'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1752'>
          <td align='right'>
            <a name='P1752'>1752</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1752'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1753'>
          <td align='right'>
            <a name='P1753'>1753</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C1753'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1754'>
          <td align='right'>
            <a name='P1754'>1754</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1754'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1755'>
          <td align='right'>
            <a name='P1755'>1755</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1755'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1756'>
          <td align='right'>
            <a name='P1756'>1756</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1756'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1757'>
          <td align='right'>
            <a name='P1757'>1757</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1882' id='C1757'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1758'>
          <td align='right'>
            <a name='P1758'>1758</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method put_right_test' id='C1758'>
              Frame put_right_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1759'>
          <td align='right'>
            <a name='P1759'>1759</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1759'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1760'>
          <td align='right'>
            <a name='P1760'>1760</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "call right put"' id='C1760'>
              Push "call right put"
            </span>
          </td>
        </tr>
        <tr id='P1761'>
          <td align='right'>
            <a name='P1761'>1761</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1761'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1762'>
          <td align='right'>
            <a name='P1762'>1762</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1762'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1763'>
          <td align='right'>
            <a name='P1763'>1763</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1763'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1764'>
          <td align='right'>
            <a name='P1764'>1764</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1764'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1765'>
          <td align='right'>
            <a name='P1765'>1765</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1372)' id='C1765'>
              Push PC(1372)
            </span>
          </td>
        </tr>
        <tr id='P1766'>
          <td align='right'>
            <a name='P1766'>1766</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1766'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1767'>
          <td align='right'>
            <a name='P1767'>1767</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?d' id='C1767'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1768'>
          <td align='right'>
            <a name='P1768'>1768</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1768'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1769'>
          <td align='right'>
            <a name='P1769'>1769</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1769'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1770'>
          <td align='right'>
            <a name='P1770'>1770</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1770'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1771'>
          <td align='right'>
            <a name='P1771'>1771</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1771'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1772'>
          <td align='right'>
            <a name='P1772'>1772</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "rights"' id='C1772'>
              Push "rights"
            </span>
          </td>
        </tr>
        <tr id='P1773'>
          <td align='right'>
            <a name='P1773'>1773</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1773'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1774'>
          <td align='right'>
            <a name='P1774'>1774</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1774'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1775'>
          <td align='right'>
            <a name='P1775'>1775</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1775'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1776'>
          <td align='right'>
            <a name='P1776'>1776</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1776'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1777'>
          <td align='right'>
            <a name='P1777'>1777</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1777'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1778'>
          <td align='right'>
            <a name='P1778'>1778</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1778'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1779'>
          <td align='right'>
            <a name='P1779'>1779</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "done right put"' id='C1779'>
              Push "done right put"
            </span>
          </td>
        </tr>
        <tr id='P1780'>
          <td align='right'>
            <a name='P1780'>1780</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1780'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1781'>
          <td align='right'>
            <a name='P1781'>1781</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1781'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1782'>
          <td align='right'>
            <a name='P1782'>1782</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable self' id='C1782'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1783'>
          <td align='right'>
            <a name='P1783'>1783</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1783'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1784'>
          <td align='right'>
            <a name='P1784'>1784</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1784'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1785'>
          <td align='right'>
            <a name='P1785'>1785</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1785'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1786'>
          <td align='right'>
            <a name='P1786'>1786</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1882' id='C1786'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1787'>
          <td align='right'>
            <a name='P1787'>1787</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method get_left_test' id='C1787'>
              Frame get_left_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1788'>
          <td align='right'>
            <a name='P1788'>1788</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1788'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1789'>
          <td align='right'>
            <a name='P1789'>1789</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "call left get"' id='C1789'>
              Push "call left get"
            </span>
          </td>
        </tr>
        <tr id='P1790'>
          <td align='right'>
            <a name='P1790'>1790</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1790'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1791'>
          <td align='right'>
            <a name='P1791'>1791</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1791'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1792'>
          <td align='right'>
            <a name='P1792'>1792</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1792'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1793'>
          <td align='right'>
            <a name='P1793'>1793</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1793'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1794'>
          <td align='right'>
            <a name='P1794'>1794</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1454)' id='C1794'>
              Push PC(1454)
            </span>
          </td>
        </tr>
        <tr id='P1795'>
          <td align='right'>
            <a name='P1795'>1795</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?d' id='C1795'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1796'>
          <td align='right'>
            <a name='P1796'>1796</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1796'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1797'>
          <td align='right'>
            <a name='P1797'>1797</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1797'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1798'>
          <td align='right'>
            <a name='P1798'>1798</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in v' id='C1798'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P1799'>
          <td align='right'>
            <a name='P1799'>1799</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1799'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1800'>
          <td align='right'>
            <a name='P1800'>1800</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "done left get"' id='C1800'>
              Push "done left get"
            </span>
          </td>
        </tr>
        <tr id='P1801'>
          <td align='right'>
            <a name='P1801'>1801</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1801'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1802'>
          <td align='right'>
            <a name='P1802'>1802</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1802'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1803'>
          <td align='right'>
            <a name='P1803'>1803</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C1803'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1804'>
          <td align='right'>
            <a name='P1804'>1804</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1804'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1805'>
          <td align='right'>
            <a name='P1805'>1805</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C1805'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1806'>
          <td align='right'>
            <a name='P1806'>1806</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C1806'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1807'>
          <td align='right'>
            <a name='P1807'>1807</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1807'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1808'>
          <td align='right'>
            <a name='P1808'>1808</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1808'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1809'>
          <td align='right'>
            <a name='P1809'>1809</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1809'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1810'>
          <td align='right'>
            <a name='P1810'>1810</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1882' id='C1810'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1811'>
          <td align='right'>
            <a name='P1811'>1811</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method get_right_test' id='C1811'>
              Frame get_right_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1812'>
          <td align='right'>
            <a name='P1812'>1812</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1812'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1813'>
          <td align='right'>
            <a name='P1813'>1813</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "call right get"' id='C1813'>
              Push "call right get"
            </span>
          </td>
        </tr>
        <tr id='P1814'>
          <td align='right'>
            <a name='P1814'>1814</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1814'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1815'>
          <td align='right'>
            <a name='P1815'>1815</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1815'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1816'>
          <td align='right'>
            <a name='P1816'>1816</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1816'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1817'>
          <td align='right'>
            <a name='P1817'>1817</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1817'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1818'>
          <td align='right'>
            <a name='P1818'>1818</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1538)' id='C1818'>
              Push PC(1538)
            </span>
          </td>
        </tr>
        <tr id='P1819'>
          <td align='right'>
            <a name='P1819'>1819</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?d' id='C1819'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1820'>
          <td align='right'>
            <a name='P1820'>1820</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1820'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1821'>
          <td align='right'>
            <a name='P1821'>1821</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1821'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1822'>
          <td align='right'>
            <a name='P1822'>1822</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in v' id='C1822'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P1823'>
          <td align='right'>
            <a name='P1823'>1823</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1823'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1824'>
          <td align='right'>
            <a name='P1824'>1824</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "done right get"' id='C1824'>
              Push "done right get"
            </span>
          </td>
        </tr>
        <tr id='P1825'>
          <td align='right'>
            <a name='P1825'>1825</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1825'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1826'>
          <td align='right'>
            <a name='P1826'>1826</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1826'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1827'>
          <td align='right'>
            <a name='P1827'>1827</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C1827'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1828'>
          <td align='right'>
            <a name='P1828'>1828</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1828'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1829'>
          <td align='right'>
            <a name='P1829'>1829</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C1829'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1830'>
          <td align='right'>
            <a name='P1830'>1830</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C1830'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1831'>
          <td align='right'>
            <a name='P1831'>1831</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1831'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1832'>
          <td align='right'>
            <a name='P1832'>1832</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1832'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1833'>
          <td align='right'>
            <a name='P1833'>1833</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1833'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1834'>
          <td align='right'>
            <a name='P1834'>1834</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1882' id='C1834'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1835'>
          <td align='right'>
            <a name='P1835'>1835</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method peek_left_test' id='C1835'>
              Frame peek_left_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1836'>
          <td align='right'>
            <a name='P1836'>1836</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1836'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1837'>
          <td align='right'>
            <a name='P1837'>1837</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "call peek left"' id='C1837'>
              Push "call peek left"
            </span>
          </td>
        </tr>
        <tr id='P1838'>
          <td align='right'>
            <a name='P1838'>1838</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1838'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1839'>
          <td align='right'>
            <a name='P1839'>1839</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1839'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1840'>
          <td align='right'>
            <a name='P1840'>1840</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1840'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1841'>
          <td align='right'>
            <a name='P1841'>1841</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1841'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1842'>
          <td align='right'>
            <a name='P1842'>1842</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1622)' id='C1842'>
              Push PC(1622)
            </span>
          </td>
        </tr>
        <tr id='P1843'>
          <td align='right'>
            <a name='P1843'>1843</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?d' id='C1843'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1844'>
          <td align='right'>
            <a name='P1844'>1844</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1844'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1845'>
          <td align='right'>
            <a name='P1845'>1845</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1845'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1846'>
          <td align='right'>
            <a name='P1846'>1846</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in v' id='C1846'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P1847'>
          <td align='right'>
            <a name='P1847'>1847</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1847'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1848'>
          <td align='right'>
            <a name='P1848'>1848</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "done peek left"' id='C1848'>
              Push "done peek left"
            </span>
          </td>
        </tr>
        <tr id='P1849'>
          <td align='right'>
            <a name='P1849'>1849</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1849'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1850'>
          <td align='right'>
            <a name='P1850'>1850</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1850'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1851'>
          <td align='right'>
            <a name='P1851'>1851</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C1851'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1852'>
          <td align='right'>
            <a name='P1852'>1852</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1852'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1853'>
          <td align='right'>
            <a name='P1853'>1853</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C1853'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1854'>
          <td align='right'>
            <a name='P1854'>1854</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C1854'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1855'>
          <td align='right'>
            <a name='P1855'>1855</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1855'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1856'>
          <td align='right'>
            <a name='P1856'>1856</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1856'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1857'>
          <td align='right'>
            <a name='P1857'>1857</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1857'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1858'>
          <td align='right'>
            <a name='P1858'>1858</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1882' id='C1858'>
              Jump 1882
            </span>
          </td>
        </tr>
        <tr id='P1859'>
          <td align='right'>
            <a name='P1859'>1859</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method peek_right_test' id='C1859'>
              Frame peek_right_test(self)
            </span>
          </td>
        </tr>
        <tr id='P1860'>
          <td align='right'>
            <a name='P1860'>1860</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1860'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1861'>
          <td align='right'>
            <a name='P1861'>1861</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "call peek right"' id='C1861'>
              Push "call peek right"
            </span>
          </td>
        </tr>
        <tr id='P1862'>
          <td align='right'>
            <a name='P1862'>1862</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1862'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1863'>
          <td align='right'>
            <a name='P1863'>1863</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C1863'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1864'>
          <td align='right'>
            <a name='P1864'>1864</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1864'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1865'>
          <td align='right'>
            <a name='P1865'>1865</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C1865'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1866'>
          <td align='right'>
            <a name='P1866'>1866</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1673)' id='C1866'>
              Push PC(1673)
            </span>
          </td>
        </tr>
        <tr id='P1867'>
          <td align='right'>
            <a name='P1867'>1867</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?d' id='C1867'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P1868'>
          <td align='right'>
            <a name='P1868'>1868</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C1868'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P1869'>
          <td align='right'>
            <a name='P1869'>1869</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1869'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1870'>
          <td align='right'>
            <a name='P1870'>1870</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in v' id='C1870'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P1871'>
          <td align='right'>
            <a name='P1871'>1871</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1871'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1872'>
          <td align='right'>
            <a name='P1872'>1872</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "done peek right"' id='C1872'>
              Push "done peek right"
            </span>
          </td>
        </tr>
        <tr id='P1873'>
          <td align='right'>
            <a name='P1873'>1873</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1873'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1874'>
          <td align='right'>
            <a name='P1874'>1874</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C1874'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P1875'>
          <td align='right'>
            <a name='P1875'>1875</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C1875'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P1876'>
          <td align='right'>
            <a name='P1876'>1876</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1876'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1877'>
          <td align='right'>
            <a name='P1877'>1877</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C1877'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P1878'>
          <td align='right'>
            <a name='P1878'>1878</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C1878'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P1879'>
          <td align='right'>
            <a name='P1879'>1879</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1879'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1880'>
          <td align='right'>
            <a name='P1880'>1880</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C1880'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P1881'>
          <td align='right'>
            <a name='P1881'>1881</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1881'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1882'>
          <td align='right'>
            <a name='P1882'>1882</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1882'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1883'>
          <td align='right'>
            <a name='P1883'>1883</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1883'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1884'>
          <td align='right'>
            <a name='P1884'>1884</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1884'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1885'>
          <td align='right'>
            <a name='P1885'>1885</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1885'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1886'>
          <td align='right'>
            <a name='P1886'>1886</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1886'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1887'>
          <td align='right'>
            <a name='P1887'>1887</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1895 if the value is False' id='C1887'>
              JumpCond False 1895
            </span>
          </td>
        </tr>
        <tr id='P1888'>
          <td align='right'>
            <a name='P1888'>1888</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1729)' id='C1888'>
              Push ?PC(1729)
            </span>
          </td>
        </tr>
        <tr id='P1889'>
          <td align='right'>
            <a name='P1889'>1889</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1889'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1890'>
          <td align='right'>
            <a name='P1890'>1890</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1890'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1891'>
          <td align='right'>
            <a name='P1891'>1891</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1891'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1892'>
          <td align='right'>
            <a name='P1892'>1892</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1892'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1893'>
          <td align='right'>
            <a name='P1893'>1893</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1893'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1894'>
          <td align='right'>
            <a name='P1894'>1894</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1886' id='C1894'>
              Jump 1886
            </span>
          </td>
        </tr>
        <tr id='P1895'>
          <td align='right'>
            <a name='P1895'>1895</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1895'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1896'>
          <td align='right'>
            <a name='P1896'>1896</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1896'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1897'>
          <td align='right'>
            <a name='P1897'>1897</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C1897'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P1898'>
          <td align='right'>
            <a name='P1898'>1898</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1898'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1899'>
          <td align='right'>
            <a name='P1899'>1899</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1899'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1900'>
          <td align='right'>
            <a name='P1900'>1900</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1900'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1901'>
          <td align='right'>
            <a name='P1901'>1901</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1909 if the value is False' id='C1901'>
              JumpCond False 1909
            </span>
          </td>
        </tr>
        <tr id='P1902'>
          <td align='right'>
            <a name='P1902'>1902</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1758)' id='C1902'>
              Push ?PC(1758)
            </span>
          </td>
        </tr>
        <tr id='P1903'>
          <td align='right'>
            <a name='P1903'>1903</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1903'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1904'>
          <td align='right'>
            <a name='P1904'>1904</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1904'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1905'>
          <td align='right'>
            <a name='P1905'>1905</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1905'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1906'>
          <td align='right'>
            <a name='P1906'>1906</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1906'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1907'>
          <td align='right'>
            <a name='P1907'>1907</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1907'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1908'>
          <td align='right'>
            <a name='P1908'>1908</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1900' id='C1908'>
              Jump 1900
            </span>
          </td>
        </tr>
        <tr id='P1909'>
          <td align='right'>
            <a name='P1909'>1909</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1909'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1910'>
          <td align='right'>
            <a name='P1910'>1910</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1910'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1911'>
          <td align='right'>
            <a name='P1911'>1911</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1911'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1912'>
          <td align='right'>
            <a name='P1912'>1912</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1912'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1913'>
          <td align='right'>
            <a name='P1913'>1913</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1913'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1914'>
          <td align='right'>
            <a name='P1914'>1914</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1914'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1915'>
          <td align='right'>
            <a name='P1915'>1915</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1923 if the value is False' id='C1915'>
              JumpCond False 1923
            </span>
          </td>
        </tr>
        <tr id='P1916'>
          <td align='right'>
            <a name='P1916'>1916</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1787)' id='C1916'>
              Push ?PC(1787)
            </span>
          </td>
        </tr>
        <tr id='P1917'>
          <td align='right'>
            <a name='P1917'>1917</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1917'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1918'>
          <td align='right'>
            <a name='P1918'>1918</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1918'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1919'>
          <td align='right'>
            <a name='P1919'>1919</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1919'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1920'>
          <td align='right'>
            <a name='P1920'>1920</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1920'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1921'>
          <td align='right'>
            <a name='P1921'>1921</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1921'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1922'>
          <td align='right'>
            <a name='P1922'>1922</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1914' id='C1922'>
              Jump 1914
            </span>
          </td>
        </tr>
        <tr id='P1923'>
          <td align='right'>
            <a name='P1923'>1923</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1923'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1924'>
          <td align='right'>
            <a name='P1924'>1924</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1924'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1925'>
          <td align='right'>
            <a name='P1925'>1925</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1925'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1926'>
          <td align='right'>
            <a name='P1926'>1926</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1926'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1927'>
          <td align='right'>
            <a name='P1927'>1927</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1927'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1928'>
          <td align='right'>
            <a name='P1928'>1928</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1928'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1929'>
          <td align='right'>
            <a name='P1929'>1929</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1937 if the value is False' id='C1929'>
              JumpCond False 1937
            </span>
          </td>
        </tr>
        <tr id='P1930'>
          <td align='right'>
            <a name='P1930'>1930</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1811)' id='C1930'>
              Push ?PC(1811)
            </span>
          </td>
        </tr>
        <tr id='P1931'>
          <td align='right'>
            <a name='P1931'>1931</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1931'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1932'>
          <td align='right'>
            <a name='P1932'>1932</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1932'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1933'>
          <td align='right'>
            <a name='P1933'>1933</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1933'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1934'>
          <td align='right'>
            <a name='P1934'>1934</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1934'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1935'>
          <td align='right'>
            <a name='P1935'>1935</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1935'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1936'>
          <td align='right'>
            <a name='P1936'>1936</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1928' id='C1936'>
              Jump 1928
            </span>
          </td>
        </tr>
        <tr id='P1937'>
          <td align='right'>
            <a name='P1937'>1937</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1937'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1938'>
          <td align='right'>
            <a name='P1938'>1938</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1938'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1939'>
          <td align='right'>
            <a name='P1939'>1939</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1939'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1940'>
          <td align='right'>
            <a name='P1940'>1940</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1940'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1941'>
          <td align='right'>
            <a name='P1941'>1941</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1941'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1942'>
          <td align='right'>
            <a name='P1942'>1942</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1942'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1943'>
          <td align='right'>
            <a name='P1943'>1943</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1951 if the value is False' id='C1943'>
              JumpCond False 1951
            </span>
          </td>
        </tr>
        <tr id='P1944'>
          <td align='right'>
            <a name='P1944'>1944</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1835)' id='C1944'>
              Push ?PC(1835)
            </span>
          </td>
        </tr>
        <tr id='P1945'>
          <td align='right'>
            <a name='P1945'>1945</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1945'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1946'>
          <td align='right'>
            <a name='P1946'>1946</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1946'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1947'>
          <td align='right'>
            <a name='P1947'>1947</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1947'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1948'>
          <td align='right'>
            <a name='P1948'>1948</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1948'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1949'>
          <td align='right'>
            <a name='P1949'>1949</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1949'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1950'>
          <td align='right'>
            <a name='P1950'>1950</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1942' id='C1950'>
              Jump 1942
            </span>
          </td>
        </tr>
        <tr id='P1951'>
          <td align='right'>
            <a name='P1951'>1951</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1951'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1952'>
          <td align='right'>
            <a name='P1952'>1952</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1952'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1953'>
          <td align='right'>
            <a name='P1953'>1953</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1953'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1954'>
          <td align='right'>
            <a name='P1954'>1954</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C1954'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P1955'>
          <td align='right'>
            <a name='P1955'>1955</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1955'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1956'>
          <td align='right'>
            <a name='P1956'>1956</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1956'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1957'>
          <td align='right'>
            <a name='P1957'>1957</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 1965 if the value is False' id='C1957'>
              JumpCond False 1965
            </span>
          </td>
        </tr>
        <tr id='P1958'>
          <td align='right'>
            <a name='P1958'>1958</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(1859)' id='C1958'>
              Push ?PC(1859)
            </span>
          </td>
        </tr>
        <tr id='P1959'>
          <td align='right'>
            <a name='P1959'>1959</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1959'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1960'>
          <td align='right'>
            <a name='P1960'>1960</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1960'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1961'>
          <td align='right'>
            <a name='P1961'>1961</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C1961'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P1962'>
          <td align='right'>
            <a name='P1962'>1962</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1962'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1963'>
          <td align='right'>
            <a name='P1963'>1963</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1963'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1964'>
          <td align='right'>
            <a name='P1964'>1964</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1956' id='C1964'>
              Jump 1956
            </span>
          </td>
        </tr>
        <tr id='P1965'>
          <td align='right'>
            <a name='P1965'>1965</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1965'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1966'>
          <td align='right'>
            <a name='P1966'>1966</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1966'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P1967'>
          <td align='right'>
            <a name='P1967'>1967</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C1967'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread1'>
      <td align='center'>
        T1
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo1' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread2'>
      <td align='center'>
        T2
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo2' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread3'>
      <td align='center'>
        T3
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo3' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread4'>
      <td align='center'>
        T4
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo4' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread5'>
      <td align='center'>
        T5
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo5' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread6'>
      <td align='center'>
        T6
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo6' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 7;
var nmegasteps = 3;
var vardir = [
  ['alloc$next'],
  ['d', '"count"'],
  ['d', '"data"'],
  ['d', '"head"'],
  ['d', '"lock"'],
  ['d', '"not_empty"'],
  ['d', '"not_full"'],
  ['d', '"size"'],
  ['d', '"tail"']
];
var state =
{
  "nstates": 34235,
  "issue": "Behavior violation: unexpected output",
  "hvm": {
    "modules": {
        "alloc": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/alloc.hny",
            "lines": [
                "pool = {:}",
                "next = 0",
                "",
                "# builtin malloc \"alloc$malloc\"",
                "# TODO.  builtin malloc temporarily disabled",
                "def malloc(v) returns copy:",
                "    atomically:",
                "        pool[next] = v",
                "        copy = ?pool[next]",
                "        next += 1",
                "",
                "# Commented out code tests for bad frees, but can lead to data races",
                "def free(r):",
                "    atomically:",
                "       # let poolcopy = pool:",
                "            del !r",
                "       #    assert poolcopy != pool, .bad_free",
                "",
                "def leak_check():",
                "    assert pool == {:}, .alloc_leak"
              ],
            "identifiers": {
                "free": "constant",
                "this": "local-var",
                "v": "local-const",
                "malloc": "constant",
                "next": "global",
                "leak_check": "constant",
                "r": "local-const",
                "pool": "global",
                "___": "___"
              }
          },
        "bag": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/bag.hny",
            "lines": [
                "def empty() returns bg:",
                "    bg = {:}",
                "",
                "def fromSet(s) returns bg:",
                "    bg = { elt:1 for elt in s }",
                "",
                "def fromList(a) returns bg:",
                "    bg = {:}",
                "    for v in a:",
                "        if v in bg:",
                "            bg[v] += 1",
                "        else:",
                "            bg[v] = 1",
                "",
                "builtin multiplicity \"bag$multiplicity\"",
                "def multiplicity(bg, elt) returns count:",
                "    if elt in bg:",
                "        count = bg[elt]",
                "    else:",
                "        count = 0",
                "",
                "builtin size \"bag$size\"",
                "def size(bg) returns count:",
                "    count = 0",
                "    for _:c in bg:",
                "        count += c",
                "",
                "builtin bmin \"bag$bmin\"",
                "def bmin(bg) returns count:",
                "    assert bg != {:}",
                "    count = min(keys(bg))",
                "",
                "builtin bmax \"bag$bmax\"",
                "def bmax(bg) returns count:",
                "    assert bg != {:}",
                "    count = max(keys(bg))",
                "",
                "def bchoose(bg) returns elt:",
                "    elt = choose(keys(bg))",
                "",
                "builtin add \"bag$add\"",
                "def add(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        result[elt] += 1",
                "    else:",
                "        result[elt] = 1",
                "",
                "builtin remove \"bag$remove\"",
                "def remove(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        assert result[elt] > 0",
                "        result[elt] -= 1",
                "        if result[elt] == 0:",
                "            del result[elt]",
                "",
                "# Return set of all subbags of bg of size k",
                "def combinations(bg, k) returns result:",
                "    if k == 0:",
                "        result = { {:} }",
                "    else:",
                "        let n = size(bg):",
                "            if k > n:",
                "                result = {}",
                "            elif k == n:",
                "                result = { bg }",
                "            else:",
                "                let hd = bmin(bg) let tl = remove(bg, hd):",
                "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
                "                                | combinations(tl, k)"
              ],
            "identifiers": {
                "tl": "local-const",
                "fromSet": "constant",
                "x": "local-const",
                "empty": "constant",
                "multiplicity": "constant",
                "size": "constant",
                "n": "local-const",
                "k": "local-const",
                "hd": "local-const",
                "a": "local-const",
                "bmax": "constant",
                "add": "constant",
                "c": "local-const",
                "combinations": "constant",
                "elt": "local-const",
                "this": "local-var",
                "remove": "constant",
                "v": "local-const",
                "s": "local-const",
                "___": "___",
                "fromList": "constant",
                "bchoose": "constant",
                "bmin": "constant",
                "bg": "local-const"
              }
          },
        "__main__": {
            "file": "bdeque_test.hny",
            "lines": [
                "import bdeque",
                "const SIZE = 2",
                "const N_PUT_LEFT = 1",
                "const N_PUT_RIGHT = 2",
                "const N_GET_LEFT = 1",
                "const N_GET_RIGHT = 1",
                "const N_PEEK_LEFT = 0",
                "const N_PEEK_RIGHT = 1",
                "",
                "d = bdeque.Bdeque(SIZE)",
                "",
                "def put_left_test(self):",
                "    print(\"call left put\", self)",
                "    bdeque.put_left(?d, (self, \"left\"))",
                "    print(\"done left put\", self)",
                "",
                "def put_right_test(self):",
                "    print(\"call right put\", self)",
                "    bdeque.put_right(?d, (self, \"rights\"))",
                "    print(\"done right put\", self)",
                "",
                "def get_left_test(self):",
                "    print(\"call left get\", self)",
                "    let v = bdeque.get_left(?d):",
                "        print(\"done left get\", self, v)",
                "",
                "def get_right_test(self):",
                "    print(\"call right get\", self)",
                "    let v = bdeque.get_right(?d):",
                "        print(\"done right get\", self, v)",
                "",
                "def peek_left_test(self):",
                "    print(\"call peek left\", self)",
                "    let v = bdeque.peek_left(?d):",
                "        print(\"done peek left\", self, v) ",
                "",
                "def peek_right_test(self):",
                "    print(\"call peek right\", self)",
                "    let v = bdeque.peek_right(?d):",
                "        print(\"done peek right\", self, v) ",
                "",
                "",
                "for i in {1..N_PUT_LEFT}:",
                "    spawn put_left_test(i)",
                "for i in {1..N_PUT_RIGHT}:",
                "    spawn put_right_test(i)",
                "for i in {1..N_GET_LEFT}:",
                "    spawn get_left_test(i)",
                "for i in {1..N_GET_RIGHT}:",
                "    spawn get_right_test(i)",
                "for i in {1..N_PEEK_LEFT}:",
                "    spawn peek_left_test(i)",
                "for i in {1..N_PEEK_RIGHT}:",
                "    spawn peek_right_test(i)",
                "",
                "    "
              ],
            "identifiers": {
                "peek_right_test": "constant",
                "d": "global",
                "N_GET_LEFT": "constant",
                "self": "local-const",
                "N_PUT_LEFT": "constant",
                "N_PUT_RIGHT": "constant",
                "i": "local-const",
                "N_GET_RIGHT": "constant",
                "bdeque": "module",
                "this": "local-var",
                "v": "local-const",
                "N_PEEK_RIGHT": "constant",
                "get_right_test": "constant",
                "get_left_test": "constant",
                "peek_left_test": "constant",
                "put_right_test": "constant",
                "N_PEEK_LEFT": "constant",
                "put_left_test": "constant",
                "___": "___",
                "SIZE": "constant"
              }
          },
        "synch": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/synch.hny",
            "lines": [
                "import list",
                "import bag",
                "",
                "def atomic_load(p) returns current:",
                "    atomically current = !p",
                "",
                "def atomic_store(p, v):",
                "    atomically !p = v",
                "",
                "def tas(lk) returns oldvalue:",
                "    atomically:",
                "        oldvalue = !lk",
                "        !lk = True",
                "",
                "def cas(p, old, new) returns success:",
                "    atomically:",
                "        success = !p == old",
                "        if success:",
                "            !p = new",
                "",
                "def BinSema(initial) returns sema:",
                "    assert initial in { False, True }",
                "    sema = initial",
                "",
                "def Lock() returns result:",
                "    result = BinSema(False)",
                "",
                "def acquired(binsema) returns result:",
                "    result = !binsema",
                "    ",
                "def held(binsema) returns result:",
                "    result = !binsema",
                "",
                "def acquire(binsema):",
                "    atomically when not !binsema:",
                "        !binsema = True",
                "",
                "def release(binsema):",
                "    atomically:",
                "        assert !binsema",
                "        !binsema = False",
                "",
                "def Condition() returns result:",
                "    result = bag.empty()",
                "",
                "def wait(c, lk):",
                "    var cnt = 0",
                "    let (), ctx = save():",
                "        atomically:",
                "            cnt = bag.multiplicity(!c, ctx)",
                "            !c = bag.add(!c, ctx)",
                "            !lk = False",
                "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):",
                "            !lk = True",
                "",
                "def notify(c):",
                "    atomically if !c != bag.empty():",
                "        !c = bag.remove(!c, bag.bchoose(!c))",
                "",
                "def notifyAll(c):",
                "    atomically !c = bag.empty()",
                "",
                "def Semaphore(cnt) returns result:",
                "    result = cnt",
                "",
                "def P(sema):",
                "    atomically when !sema > 0:",
                "        !sema -= 1",
                "",
                "def V(sema):",
                "    atomically !sema += 1",
                "    ",
                "def Queue() returns result:",
                "    result = []",
                "",
                "def get(q) returns result:",
                "    atomically when !q != []:",
                "        result = list.head(!q)",
                "        !q = list.tail(!q)",
                "",
                "def put(q, item):",
                "    atomically !q = list.append(!q, item)"
              ],
            "identifiers": {
                "held": "constant",
                "get": "constant",
                "initial": "local-const",
                "release": "constant",
                "bag": "module",
                "cnt": "local-const",
                "acquired": "constant",
                "tas": "constant",
                "atomic_load": "constant",
                "BinSema": "constant",
                "c": "local-const",
                "cas": "constant",
                "Semaphore": "constant",
                "this": "local-var",
                "v": "local-const",
                "Lock": "constant",
                "list": "module",
                "lk": "local-const",
                "wait": "constant",
                "binsema": "local-const",
                "p": "local-const",
                "q": "local-const",
                "atomic_store": "constant",
                "V": "constant",
                "new": "local-const",
                "P": "constant",
                "notifyAll": "constant",
                "put": "constant",
                "Queue": "constant",
                "___": "___",
                "old": "local-const",
                "Condition": "constant",
                "sema": "local-const",
                "item": "local-const",
                "notify": "constant",
                "ctx": "local-const",
                "acquire": "constant"
              }
          },
        "bdeque": {
            "file": "bdeque_impl.hny",
            "lines": [
                "from synch import Lock, acquire, release, wait, Condition, notify, notifyAll",
                "from alloc import malloc, free",
                "",
                "def Bdeque(n) returns initial:",
                "    '''",
                "    returns the initial value of an empty deque",
                "    '''",
                "    initial = { ",
                "        .data: [None,] *n, .head: 0, .tail: 1 % n, .count: 0, .size: n, ",
                "        .not_full: Condition(), .not_empty: Condition(), .lock: Lock()",
                "    }",
                "# put_condition = wait for it to be not full! not_full",
                "# put? not_full",
                "# get_condition = wait for it to be not empty! not_empty ",
                "# get? not_empty",
                "",
                "def put_left(d, v):",
                "    '''",
                "    d points to a deque and v is some value. ",
                "    If the deque is full, the operation should wait.",
                "    Put v at the right-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == d->size:",
                "        wait(?d->not_full, ?d->lock)",
                "    d->data[d->head] = v ",
                "    d->head = (d->head - 1) % d->size",
                "    d->count += 1",
                "    # notify all that it is no longer empty (if count is now 1) ",
                "    if d->count == 1:",
                "        notifyAll(?d->not_empty) ",
                "    release(?d->lock)",
                "",
                "def put_right(d, v):",
                "    '''",
                "    d points to a deque and v is some value. ",
                "    If the deque is full, the operation should wait.",
                "    Put v at the left-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == d->size:",
                "        wait(?d->not_full, ?d->lock)",
                "    d->data[d->tail] = v ",
                "    d->tail = (d->head + 1) % d->size",
                "    d->count += 1",
                "    # notify all that it is no longer empty (if count is now 1) ",
                "    if d->count == 1:",
                "        notifyAll(?d->not_empty) ",
                "    release(?d->lock)",
                "    ",
                "def get_left(d) returns left:",
                "    '''",
                "    d points to a deque. ",
                "    If deque is empty, the operation should wait.",
                "    Otherwise, it should remove and return the value at the left-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    d->head = (d->head + 1) % d->size",
                "    left = d->data[d->head]",
                "    d->count -= 1",
                "    # notify all that it is no longer full (if count is now = size) ",
                "    if d->count == (d->size - 1):",
                "        notifyAll(?d->not_full) ",
                "    release(?d->lock)",
                "",
                "def get_right(d) returns right:",
                "    '''",
                "    d points to a deque. ",
                "    If deque is empty, the operation should wait. ",
                "    Otherwise, it should remove and return the value at the right-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    d->tail = (d->head - 1) % d->size",
                "    right = d->data[d->tail]",
                "    d->count -= 1",
                "    # notify all that it is no longer full (if count is now = size) ",
                "    if d->count == (d->size - 1):",
                "        notifyAll(?d->not_full) ",
                "    release(?d->lock)",
                "",
                "def peek_left(d) returns left: ",
                "    '''",
                "    d points to a deque. ",
                "    If the deque is empty, the operation should wait. ",
                "    Otherwise, after waiting, it should return the left-most value. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    left = d->data[(d->head + 1) % d->n]",
                "    release(?d->lock)",
                "",
                "def peek_right(d) returns right: ",
                "    '''",
                "    d points to a deque. ",
                "    If the deque is empty, the operation should wait. ",
                "    Otherwise, after waiting, it should return the right-most value. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    right = d->data[(d->tail - 1) % d->size]",
                "    release(?d->lock)"
              ],
            "identifiers": {
                "d": "local-const",
                "alloc": "module",
                "Bdeque": "constant",
                "release": "imported",
                "peek_left": "constant",
                "get_left": "constant",
                "peek_right": "constant",
                "put_left": "constant",
                "n": "local-const",
                "free": "imported",
                "put_right": "constant",
                "synch": "module",
                "this": "local-var",
                "v": "local-const",
                "Lock": "imported",
                "wait": "imported",
                "malloc": "imported",
                "get_right": "constant",
                "notifyAll": "imported",
                "___": "___",
                "Condition": "imported",
                "notify": "imported",
                "acquire": "imported"
              }
          },
        "list": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/list.hny",
            "lines": [
                "# return s[b:e]",
                "def subseq(s, b, e) returns result:",
                "    result = [ s[x] for x in {b..e-1} ]",
                "",
                "def append(s, e) returns result:",
                "    result = s + [e,]",
                "",
                "def head(s) returns result:",
                "    result = s[0]",
                "",
                "builtin tail \"list$tail\"",
                "def tail(s) returns result:",
                "    result = subseq(s, 1, len(s))",
                "",
                "# sum of a list or set",
                "def sum(a) returns accu:",
                "    accu = 0",
                "    for v in a:",
                "        accu += v",
                "",
                "# convert list (or values of a dict) to a set",
                "def set(a) returns result:",
                "    result = { v for v in a }",
                "",
                "# convert set into a (sorted) list",
                "def list(a) returns result:",
                "    result = [ v for v in a ]",
                "",
                "# convert values of a dictionary into a list",
                "def values(d) returns result:",
                "    result = [ v for _:v in d ]",
                "",
                "# like Python .items()",
                "def items(d) returns result:",
                "    result = [ (k, v) for k:v in d ]",
                "",
                "# quicksort of a list",
                "def qsort(a) returns sorted:",
                "    if a == []:",
                "        sorted = []",
                "    else:",
                "        let (pivot, rest) = head(a), tail(a)",
                "        let lower = [ v for v in rest where v < pivot ]",
                "        let higher = [ v for v in rest where v >= pivot ]:",
                "            sorted = qsort(lower) + [pivot,] + qsort(higher)",
                "",
                "# like Python sorted()",
                "def sorted(d) returns result:",
                "    result = qsort(list(d))",
                "",
                "# like Python reversed()",
                "def reversed(d) returns result:",
                "    let n = len(d):",
                "        result = [ d[n-i] for i in { 1..n } ]",
                "",
                "# like Python index()",
                "def index(d, e) returns i:",
                "    i = 0",
                "    while d[i] != e:",
                "        i += 1",
                "",
                "# like Python startswith (only defined for strings)",
                "def startswith(d, prefix) returns result:",
                "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
                "",
                "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
                "def foldl(d, f, z) returns result:",
                "    result = z",
                "    for e in d:",
                "        result = f(result, e)",
                "",
                "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
                "def foldr(d, f, z) returns result:",
                "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
                "",
                "# Python functools reduce operator",
                "def reduce(f, d, z) returns result:",
                "    result = foldl(d, f, z)",
                "",
                "# Return a permutation of set s",
                "def permuted(s) returns perm:",
                "    perm = []",
                "    var c = s",
                "    while c != {}:",
                "        let e = choose c:",
                "            perm += [ e, ]",
                "            c -= { e }",
                "",
                "# Return a list of elements satisfying the condition",
                "def filter(cond, s) returns t:",
                "    t = [ e for e in s where cond(e) ]",
                "",
                "# Return a list of elements mapped by f",
                "def map(f, s) returns t:",
                "    t = [ f(e) for e in s ]"
              ],
            "identifiers": {
                "f": "local-const",
                "z": "local-const",
                "filter": "constant",
                "d": "local-const",
                "head": "constant",
                "x": "local-const",
                "set": "constant",
                "n": "local-const",
                "higher": "local-const",
                "i": "local-const",
                "startswith": "constant",
                "foldl": "constant",
                "values": "constant",
                "k": "local-const",
                "reversed": "constant",
                "e": "local-const",
                "map": "constant",
                "qsort": "constant",
                "pivot": "local-const",
                "a": "local-const",
                "c": "local-var",
                "rest": "local-const",
                "b": "local-const",
                "permuted": "constant",
                "this": "local-var",
                "v": "local-const",
                "list": "constant",
                "prefix": "local-const",
                "subseq": "constant",
                "cond": "local-const",
                "s": "local-const",
                "lower": "local-const",
                "reduce": "constant",
                "tail": "constant",
                "___": "___",
                "sum": "constant",
                "items": "constant",
                "foldr": "constant",
                "sorted": "constant",
                "index": "constant",
                "append": "constant"
              }
          }
      },
    "labels": {
        "__end__": 1968
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame subseq(s, b, e)",
            "start of method subseq"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu3",
            "initialize accumulator for list comprehension: pop a value and store in $accu3"
          ],
        [
            "LoadVar b",
            "push the value of b"
          ],
        [
            "DelVar b",
            "delete method variable b"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 26",
            "check if loop is done: pop a value and jump to 26 if the value is False"
          ],
        [
            "LoadVar $accu3",
            "load accumulator: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu3",
            "update accumulator: pop a value and store in $accu3"
          ],
        [
            "Jump 14",
            "set program counter to 14"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu3",
            "load final accumulator result: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame append(s, e)",
            "start of method append"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame head(s)",
            "start of method head"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(57)",
            "push constant PC(57)"
          ],
        [
            "Builtin(list$tail)",
            "top of stack is a built-in operation called list$tail"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame tail(s)",
            "start of method tail"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(2)",
            "call method PC(2)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame sum(a)",
            "start of method sum"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 87",
            "check if loop is done: pop a value and jump to 87 if the value is False"
          ],
        [
            "LoadVar accu",
            "push the value of accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "Jump 78",
            "set program counter to 78"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(accu)",
            "restore caller method state and push accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame set(a)",
            "start of method set"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu72",
            "initialize accumulator for set comprehension: pop a value and store in $accu72"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 107",
            "check if loop is done: pop a value and jump to 107 if the value is False"
          ],
        [
            "LoadVar $accu72",
            "load accumulator: push the value of $accu72"
          ],
        [
            "DelVar $accu72",
            "delete method variable $accu72"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu72",
            "update accumulator: pop a value and store in $accu72"
          ],
        [
            "Jump 98",
            "set program counter to 98"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu72",
            "load final accumulator result: push the value of $accu72"
          ],
        [
            "DelVar $accu72",
            "delete method variable $accu72"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame list(a)",
            "start of method list"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu88",
            "initialize accumulator for list comprehension: pop a value and store in $accu88"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 129",
            "check if loop is done: pop a value and jump to 129 if the value is False"
          ],
        [
            "LoadVar $accu88",
            "load accumulator: push the value of $accu88"
          ],
        [
            "DelVar $accu88",
            "delete method variable $accu88"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu88",
            "update accumulator: pop a value and store in $accu88"
          ],
        [
            "Jump 120",
            "set program counter to 120"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu88",
            "load final accumulator result: push the value of $accu88"
          ],
        [
            "DelVar $accu88",
            "delete method variable $accu88"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame values(d)",
            "start of method values"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu104",
            "initialize accumulator for list comprehension: pop a value and store in $accu104"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, v)",
            "get next element and assign to _:v; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 152",
            "check if loop is done: pop a value and jump to 152 if the value is False"
          ],
        [
            "LoadVar $accu104",
            "load accumulator: push the value of $accu104"
          ],
        [
            "DelVar $accu104",
            "delete method variable $accu104"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu104",
            "update accumulator: pop a value and store in $accu104"
          ],
        [
            "Jump 142",
            "set program counter to 142"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu104",
            "load final accumulator result: push the value of $accu104"
          ],
        [
            "DelVar $accu104",
            "delete method variable $accu104"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame items(d)",
            "start of method items"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu120",
            "initialize accumulator for list comprehension: pop a value and store in $accu120"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(k, v)",
            "get next element and assign to k:v; push False or True depending on success"
          ],
        [
            "JumpCond False 179",
            "check if loop is done: pop a value and jump to 179 if the value is False"
          ],
        [
            "LoadVar $accu120",
            "load accumulator: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu120",
            "update accumulator: pop a value and store in $accu120"
          ],
        [
            "Jump 165",
            "set program counter to 165"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu120",
            "load final accumulator result: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame qsort(a)",
            "start of method qsort"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 195",
            "pop a value and jump to 195 if the value is False"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "Jump 261",
            "set program counter to 261"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Apply PC(45)",
            "call method PC(45)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Apply PC(57)",
            "call method PC(57)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (pivot, rest)",
            "pop a value and store in (pivot, rest)"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu155",
            "initialize accumulator for list comprehension: pop a value and store in $accu155"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 222",
            "check if loop is done: pop a value and jump to 222 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 208",
            "pop a value and jump to 208 if the value is False"
          ],
        [
            "LoadVar $accu155",
            "load accumulator: push the value of $accu155"
          ],
        [
            "DelVar $accu155",
            "delete method variable $accu155"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu155",
            "update accumulator: pop a value and store in $accu155"
          ],
        [
            "Jump 208",
            "set program counter to 208"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu155",
            "load final accumulator result: push the value of $accu155"
          ],
        [
            "DelVar $accu155",
            "delete method variable $accu155"
          ],
        [
            "StoreVar lower",
            "pop a value and store in lower"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu172",
            "initialize accumulator for list comprehension: pop a value and store in $accu172"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "DelVar rest",
            "delete method variable rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 245",
            "check if loop is done: pop a value and jump to 245 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 231",
            "pop a value and jump to 231 if the value is False"
          ],
        [
            "LoadVar $accu172",
            "load accumulator: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu172",
            "update accumulator: pop a value and store in $accu172"
          ],
        [
            "Jump 231",
            "set program counter to 231"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu172",
            "load final accumulator result: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "StoreVar higher",
            "pop a value and store in higher"
          ],
        [
            "LoadVar lower",
            "push the value of lower"
          ],
        [
            "DelVar lower",
            "delete method variable lower"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "DelVar pivot",
            "delete method variable pivot"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar higher",
            "push the value of higher"
          ],
        [
            "DelVar higher",
            "delete method variable higher"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "ReturnOp(sorted)",
            "restore caller method state and push sorted"
          ],
        [
            "DelVar sorted",
            "delete method variable sorted"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame sorted(d)",
            "start of method sorted"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(113)",
            "call method PC(113)"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame reversed(d)",
            "start of method reversed"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu211",
            "initialize accumulator for list comprehension: pop a value and store in $accu211"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 298",
            "check if loop is done: pop a value and jump to 298 if the value is False"
          ],
        [
            "LoadVar $accu211",
            "load accumulator: push the value of $accu211"
          ],
        [
            "DelVar $accu211",
            "delete method variable $accu211"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu211",
            "update accumulator: pop a value and store in $accu211"
          ],
        [
            "Jump 284",
            "set program counter to 284"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "LoadVar $accu211",
            "load final accumulator result: push the value of $accu211"
          ],
        [
            "DelVar $accu211",
            "delete method variable $accu211"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame index(d, e)",
            "start of method index"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 322",
            "pop a value and jump to 322 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 309",
            "set program counter to 309"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "ReturnOp(i)",
            "restore caller method state and push i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame startswith(d, prefix)",
            "start of method startswith"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "JumpCond False 368",
            "pop a value and jump to 368 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu257",
            "initialize accumulator for list comprehension: pop a value and store in $accu257"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 361",
            "check if loop is done: pop a value and jump to 361 if the value is False"
          ],
        [
            "LoadVar $accu257",
            "load accumulator: push the value of $accu257"
          ],
        [
            "DelVar $accu257",
            "delete method variable $accu257"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu257",
            "update accumulator: pop a value and store in $accu257"
          ],
        [
            "Jump 344",
            "set program counter to 344"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "LoadVar $accu257",
            "load final accumulator result: push the value of $accu257"
          ],
        [
            "DelVar $accu257",
            "delete method variable $accu257"
          ],
        [
            "1-ary all",
            "pop 1 value and push the result of applying all"
          ],
        [
            "Jump 371",
            "set program counter to 371"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame foldl(d, f, z)",
            "start of method foldl"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 396",
            "check if loop is done: pop a value and jump to 396 if the value is False"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 382",
            "set program counter to 382"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame foldr(d, f, z)",
            "start of method foldr"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 412",
            "pop a value and jump to 412 if the value is False"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "Jump 434",
            "set program counter to 434"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(57)",
            "call method PC(57)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(400)",
            "call method PC(400)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame reduce(f, d, z)",
            "start of method reduce"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(374)",
            "call method PC(374)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame permuted(s)",
            "start of method permuted"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 482",
            "pop a value and jump to 482 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar e",
            "pop a value and store in e"
          ],
        [
            "LoadVar perm",
            "push the value of perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "Jump 459",
            "set program counter to 459"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(perm)",
            "restore caller method state and push perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame filter(cond, s)",
            "start of method filter"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu377",
            "initialize accumulator for list comprehension: pop a value and store in $accu377"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 507",
            "check if loop is done: pop a value and jump to 507 if the value is False"
          ],
        [
            "LoadVar cond",
            "push the value of cond"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 492",
            "pop a value and jump to 492 if the value is False"
          ],
        [
            "LoadVar $accu377",
            "load accumulator: push the value of $accu377"
          ],
        [
            "DelVar $accu377",
            "delete method variable $accu377"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu377",
            "update accumulator: pop a value and store in $accu377"
          ],
        [
            "Jump 492",
            "set program counter to 492"
          ],
        [
            "DelVar cond",
            "delete method variable cond"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "LoadVar $accu377",
            "load final accumulator result: push the value of $accu377"
          ],
        [
            "DelVar $accu377",
            "delete method variable $accu377"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame map(f, s)",
            "start of method map"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu398",
            "initialize accumulator for list comprehension: pop a value and store in $accu398"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 533",
            "check if loop is done: pop a value and jump to 533 if the value is False"
          ],
        [
            "LoadVar $accu398",
            "load accumulator: push the value of $accu398"
          ],
        [
            "DelVar $accu398",
            "delete method variable $accu398"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu398",
            "update accumulator: pop a value and store in $accu398"
          ],
        [
            "Jump 521",
            "set program counter to 521"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar $accu398",
            "load final accumulator result: push the value of $accu398"
          ],
        [
            "DelVar $accu398",
            "delete method variable $accu398"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame empty()",
            "start of method empty"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame fromSet(s)",
            "start of method fromSet"
          ],
        [
            "Push {:}",
            "initialize accumulator for dict comprehension: push constant {:}"
          ],
        [
            "StoreVar $accu422",
            "initialize accumulator for dict comprehension: pop a value and store in $accu422"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(elt)",
            "get next element and assign to elt; push False or True depending on success"
          ],
        [
            "JumpCond False 563",
            "check if loop is done: pop a value and jump to 563 if the value is False"
          ],
        [
            "LoadVar $accu422",
            "load accumulator: push the value of $accu422"
          ],
        [
            "DelVar $accu422",
            "delete method variable $accu422"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar $accu422",
            "update accumulator: pop a value and store in $accu422"
          ],
        [
            "Jump 553",
            "set program counter to 553"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "LoadVar $accu422",
            "load final accumulator result: push the value of $accu422"
          ],
        [
            "DelVar $accu422",
            "delete method variable $accu422"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame fromList(a)",
            "start of method fromList"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 599",
            "check if loop is done: pop a value and jump to 599 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 592",
            "pop a value and jump to 592 if the value is False"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 576",
            "set program counter to 576"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 576",
            "set program counter to 576"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Builtin(bag$multiplicity)",
            "top of stack is a built-in operation called bag$multiplicity"
          ],
        [
            "Jump 624",
            "jump over method definition: set program counter to 624"
          ],
        [
            "Frame multiplicity(bg, elt)",
            "start of method multiplicity"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 618",
            "pop a value and jump to 618 if the value is False"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 622",
            "set program counter to 622"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(627)",
            "push constant PC(627)"
          ],
        [
            "Builtin(bag$size)",
            "top of stack is a built-in operation called bag$size"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame size(bg)",
            "start of method size"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, c)",
            "get next element and assign to _:c; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 643",
            "check if loop is done: pop a value and jump to 643 if the value is False"
          ],
        [
            "LoadVar count",
            "push the value of count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 633",
            "set program counter to 633"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(649)",
            "push constant PC(649)"
          ],
        [
            "Builtin(bag$bmin)",
            "top of stack is a built-in operation called bag$bmin"
          ],
        [
            "Jump 665",
            "jump over method definition: set program counter to 665"
          ],
        [
            "Frame bmin(bg)",
            "start of method bmin"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary min",
            "pop 1 value and push the result of applying min"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(668)",
            "push constant PC(668)"
          ],
        [
            "Builtin(bag$bmax)",
            "top of stack is a built-in operation called bag$bmax"
          ],
        [
            "Jump 693",
            "jump over method definition: set program counter to 693"
          ],
        [
            "Frame bmax(bg)",
            "start of method bmax"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Jump 693",
            "jump over method definition: set program counter to 693"
          ],
        [
            "Frame bchoose(bg)",
            "start of method bchoose"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar elt",
            "pop a value and store in elt"
          ],
        [
            "ReturnOp(elt)",
            "restore caller method state and push elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push PC(696)",
            "push constant PC(696)"
          ],
        [
            "Builtin(bag$add)",
            "top of stack is a built-in operation called bag$add"
          ],
        [
            "Jump 722",
            "jump over method definition: set program counter to 722"
          ],
        [
            "Frame add(bg, elt)",
            "start of method add"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 715",
            "pop a value and jump to 715 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 721",
            "set program counter to 721"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(725)",
            "push constant PC(725)"
          ],
        [
            "Builtin(bag$remove)",
            "top of stack is a built-in operation called bag$remove"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame remove(bg, elt)",
            "start of method remove"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 765",
            "pop a value and jump to 765 if the value is False"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 765",
            "pop a value and jump to 765 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame combinations(bg, k)",
            "start of method combinations"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 781",
            "pop a value and jump to 781 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(627)",
            "call method PC(627)"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 794",
            "pop a value and jump to 794 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 806",
            "pop a value and jump to 806 if the value is False"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(649)",
            "call method PC(649)"
          ],
        [
            "StoreVar hd",
            "pop a value and store in hd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(725)",
            "call method PC(725)"
          ],
        [
            "StoreVar tl",
            "pop a value and store in tl"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu645",
            "initialize accumulator for set comprehension: pop a value and store in $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(768)",
            "call method PC(768)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 842",
            "check if loop is done: pop a value and jump to 842 if the value is False"
          ],
        [
            "LoadVar $accu645",
            "load accumulator: push the value of $accu645"
          ],
        [
            "DelVar $accu645",
            "delete method variable $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(696)",
            "call method PC(696)"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu645",
            "update accumulator: pop a value and store in $accu645"
          ],
        [
            "Jump 828",
            "set program counter to 828"
          ],
        [
            "DelVar hd",
            "delete method variable hd"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu645",
            "load final accumulator result: push the value of $accu645"
          ],
        [
            "DelVar $accu645",
            "delete method variable $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "DelVar tl",
            "delete method variable tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(768)",
            "call method PC(768)"
          ],
        [
            "2-ary |",
            "pop 2 values and push the result of applying |"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame atomic_load(p)",
            "start of method atomic_load"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar current",
            "pop a value and store in current"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(current)",
            "restore caller method state and push current"
          ],
        [
            "DelVar current",
            "delete method variable current"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame atomic_store(p, v)",
            "start of method atomic_store"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame tas(lk)",
            "start of method tas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar oldvalue",
            "pop a value and store in oldvalue"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(oldvalue)",
            "restore caller method state and push oldvalue"
          ],
        [
            "DelVar oldvalue",
            "delete method variable oldvalue"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame cas(p, old, new)",
            "start of method cas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar old",
            "push the value of old"
          ],
        [
            "DelVar old",
            "delete method variable old"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "StoreVar success",
            "pop a value and store in success"
          ],
        [
            "LoadVar success",
            "push the value of success"
          ],
        [
            "JumpCond False 906",
            "pop a value and jump to 906 if the value is False"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar new",
            "push the value of new"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(success)",
            "restore caller method state and push success"
          ],
        [
            "DelVar success",
            "delete method variable success"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame BinSema(initial)",
            "start of method BinSema"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "DelVar initial",
            "delete method variable initial"
          ],
        [
            "StoreVar sema",
            "pop a value and store in sema"
          ],
        [
            "ReturnOp(sema)",
            "restore caller method state and push sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Lock()",
            "start of method Lock"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Apply PC(912)",
            "call method PC(912)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame acquired(binsema)",
            "start of method acquired"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame held(binsema)",
            "start of method held"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame acquire(binsema)",
            "start of method acquire"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 962",
            "pop a value and jump to 962 if the value is False"
          ],
        [
            "Jump 965",
            "set program counter to 965"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 955",
            "set program counter to 955"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame release(binsema)",
            "start of method release"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Condition()",
            "start of method Condition"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame wait(c, lk)",
            "start of method wait"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Save",
            "pop a value and save context"
          ],
        [
            "Continue",
            "a no-op, must follow a Stop or Save operation"
          ],
        [
            "StoreVar ((), ctx)",
            "pop a value and store in ((), ctx)"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(696)",
            "push constant PC(696)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 1050",
            "pop a value and jump to 1050 if the value is False"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "Jump 1051",
            "set program counter to 1051"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 1056",
            "pop a value and jump to 1056 if the value is False"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "DelVar ctx",
            "delete method variable ctx"
          ],
        [
            "Jump 1059",
            "set program counter to 1059"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1032",
            "set program counter to 1032"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame notify(c)",
            "start of method notify"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1093",
            "pop a value and jump to 1093 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(725)",
            "push constant PC(725)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push PC(685)",
            "push constant PC(685)"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame notifyAll(c)",
            "start of method notifyAll"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Semaphore(cnt)",
            "start of method Semaphore"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame P(sema)",
            "start of method P"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 1125",
            "pop a value and jump to 1125 if the value is False"
          ],
        [
            "Jump 1128",
            "set program counter to 1128"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1117",
            "set program counter to 1117"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame V(sema)",
            "start of method V"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Queue()",
            "start of method Queue"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame get(q)",
            "start of method get"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1167",
            "pop a value and jump to 1167 if the value is False"
          ],
        [
            "Jump 1170",
            "set program counter to 1170"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1158",
            "set program counter to 1158"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "Push PC(45)",
            "push constant PC(45)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(57)",
            "push constant PC(57)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame put(q, item)",
            "start of method put"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(33)",
            "push constant PC(33)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar item",
            "push the value of item"
          ],
        [
            "DelVar item",
            "delete method variable item"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Store alloc$pool",
            "pop a value and store it in shared variable pool"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame malloc(v)",
            "start of method malloc"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "StoreVar copy",
            "pop a value and store in copy"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(copy)",
            "restore caller method state and push copy"
          ],
        [
            "DelVar copy",
            "delete method variable copy"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame free(r)",
            "start of method free"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar r",
            "push the value of r"
          ],
        [
            "DelVar r",
            "delete method variable r"
          ],
        [
            "Del",
            "pop an address and delete the shared variable at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame leak_check()",
            "start of method leak_check"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load alloc$pool",
            "push value of shared variable pool"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Push \"alloc_leak\"",
            "push constant \"alloc_leak\""
          ],
        [
            "Assert2",
            "pop a value and a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame Bdeque(n)",
            "start of method Bdeque"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary *",
            "pop 2 values and push the result of applying *"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(989)",
            "call method PC(989)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(989)",
            "call method PC(989)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(931)",
            "call method PC(931)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar initial",
            "pop a value and store in initial"
          ],
        [
            "ReturnOp(initial)",
            "restore caller method state and push initial"
          ],
        [
            "DelVar initial",
            "delete method variable initial"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame put_left(d, v)",
            "start of method put_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1318",
            "pop a value and jump to 1318 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1296",
            "set program counter to 1296"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1364",
            "pop a value and jump to 1364 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame put_right(d, v)",
            "start of method put_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1400",
            "pop a value and jump to 1400 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1378",
            "set program counter to 1378"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1446",
            "pop a value and jump to 1446 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame get_left(d)",
            "start of method get_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1479",
            "pop a value and jump to 1479 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1460",
            "set program counter to 1460"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar left",
            "pop a value and store in left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1529",
            "pop a value and jump to 1529 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(left)",
            "restore caller method state and push left"
          ],
        [
            "DelVar left",
            "delete method variable left"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame get_right(d)",
            "start of method get_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1563",
            "pop a value and jump to 1563 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1544",
            "set program counter to 1544"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar right",
            "pop a value and store in right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1613",
            "pop a value and jump to 1613 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(right)",
            "restore caller method state and push right"
          ],
        [
            "DelVar right",
            "delete method variable right"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame peek_left(d)",
            "start of method peek_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1647",
            "pop a value and jump to 1647 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1628",
            "set program counter to 1628"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"n\"",
            "push constant \"n\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar left",
            "pop a value and store in left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(left)",
            "restore caller method state and push left"
          ],
        [
            "DelVar left",
            "delete method variable left"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame peek_right(d)",
            "start of method peek_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1698",
            "pop a value and jump to 1698 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1679",
            "set program counter to 1679"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar right",
            "pop a value and store in right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(right)",
            "restore caller method state and push right"
          ],
        [
            "DelVar right",
            "delete method variable right"
          ],
        [
            "Push PC(1250)",
            "push constant PC(1250)"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store d",
            "pop a value and store it in shared variable d"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame put_left_test(self)",
            "start of method put_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call left put\"",
            "push constant \"call left put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1290)",
            "push constant PC(1290)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push \"left\"",
            "push constant \"left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done left put\"",
            "push constant \"done left put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame put_right_test(self)",
            "start of method put_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call right put\"",
            "push constant \"call right put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1372)",
            "push constant PC(1372)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push \"rights\"",
            "push constant \"rights\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done right put\"",
            "push constant \"done right put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame get_left_test(self)",
            "start of method get_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call left get\"",
            "push constant \"call left get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1454)",
            "push constant PC(1454)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done left get\"",
            "push constant \"done left get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame get_right_test(self)",
            "start of method get_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call right get\"",
            "push constant \"call right get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1538)",
            "push constant PC(1538)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done right get\"",
            "push constant \"done right get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame peek_left_test(self)",
            "start of method peek_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call peek left\"",
            "push constant \"call peek left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1622)",
            "push constant PC(1622)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done peek left\"",
            "push constant \"done peek left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame peek_right_test(self)",
            "start of method peek_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call peek right\"",
            "push constant \"call peek right\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1673)",
            "push constant PC(1673)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done peek right\"",
            "push constant \"done peek right\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1895",
            "check if loop is done: pop a value and jump to 1895 if the value is False"
          ],
        [
            "Push ?PC(1729)",
            "push constant ?PC(1729)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1886",
            "set program counter to 1886"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1909",
            "check if loop is done: pop a value and jump to 1909 if the value is False"
          ],
        [
            "Push ?PC(1758)",
            "push constant ?PC(1758)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1900",
            "set program counter to 1900"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1923",
            "check if loop is done: pop a value and jump to 1923 if the value is False"
          ],
        [
            "Push ?PC(1787)",
            "push constant ?PC(1787)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1914",
            "set program counter to 1914"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1937",
            "check if loop is done: pop a value and jump to 1937 if the value is False"
          ],
        [
            "Push ?PC(1811)",
            "push constant ?PC(1811)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1928",
            "set program counter to 1928"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1951",
            "check if loop is done: pop a value and jump to 1951 if the value is False"
          ],
        [
            "Push ?PC(1835)",
            "push constant ?PC(1835)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1942",
            "set program counter to 1942"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1965",
            "check if loop is done: pop a value and jump to 1965 if the value is False"
          ],
        [
            "Push ?PC(1859)",
            "push constant ?PC(1859)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1956",
            "set program counter to 1956"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 33,
            "column": 14
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 33,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 48
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 30
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 75,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 89,
            "column": 84
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 90,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 94
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 96
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 42
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 55,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 43
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 17,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 21,
            "column": 19
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 33,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 55
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 57,
            "column": 44
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 66,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 69,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 73
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 39
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 41,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 74
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 53,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 29,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 37,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 34,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 55,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 6,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 55,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 61
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 69
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 37,
            "column": 35
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 59,
            "stmt": [
                57,
                16,
                59,
                6
              ],
            "line": 57,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 33,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 39,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 41
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 69,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 24
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 26,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 49,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 60,
            "column": 60
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 67,
            "column": 63
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 30,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 42,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 55,
            "column": 54
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 55,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 62,
            "column": 58
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 70,
            "column": 69
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 70,
            "column": 65
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 8,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 8,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 31,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 31,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 31,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 31,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 32,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 32,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 25
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 32,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 40
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 44,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 44,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 39,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 30,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 40,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 30,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 40,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 34,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 33,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 33,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 31,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 41,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "(s, b, e)",
            "name": "subseq",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "value": "b",
            "op": "LoadVar"
          },
        {
            "value": "b",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "26",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "(s, e)",
            "name": "append",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "head",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Push"
          },
        {
            "value": "list$tail",
            "op": "Builtin"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "tail",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "sum",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "87",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "accu",
            "op": "LoadVar"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "pc": "78",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "accu",
            "op": "Return"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "set",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu72",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "107",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu72",
            "op": "LoadVar"
          },
        {
            "value": "$accu72",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu72",
            "op": "StoreVar"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu72",
            "op": "LoadVar"
          },
        {
            "value": "$accu72",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "list",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu88",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "129",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu88",
            "op": "LoadVar"
          },
        {
            "value": "$accu88",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu88",
            "op": "StoreVar"
          },
        {
            "pc": "120",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu88",
            "op": "LoadVar"
          },
        {
            "value": "$accu88",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "values",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu104",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "152",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu104",
            "op": "LoadVar"
          },
        {
            "value": "$accu104",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu104",
            "op": "StoreVar"
          },
        {
            "pc": "142",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu104",
            "op": "LoadVar"
          },
        {
            "value": "$accu104",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "items",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "k",
            "op": "Cut"
          },
        {
            "pc": "179",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "pc": "165",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "qsort",
            "op": "Frame"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "195",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "pc": "261",
            "op": "Jump"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(pivot, rest)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu155",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "222",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "208",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu155",
            "op": "LoadVar"
          },
        {
            "value": "$accu155",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu155",
            "op": "StoreVar"
          },
        {
            "pc": "208",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu155",
            "op": "LoadVar"
          },
        {
            "value": "$accu155",
            "op": "DelVar"
          },
        {
            "value": "lower",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": "rest",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "245",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "231",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "pc": "231",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "higher",
            "op": "StoreVar"
          },
        {
            "value": "lower",
            "op": "LoadVar"
          },
        {
            "value": "lower",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "higher",
            "op": "LoadVar"
          },
        {
            "value": "higher",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "result": "sorted",
            "op": "Return"
          },
        {
            "value": "sorted",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "sorted",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "113"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "reversed",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu211",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "298",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu211",
            "op": "LoadVar"
          },
        {
            "value": "$accu211",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu211",
            "op": "StoreVar"
          },
        {
            "pc": "284",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": "$accu211",
            "op": "LoadVar"
          },
        {
            "value": "$accu211",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, e)",
            "name": "index",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "322",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "309",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "result": "i",
            "op": "Return"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, prefix)",
            "name": "startswith",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "368",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu257",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "361",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu257",
            "op": "LoadVar"
          },
        {
            "value": "$accu257",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu257",
            "op": "StoreVar"
          },
        {
            "pc": "344",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": "$accu257",
            "op": "LoadVar"
          },
        {
            "value": "$accu257",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "all",
            "op": "Nary"
          },
        {
            "pc": "371",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldl",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "396",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "382",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldr",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "412",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "pc": "434",
            "op": "Jump"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "400"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(f, d, z)",
            "name": "reduce",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "374"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "permuted",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "482",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "e",
            "op": "StoreVar"
          },
        {
            "value": "perm",
            "op": "LoadVar"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "pc": "459",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "perm",
            "op": "Return"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(cond, s)",
            "name": "filter",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu377",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "507",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "cond",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "492",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu377",
            "op": "LoadVar"
          },
        {
            "value": "$accu377",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu377",
            "op": "StoreVar"
          },
        {
            "pc": "492",
            "op": "Jump"
          },
        {
            "value": "cond",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "$accu377",
            "op": "LoadVar"
          },
        {
            "value": "$accu377",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(f, s)",
            "name": "map",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu398",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "533",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu398",
            "op": "LoadVar"
          },
        {
            "value": "$accu398",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu398",
            "op": "StoreVar"
          },
        {
            "pc": "521",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "$accu398",
            "op": "LoadVar"
          },
        {
            "value": "$accu398",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "empty",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "fromSet",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu422",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "Cut"
          },
        {
            "pc": "563",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu422",
            "op": "LoadVar"
          },
        {
            "value": "$accu422",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "$accu422",
            "op": "StoreVar"
          },
        {
            "pc": "553",
            "op": "Jump"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": "$accu422",
            "op": "LoadVar"
          },
        {
            "value": "$accu422",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "fromList",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "599",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "592",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "576",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "576",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": "bag$multiplicity",
            "op": "Builtin"
          },
        {
            "pc": "624",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "multiplicity",
            "op": "Frame"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "618",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "622",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "627"
              },
            "op": "Push"
          },
        {
            "value": "bag$size",
            "op": "Builtin"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "size",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "c",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "643",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "count",
            "op": "LoadVar"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "633",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmin",
            "op": "Builtin"
          },
        {
            "pc": "665",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmin",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "min",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "668"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmax",
            "op": "Builtin"
          },
        {
            "pc": "693",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmax",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "pc": "693",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bchoose",
            "op": "Frame"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": "elt",
            "op": "StoreVar"
          },
        {
            "result": "elt",
            "op": "Return"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Push"
          },
        {
            "value": "bag$add",
            "op": "Builtin"
          },
        {
            "pc": "722",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "add",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "715",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "721",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Push"
          },
        {
            "value": "bag$remove",
            "op": "Builtin"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "remove",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "765",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "765",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(bg, k)",
            "name": "combinations",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "781",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "627"
              },
            "op": "Apply"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "794",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "806",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Apply"
          },
        {
            "value": "hd",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Apply"
          },
        {
            "value": "tl",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu645",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "768"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "842",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu645",
            "op": "LoadVar"
          },
        {
            "value": "$accu645",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu645",
            "op": "StoreVar"
          },
        {
            "pc": "828",
            "op": "Jump"
          },
        {
            "value": "hd",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu645",
            "op": "LoadVar"
          },
        {
            "value": "$accu645",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "value": "tl",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "768"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "|",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "p",
            "name": "atomic_load",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "current",
            "op": "StoreVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "current",
            "op": "Return"
          },
        {
            "value": "current",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(p, v)",
            "name": "atomic_store",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "lk",
            "name": "tas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "oldvalue",
            "op": "StoreVar"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "oldvalue",
            "op": "Return"
          },
        {
            "value": "oldvalue",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(p, old, new)",
            "name": "cas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "old",
            "op": "LoadVar"
          },
        {
            "value": "old",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": "success",
            "op": "StoreVar"
          },
        {
            "value": "success",
            "op": "LoadVar"
          },
        {
            "pc": "906",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "new",
            "op": "LoadVar"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "success",
            "op": "Return"
          },
        {
            "value": "success",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "initial",
            "name": "BinSema",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": "initial",
            "op": "DelVar"
          },
        {
            "value": "sema",
            "op": "StoreVar"
          },
        {
            "result": "sema",
            "op": "Return"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Lock",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "912"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquired",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "held",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquire",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "962",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "965",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "955",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "release",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Condition",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(c, lk)",
            "name": "wait",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "op": "Save"
          },
        {
            "op": "Continue"
          },
        {
            "value": "((), ctx)",
            "op": "StoreVar"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "1050",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "1051",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "1056",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "ctx",
            "op": "DelVar"
          },
        {
            "pc": "1059",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1032",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notify",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1093",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "685"
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notifyAll",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "cnt",
            "name": "Semaphore",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "P",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "1125",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1128",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1117",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "V",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Queue",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "q",
            "name": "get",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1167",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1170",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1158",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(q, item)",
            "name": "put",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "33"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "item",
            "op": "LoadVar"
          },
        {
            "value": "item",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "v",
            "name": "malloc",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "copy",
            "op": "StoreVar"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "copy",
            "op": "Return"
          },
        {
            "value": "copy",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "r",
            "name": "free",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "r",
            "op": "LoadVar"
          },
        {
            "value": "r",
            "op": "DelVar"
          },
        {
            "op": "Del"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "leak_check",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "alloc_leak"
              },
            "op": "Push"
          },
        {
            "op": "Assert2"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "n",
            "name": "Bdeque",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "*",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "989"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "989"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "931"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "initial",
            "op": "StoreVar"
          },
        {
            "result": "initial",
            "op": "Return"
          },
        {
            "value": "initial",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "put_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1318",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1296",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1364",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "put_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1400",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1378",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1446",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "get_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1479",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1460",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "left",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1529",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "left",
            "op": "Return"
          },
        {
            "value": "left",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "get_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1563",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1544",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "right",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1613",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "right",
            "op": "Return"
          },
        {
            "value": "right",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "peek_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1647",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1628",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "n"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "left",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "left",
            "op": "Return"
          },
        {
            "value": "left",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "peek_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1698",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1679",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "right",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "right",
            "op": "Return"
          },
        {
            "value": "right",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "1250"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "d"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "put_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call left put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1290"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done left put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "put_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call right put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1372"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "rights"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done right put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "get_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call left get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1454"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done left get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "get_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call right get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1538"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done right get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "peek_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call peek left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1622"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done peek left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "peek_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call peek right"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1673"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done peek right"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1895",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1729"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1886",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1909",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1758"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1900",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1923",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1787"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1914",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1937",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1811"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1928",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1951",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1835"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1942",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1965",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1859"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1956",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "1075a134a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Jump 54",
          "explain": "jump over method definition: set program counter to 54",
          "explain2": { "text": "jump over method definition: set program counter to 54", "args": [] },
          "npc": "54",
          "push": [ ],
          "pc": "1"
        },

        {
          "code": "Push PC(57)",
          "explain": "push constant PC(57)",
          "explain2": { "text": "push constant PC(57)", "args": [] },
          "npc": "55",
          "push": [ { "type": "pc", "value": "57" } ],
          "pc": "54"
        },

        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc () and bind to built-in method list$tail",
          "explain2": { "text": "pop pc () and bind to built-in method list$tail", "args": [ { "type": "pc", "value": "57" } ] },
          "npc": "56",
          "pop": "1",
          "push": [ ],
          "pc": "55"
        },

        {
          "code": "Jump 602",
          "explain": "jump over method definition: set program counter to 602",
          "explain2": { "text": "jump over method definition: set program counter to 602", "args": [] },
          "npc": "602",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push PC(605)",
          "explain": "push constant PC(605)",
          "explain2": { "text": "push constant PC(605)", "args": [] },
          "npc": "603",
          "push": [ { "type": "pc", "value": "605" } ],
          "pc": "602"
        },

        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc () and bind to built-in method bag$multiplicity",
          "explain2": { "text": "pop pc () and bind to built-in method bag$multiplicity", "args": [ { "type": "pc", "value": "605" } ] },
          "npc": "604",
          "pop": "1",
          "push": [ ],
          "pc": "603"
        },

        {
          "code": "Jump 624",
          "explain": "jump over method definition: set program counter to 624",
          "explain2": { "text": "jump over method definition: set program counter to 624", "args": [] },
          "npc": "624",
          "push": [ ],
          "pc": "604"
        },

        {
          "code": "Push PC(627)",
          "explain": "push constant PC(627)",
          "explain2": { "text": "push constant PC(627)", "args": [] },
          "npc": "625",
          "push": [ { "type": "pc", "value": "627" } ],
          "pc": "624"
        },

        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc () and bind to built-in method bag$size",
          "explain2": { "text": "pop pc () and bind to built-in method bag$size", "args": [ { "type": "pc", "value": "627" } ] },
          "npc": "626",
          "pop": "1",
          "push": [ ],
          "pc": "625"
        },

        {
          "code": "Jump 646",
          "explain": "jump over method definition: set program counter to 646",
          "explain2": { "text": "jump over method definition: set program counter to 646", "args": [] },
          "npc": "646",
          "push": [ ],
          "pc": "626"
        },

        {
          "code": "Push PC(649)",
          "explain": "push constant PC(649)",
          "explain2": { "text": "push constant PC(649)", "args": [] },
          "npc": "647",
          "push": [ { "type": "pc", "value": "649" } ],
          "pc": "646"
        },

        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc () and bind to built-in method bag$bmin",
          "explain2": { "text": "pop pc () and bind to built-in method bag$bmin", "args": [ { "type": "pc", "value": "649" } ] },
          "npc": "648",
          "pop": "1",
          "push": [ ],
          "pc": "647"
        },

        {
          "code": "Jump 665",
          "explain": "jump over method definition: set program counter to 665",
          "explain2": { "text": "jump over method definition: set program counter to 665", "args": [] },
          "npc": "665",
          "push": [ ],
          "pc": "648"
        },

        {
          "code": "Push PC(668)",
          "explain": "push constant PC(668)",
          "explain2": { "text": "push constant PC(668)", "args": [] },
          "npc": "666",
          "push": [ { "type": "pc", "value": "668" } ],
          "pc": "665"
        },

        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc () and bind to built-in method bag$bmax",
          "explain2": { "text": "pop pc () and bind to built-in method bag$bmax", "args": [ { "type": "pc", "value": "668" } ] },
          "npc": "667",
          "pop": "1",
          "push": [ ],
          "pc": "666"
        },

        {
          "code": "Jump 693",
          "explain": "jump over method definition: set program counter to 693",
          "explain2": { "text": "jump over method definition: set program counter to 693", "args": [] },
          "npc": "693",
          "push": [ ],
          "pc": "667"
        },

        {
          "code": "Push PC(696)",
          "explain": "push constant PC(696)",
          "explain2": { "text": "push constant PC(696)", "args": [] },
          "npc": "694",
          "push": [ { "type": "pc", "value": "696" } ],
          "pc": "693"
        },

        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc () and bind to built-in method bag$add",
          "explain2": { "text": "pop pc () and bind to built-in method bag$add", "args": [ { "type": "pc", "value": "696" } ] },
          "npc": "695",
          "pop": "1",
          "push": [ ],
          "pc": "694"
        },

        {
          "code": "Jump 722",
          "explain": "jump over method definition: set program counter to 722",
          "explain2": { "text": "jump over method definition: set program counter to 722", "args": [] },
          "npc": "722",
          "push": [ ],
          "pc": "695"
        },

        {
          "code": "Push PC(725)",
          "explain": "push constant PC(725)",
          "explain2": { "text": "push constant PC(725)", "args": [] },
          "npc": "723",
          "push": [ { "type": "pc", "value": "725" } ],
          "pc": "722"
        },

        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc () and bind to built-in method bag$remove",
          "explain2": { "text": "pop pc () and bind to built-in method bag$remove", "args": [ { "type": "pc", "value": "725" } ] },
          "npc": "724",
          "pop": "1",
          "push": [ ],
          "pc": "723"
        },

        {
          "code": "Jump 1205",
          "explain": "jump over method definition: set program counter to 1205",
          "explain2": { "text": "jump over method definition: set program counter to 1205", "args": [] },
          "npc": "1205",
          "push": [ ],
          "pc": "724"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1206",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1205"
        },

        {
          "code": "Store alloc$pool",
          "explain": "pop value ({:}) and store into variable alloc$pool",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ] },
          "shared": { "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "1207",
          "pop": "1",
          "push": [ ],
          "pc": "1206"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1208",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1207"
        },

        {
          "code": "Store alloc$next",
          "explain": "pop value (0) and store into variable alloc$next",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$next" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "1209",
          "pop": "1",
          "push": [ ],
          "pc": "1208"
        },

        {
          "code": "Jump 1723",
          "explain": "jump over method definition: set program counter to 1723",
          "explain2": { "text": "jump over method definition: set program counter to 1723", "args": [] },
          "npc": "1723",
          "push": [ ],
          "pc": "1209"
        },

        {
          "code": "Push PC(1250)",
          "explain": "push program counter constant 1250 ()",
          "explain2": { "text": "push program counter constant 1250 ()", "args": [ { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1724",
          "push": [ { "type": "pc", "value": "1250" } ],
          "pc": "1723"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "1725",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1724"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (2, PC(1250)); push result (?PC(1250)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "pc", "value": "1250" }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1726",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1725"
        },

        {
          "code": "Load",
          "explain": "pop an argument (2) and call method (1250: \"Bdeque\")",
          "explain2": { "text": "pop an argument (#+) and call method (1250: #+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1250",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "27618" }, { "type": "int", "value": "2" } ],
          "pc": "1726"
        },

        {
          "code": "Frame Bdeque(n)",
          "explain": "pop argument (2), assign to n, and run method \"Bdeque\"",
          "explain2": { "text": "pop argument (#+), assign to n, and run method #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1251",
          "local": { "n": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1250"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1252",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1251"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1253",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1252"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1254",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1253"
        },

        {
          "code": "Push None",
          "explain": "push constant None",
          "explain2": { "text": "push constant None", "args": [] },
          "npc": "1255",
          "push": [ { "type": "address" } ],
          "pc": "1254"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (None, []); insert first value into the second; push result ([None])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address" } ] } ] },
          "npc": "1256",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address" } ] } ],
          "pc": "1255"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1257",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1256"
        },

        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [None]); create multiple copies of list; push result ([None, None])",
          "explain2": { "text": "pop 2 values (#+, #+); create multiple copies of list; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "address" } ] }, { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } ] },
          "npc": "1258",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } ],
          "pc": "1257"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([None, None], \"data\", {:}); add key/value pair to dictionary; push result ({ \"data\": [None, None] })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] }, { "type": "atom", "value": "data" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] } ] },
          "npc": "1259",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] } ],
          "pc": "1258"
        },

        {
          "code": "Push \"head\"",
          "explain": "push constant \"head\"",
          "explain2": { "text": "push constant \"head\"", "args": [] },
          "npc": "1260",
          "push": [ { "type": "atom", "value": "head" } ],
          "pc": "1259"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1261",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1260"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"head\", { \"data\": [None, None] }); add key/value pair to dictionary; push result ({ \"data\": [None, None], \"head\": 0 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "head" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] } ] },
          "npc": "1262",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "1261"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1263",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1262"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1264",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1263"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1265",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1264"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 1); second value modulo the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "1266",
          "pop": "1",
          "push": [ ],
          "pc": "1265"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (1, \"tail\", { \"data\": [None, None], \"head\": 0 }); add key/value pair to dictionary; push result ({ \"data\": [None, None], \"head\": 0, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tail" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1267",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1266"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1268",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1267"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1269",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1268"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"count\", { \"data\": [None, None], \"head\": 0, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "count" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1270",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1269"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1271",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1270"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1272",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1271"
        },

        {
          "code": "DelVar n",
          "explain": "delete method variable n",
          "explain2": { "text": "delete method variable n", "args": [] },
          "npc": "1273",
          "local": { },
          "push": [ ],
          "pc": "1272"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (2, \"size\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "size" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1274",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1273"
        },

        {
          "code": "Push \"not_full\"",
          "explain": "push constant \"not_full\"",
          "explain2": { "text": "push constant \"not_full\"", "args": [] },
          "npc": "1275",
          "push": [ { "type": "atom", "value": "not_full" } ],
          "pc": "1274"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1276",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1275"
        },

        {
          "code": "Apply PC(989)",
          "explain": "pop an argument ([]) and call method (989: \"Condition\")",
          "explain2": { "text": "pop an argument (#+) and call method (989: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Condition" } ] },
          "npc": "989",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "989","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20418" }, { "type": "list", "value": [] } ],
          "pc": "1276"
        },

        {
          "code": "Frame Condition()",
          "explain": "pop argument () and run method \"Condition\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Condition" } ] },
          "npc": "990",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "989"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "991",
          "push": [ ],
          "pc": "990"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "992",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "991"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "993",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "992"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "993"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "15906" }, { "type": "list", "value": [] } ],
          "pc": "994"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "995",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "996",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "995"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1277",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "996"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"not_full\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "dict", "value": [] }, { "type": "atom", "value": "not_full" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1278",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1277"
        },

        {
          "code": "Push \"not_empty\"",
          "explain": "push constant \"not_empty\"",
          "explain2": { "text": "push constant \"not_empty\"", "args": [] },
          "npc": "1279",
          "push": [ { "type": "atom", "value": "not_empty" } ],
          "pc": "1278"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1280",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1279"
        },

        {
          "code": "Apply PC(989)",
          "explain": "pop an argument ([]) and call method (989: \"Condition\")",
          "explain2": { "text": "pop an argument (#+) and call method (989: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Condition" } ] },
          "npc": "989",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "989","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20482" }, { "type": "list", "value": [] } ],
          "pc": "1280"
        },

        {
          "code": "Frame Condition()",
          "explain": "pop argument () and run method \"Condition\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Condition" } ] },
          "npc": "990",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "989"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "991",
          "push": [ ],
          "pc": "990"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "992",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "991"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "993",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "992"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "993"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "15906" }, { "type": "list", "value": [] } ],
          "pc": "994"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "995",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "996",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "995"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1281",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "996"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"not_empty\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "dict", "value": [] }, { "type": "atom", "value": "not_empty" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1282",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1281"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1283",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1282"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1284",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1283"
        },

        {
          "code": "Apply PC(931)",
          "explain": "pop an argument ([]) and call method (931: \"Lock\")",
          "explain2": { "text": "pop an argument (#+) and call method (931: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Lock" } ] },
          "npc": "931",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "931","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20546" }, { "type": "list", "value": [] } ],
          "pc": "1284"
        },

        {
          "code": "Frame Lock()",
          "explain": "pop argument () and run method \"Lock\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Lock" } ] },
          "npc": "932",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "931"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "933",
          "push": [ ],
          "pc": "932"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "934",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "933"
        },

        {
          "code": "Apply PC(912)",
          "explain": "pop an argument (False) and call method (912: \"BinSema\")",
          "explain2": { "text": "pop an argument (#+) and call method (912: #+)", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "912",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "935","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8},{"pc": "912","xpc": "912","method_name": { "type": "atom", "value": "BinSema" },
"method_arg": { "type": "bool", "value": "False" },
"method": "BinSema(False)","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "14946" }, { "type": "bool", "value": "False" } ],
          "pc": "934"
        },

        {
          "code": "Frame BinSema(initial)",
          "explain": "pop argument (False), assign to initial, and run method \"BinSema\"",
          "explain2": { "text": "pop argument (#+), assign to initial, and run method #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "913",
          "local": { "initial": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "912"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "914",
          "atomic": "2",
          "push": [ ],
          "pc": "913"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "915",
          "readonly": "1",
          "push": [ ],
          "pc": "914"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (False) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "initial" } ] },
          "npc": "916",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "915"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "917",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "916"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "918",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "917"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "919",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "918"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "920",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "919"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "921",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "920"
        },

        {
          "code": "2-ary in",
          "explain": "pop 2 values ({ False, True }, False); check if the second value is a member of the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the second value is a member of the first; push result (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "922",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "921"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "923",
          "pop": "1",
          "push": [ ],
          "pc": "922"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "924",
          "readonly": "0",
          "push": [ ],
          "pc": "923"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "925",
          "atomic": "1",
          "push": [ ],
          "pc": "924"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (False) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "initial" } ] },
          "npc": "926",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "925"
        },

        {
          "code": "DelVar initial",
          "explain": "delete method variable initial",
          "explain2": { "text": "delete method variable initial", "args": [] },
          "npc": "927",
          "local": { },
          "push": [ ],
          "pc": "926"
        },

        {
          "code": "StoreVar sema",
          "explain": "pop value (False) and store locally in variable \\\"sema\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"sema\"", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "928",
          "local": { "sema": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "927"
        },

        {
          "code": "ReturnOp(sema)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "935",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "935","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "928"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "936",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "935"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "1285",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "936"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (False, \"lock\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "lock" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1286",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1285"
        },

        {
          "code": "StoreVar initial",
          "explain": "pop value ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }) and store locally in variable \\\"initial\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"initial\"", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1287",
          "local": { "initial": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1286"
        },

        {
          "code": "ReturnOp(initial)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1727",
          "fp": "1",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1287"
        },

        {
          "code": "Store d",
          "explain": "pop value ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }) and store into variable d",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1728",
          "pop": "1",
          "push": [ ],
          "pc": "1727"
        },

        {
          "code": "Jump 1882",
          "explain": "jump over method definition: set program counter to 1882",
          "explain2": { "text": "jump over method definition: set program counter to 1882", "args": [] },
          "npc": "1882",
          "push": [ ],
          "pc": "1728"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1883",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1882"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1884",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1883"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1885",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1884"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1886",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1885"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1887",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1886"
        },

        {
          "code": "JumpCond False 1895",
          "explain": "pop value (True), compare to False, and jump to 1895 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1895 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1888",
          "pop": "1",
          "push": [ ],
          "pc": "1887"
        },

        {
          "code": "Push ?PC(1729)",
          "explain": "push constant ?PC(1729)",
          "explain2": { "text": "push constant ?PC(1729)", "args": [] },
          "npc": "1889",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [ ] } ],
          "pc": "1888"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1890",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1889"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1891",
          "local": { },
          "push": [ ],
          "pc": "1890"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1729)); push result (?PC(1729)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1892",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1891"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1893",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1892"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1729: \"put_left_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1729: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "put_left_test" } ] },
          "npc": "1894",
          "pop": "2",
          "push": [ ],
          "pc": "1893"
        },

        {
          "code": "Jump 1886",
          "explain": "set program counter to 1886",
          "explain2": { "text": "set program counter to 1886", "args": [] },
          "npc": "1886",
          "push": [ ],
          "pc": "1894"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1887",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1886"
        },

        {
          "code": "JumpCond False 1895",
          "explain": "pop value (False), compare to False, and jump to 1895 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1895 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1895",
          "pop": "1",
          "push": [ ],
          "pc": "1887"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1896",
          "push": [ ],
          "pc": "1895"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1897",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1896"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "1898",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1897"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 1); range of integers; push result ({ 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1899",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1898"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1900",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1899"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1, 2 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1901",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (True), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1902",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "Push ?PC(1758)",
          "explain": "push constant ?PC(1758)",
          "explain2": { "text": "push constant ?PC(1758)", "args": [] },
          "npc": "1903",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] } ],
          "pc": "1902"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1904",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1903"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1905",
          "local": { },
          "push": [ ],
          "pc": "1904"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1758)); push result (?PC(1758)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1906",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1905"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1907",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1906"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1758: \"put_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1758: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1908",
          "pop": "2",
          "push": [ ],
          "pc": "1907"
        },

        {
          "code": "Jump 1900",
          "explain": "set program counter to 1900",
          "explain2": { "text": "set program counter to 1900", "args": [] },
          "npc": "1900",
          "push": [ ],
          "pc": "1908"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1, 2 }); assign value (2) to i; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1901",
          "local": { "i": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (True), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1902",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "Push ?PC(1758)",
          "explain": "push constant ?PC(1758)",
          "explain2": { "text": "push constant ?PC(1758)", "args": [] },
          "npc": "1903",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] } ],
          "pc": "1902"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (2) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "i" } ] },
          "npc": "1904",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1903"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1905",
          "local": { },
          "push": [ ],
          "pc": "1904"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?PC(1758)); push result (?PC(1758)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1906",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1905"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1907",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1906"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (2), and pc (1758: \"put_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1758: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "2" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1908",
          "pop": "2",
          "push": [ ],
          "pc": "1907"
        },

        {
          "code": "Jump 1900",
          "explain": "set program counter to 1900",
          "explain2": { "text": "set program counter to 1900", "args": [] },
          "npc": "1900",
          "push": [ ],
          "pc": "1908"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1901",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (False), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1909",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1910",
          "push": [ ],
          "pc": "1909"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1911",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1910"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1912",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1911"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1913",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1912"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1914",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1913"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1915",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1914"
        },

        {
          "code": "JumpCond False 1923",
          "explain": "pop value (True), compare to False, and jump to 1923 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1923 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1916",
          "pop": "1",
          "push": [ ],
          "pc": "1915"
        },

        {
          "code": "Push ?PC(1787)",
          "explain": "push constant ?PC(1787)",
          "explain2": { "text": "push constant ?PC(1787)", "args": [] },
          "npc": "1917",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [ ] } ],
          "pc": "1916"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1918",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1917"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1919",
          "local": { },
          "push": [ ],
          "pc": "1918"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1787)); push result (?PC(1787)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1920",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1919"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1921",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1920"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1787: \"get_left_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1787: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "get_left_test" } ] },
          "npc": "1922",
          "pop": "2",
          "push": [ ],
          "pc": "1921"
        },

        {
          "code": "Jump 1914",
          "explain": "set program counter to 1914",
          "explain2": { "text": "set program counter to 1914", "args": [] },
          "npc": "1914",
          "push": [ ],
          "pc": "1922"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1915",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1914"
        },

        {
          "code": "JumpCond False 1923",
          "explain": "pop value (False), compare to False, and jump to 1923 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1923 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1923",
          "pop": "1",
          "push": [ ],
          "pc": "1915"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1924",
          "push": [ ],
          "pc": "1923"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1925",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1924"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1926",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1925"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1927",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1926"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1928",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1927"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1929",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1928"
        },

        {
          "code": "JumpCond False 1937",
          "explain": "pop value (True), compare to False, and jump to 1937 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1937 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1930",
          "pop": "1",
          "push": [ ],
          "pc": "1929"
        },

        {
          "code": "Push ?PC(1811)",
          "explain": "push constant ?PC(1811)",
          "explain2": { "text": "push constant ?PC(1811)", "args": [] },
          "npc": "1931",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [ ] } ],
          "pc": "1930"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1932",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1931"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1933",
          "local": { },
          "push": [ ],
          "pc": "1932"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1811)); push result (?PC(1811)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1934",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1933"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1935",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1934"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1811: \"get_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1811: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "get_right_test" } ] },
          "npc": "1936",
          "pop": "2",
          "push": [ ],
          "pc": "1935"
        },

        {
          "code": "Jump 1928",
          "explain": "set program counter to 1928",
          "explain2": { "text": "set program counter to 1928", "args": [] },
          "npc": "1928",
          "push": [ ],
          "pc": "1936"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1929",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1928"
        },

        {
          "code": "JumpCond False 1937",
          "explain": "pop value (False), compare to False, and jump to 1937 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1937 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1937",
          "pop": "1",
          "push": [ ],
          "pc": "1929"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1938",
          "push": [ ],
          "pc": "1937"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1939",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1938"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1940",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1939"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (0, 1); range of integers; push result ({})",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "set", "value": [] } ] },
          "npc": "1941",
          "pop": "2",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1940"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1942",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1941"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({}); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "1943",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1942"
        },

        {
          "code": "JumpCond False 1951",
          "explain": "pop value (False), compare to False, and jump to 1951 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1951 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1951",
          "pop": "1",
          "push": [ ],
          "pc": "1943"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1952",
          "push": [ ],
          "pc": "1951"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1953",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1952"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1954",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1953"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1955",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1954"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1956",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1955"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1957",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1956"
        },

        {
          "code": "JumpCond False 1965",
          "explain": "pop value (True), compare to False, and jump to 1965 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1965 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1958",
          "pop": "1",
          "push": [ ],
          "pc": "1957"
        },

        {
          "code": "Push ?PC(1859)",
          "explain": "push constant ?PC(1859)",
          "explain2": { "text": "push constant ?PC(1859)", "args": [] },
          "npc": "1959",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [ ] } ],
          "pc": "1958"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1960",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1959"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1961",
          "local": { },
          "push": [ ],
          "pc": "1960"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1859)); push result (?PC(1859)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1962",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1961"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1963",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1962"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1859: \"peek_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1859: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "peek_right_test" } ] },
          "npc": "1964",
          "pop": "2",
          "push": [ ],
          "pc": "1963"
        },

        {
          "code": "Jump 1956",
          "explain": "set program counter to 1956",
          "explain2": { "text": "set program counter to 1956", "args": [] },
          "npc": "1956",
          "push": [ ],
          "pc": "1964"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1957",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1956"
        },

        {
          "code": "JumpCond False 1965",
          "explain": "pop value (False), compare to False, and jump to 1965 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1965 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1965",
          "pop": "1",
          "push": [ ],
          "pc": "1957"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1966",
          "push": [ ],
          "pc": "1965"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1966",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "1966"
        }

      ],
      "ctxbag": {
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80063a": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13e80063a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13e80063a",
        "fp": "1",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1758",
        "sp": "1",
        "stack": [{ "type": "int", "value": "2" }],
        "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "2" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame put_right_test(self)",
          "explain": "pop argument (2), assign to self, and run method \"put_right_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1759",
          "fp": "1",
          "trace": [
{"pc": "1759","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1758"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1760",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1759"
        },

        {
          "code": "Push \"call right put\"",
          "explain": "push constant \"call right put\"",
          "explain2": { "text": "push constant \"call right put\"", "args": [] },
          "npc": "1761",
          "push": [ { "type": "atom", "value": "call right put" } ],
          "pc": "1760"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"call right put\", []); insert first value into the second; push result ([\"call right put\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "call right put" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] } ] },
          "npc": "1762",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] } ],
          "pc": "1761"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1763",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1762"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"call right put\"]); insert first value into the second; push result ([\"call right put\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1764",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1763"
        }

      ],
      "ctxbag": {
          "13c8000ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c8000ea",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1764",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1764","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "19",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c8000ea",
        "fp": "1",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1764",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] }],
        "trace": [
{"pc": "1764","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"call right put\", 2]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] },
          "npc": "1765",
          "fp": "1",
          "trace": [
{"pc": "1765","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "1764"
        },

        {
          "code": "Push PC(1372)",
          "explain": "push program counter constant 1372 ()",
          "explain2": { "text": "push program counter constant 1372 ()", "args": [ { "type": "atom", "value": "put_right" } ] },
          "npc": "1766",
          "push": [ { "type": "pc", "value": "1372" } ],
          "pc": "1765"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1767",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1766"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "1768",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1767"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?d, []); insert first value into the second; push result ([?d])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "1769",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "1768"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1770",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1769"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1771",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1770"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1772",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1771"
        },

        {
          "code": "Push \"rights\"",
          "explain": "push constant \"rights\"",
          "explain2": { "text": "push constant \"rights\"", "args": [] },
          "npc": "1773",
          "push": [ { "type": "atom", "value": "rights" } ],
          "pc": "1772"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"rights\", [2]); insert first value into the second; push result ([2, \"rights\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "rights" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
          "npc": "1774",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ],
          "pc": "1773"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([2, \"rights\"], [?d]); insert first value into the second; push result ([?d, [2, \"rights\"]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] },
          "npc": "1775",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ],
          "pc": "1774"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([?d, [2, \"rights\"]], PC(1372)); push result (?PC(1372)[[?d, [2, \"rights\"]]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "pc", "value": "1372" }, { "type": "address", "func": { "type": "pc", "value": "1372" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] } ] },
          "npc": "1776",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1372" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] } ],
          "pc": "1775"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([?d, [2, \"rights\"]]) and call method (1372: \"put_right\")",
          "explain2": { "text": "pop an argument (#+) and call method (1372: #+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "atom", "value": "put_right" } ] },
          "npc": "1372",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1372","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "self": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ],
          "pc": "1776"
        },

        {
          "code": "Frame put_right(d, v)",
          "explain": "pop argument ([?d, [2, \"rights\"]]), assign to (d, v), and run method \"put_right\"",
          "explain2": { "text": "pop argument (#+), assign to (d, v), and run method #+", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "atom", "value": "put_right" } ] },
          "npc": "1373",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "1372"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1374",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1373"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1375",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1374"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1376",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1375"
        },

        {
          "code": "Apply PC(954)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (954: \"acquire\")",
          "explain2": { "text": "pop an argument (#+) and call method (954: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "954",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "954","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1376"
        },

        {
          "code": "Frame acquire(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"acquire\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "955",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] } ],
          "pc": "954"
        }

      ],
      "ctxbag": {
          "1258002ca": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1258002ca",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "955",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "29",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1258002ca",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "955",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "956",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "956","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "955"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "957",
          "readonly": "1",
          "push": [ ],
          "pc": "956"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "958",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "957"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "959",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "958"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "960",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "JumpCond False 962",
          "explain": "pop value (True), compare to False, and jump to 962 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 962 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "961",
          "pop": "1",
          "push": [ ],
          "pc": "960"
        },

        {
          "code": "Jump 965",
          "explain": "set program counter to 965",
          "explain2": { "text": "set program counter to 965", "args": [] },
          "npc": "965",
          "push": [ ],
          "pc": "961"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "966",
          "readonly": "0",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "967",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "966"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "968",
          "local": { },
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "969",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "968"
        },

        {
          "code": "Store",
          "explain": "pop value (True) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "True" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "970",
          "pop": "2",
          "push": [ ],
          "pc": "969"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "971",
          "atomic": "0",
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1377",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "971"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1378",
          "pop": "1",
          "push": [ ],
          "pc": "1377"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1379",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1378"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1380",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1379"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1381",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1380"
        }

      ],
      "ctxbag": {
          "11180000a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11180000a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1381",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1381","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "156",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11180000a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1381",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1381","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1382",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1382","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1381"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1383",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1382"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1384",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1383"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1385",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1384"
        }

      ],
      "ctxbag": {
          "13a80003a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a80003a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1385",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1385","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "436",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a80003a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1385",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1385","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1386",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1386","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1385"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (2, 0); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "bool", "value": "False" } ] },
          "npc": "1387",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1386"
        },

        {
          "code": "JumpCond False 1400",
          "explain": "pop value (False), compare to False, and jump to 1400 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1400 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1400",
          "pop": "1",
          "push": [ ],
          "pc": "1387"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1401",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1400"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1402",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1401"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"data\", ?d); push result (?d[\"data\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "data" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ] },
          "npc": "1403",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ],
          "pc": "1402"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1404",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1403"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1405",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1404"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1406",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1405"
        }

      ],
      "ctxbag": {
          "13c80057a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c80057a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1406",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1406","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"tail\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "490",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c80057a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1406",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1406","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"tail\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"tail\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1407",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1407","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1406"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?d[\"data\"]); push result (?d[\"data\"][1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1408",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1407"
        },

        {
          "code": "LoadVar v",
          "explain": "push value ([2, \"rights\"]) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "atom", "value": "v" } ] },
          "npc": "1409",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ],
          "pc": "1408"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "1410",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "push": [ ],
          "pc": "1409"
        }

      ],
      "ctxbag": {
          "11500005a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11500005a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1410",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1410","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"data\"][1]", "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1288",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11500005a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1410",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1410","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"data\"][1]", "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value ([2, \"rights\"]) and address (?d[\"data\"][1]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1411",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1411","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1410"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1412",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1411"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1413",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1412"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1414",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1413"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1415",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1414"
        },

        {
          "code": "Push \"head\"",
          "explain": "push constant \"head\"",
          "explain2": { "text": "push constant \"head\"", "args": [] },
          "npc": "1416",
          "push": [ { "type": "atom", "value": "head" } ],
          "pc": "1415"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"head\", ?d); push result (?d[\"head\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "head" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] } ] },
          "npc": "1417",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] } ],
          "pc": "1416"
        }

      ],
      "ctxbag": {
          "13a8005ca": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a8005ca",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1417",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1417","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"head\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "2276",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a8005ca",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1417",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1417","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"head\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"head\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1418",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1418","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1417"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1419",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1418"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "1420",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1419"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1421",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1420"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1422",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1421"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1423",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1422"
        }

      ],
      "ctxbag": {
          "13c80068a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c80068a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1423",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1423","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3030",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c80068a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1423",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1423","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1424",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1424","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1423"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 1); second value modulo the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "1425",
          "pop": "1",
          "push": [ ],
          "pc": "1424"
        }

      ],
      "ctxbag": {
          "12000042a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "12000042a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1425",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1425","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"tail\"]", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4241",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "12000042a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1425",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1425","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"tail\"]", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?d[\"tail\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1426",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1426","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1425"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1427",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1426"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1428",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1427"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1429",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1428"
        },

        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "explain2": { "text": "push a copy of the top value on the stack", "args": [] },
          "npc": "1430",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1429"
        }

      ],
      "ctxbag": {
          "12000047a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "12000047a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1430",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1430","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5679",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "12000047a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1430",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1430","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1431",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1431","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1430"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1432",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1431"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "1433",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1432"
        }

      ],
      "ctxbag": {
          "1220005ba": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1220005ba",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1433",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1433","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"count\"]", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6742",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1220005ba",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1433",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1433","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"count\"]", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?d[\"count\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1434",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1434","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1433"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1435",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1434"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1436",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1435"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1437",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1436"
        }

      ],
      "ctxbag": {
          "1150002ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1150002ea",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1437",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1437","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8066",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1150002ea",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1437",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1437","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1438",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1438","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1437"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1439",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1438"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (1, 1); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "1440",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1439"
        },

        {
          "code": "JumpCond False 1446",
          "explain": "pop value (True), compare to False, and jump to 1446 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1446 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1441",
          "pop": "1",
          "push": [ ],
          "pc": "1440"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1442",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1441"
        },

        {
          "code": "Push \"not_empty\"",
          "explain": "push constant \"not_empty\"",
          "explain2": { "text": "push constant \"not_empty\"", "args": [] },
          "npc": "1443",
          "push": [ { "type": "atom", "value": "not_empty" } ],
          "pc": "1442"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"not_empty\", ?d); push result (?d[\"not_empty\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "not_empty" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ] },
          "npc": "1444",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1443"
        },

        {
          "code": "Apply PC(1097)",
          "explain": "pop an argument (?d[\"not_empty\"]) and call method (1097: \"notifyAll\")",
          "explain2": { "text": "pop an argument (#+) and call method (1097: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "notifyAll" } ] },
          "npc": "1097",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1097","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1444"
        },

        {
          "code": "Frame notifyAll(c)",
          "explain": "pop argument (?d[\"not_empty\"]), assign to c, and run method \"notifyAll\"",
          "explain2": { "text": "pop argument (#+), assign to c, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "notifyAll" } ] },
          "npc": "1098",
          "local": { "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] } ],
          "pc": "1097"
        }

      ],
      "ctxbag": {
          "11180066a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11180066a",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1098",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1098","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10883",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11180066a",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1098",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1098","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "1099",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1099","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "1098"
        },

        {
          "code": "LoadVar c",
          "explain": "push value (?d[\"not_empty\"]) of variable \"c\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "c" } ] },
          "npc": "1100",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1099"
        },

        {
          "code": "DelVar c",
          "explain": "delete method variable c",
          "explain2": { "text": "delete method variable c", "args": [] },
          "npc": "1101",
          "local": { },
          "push": [ ],
          "pc": "1100"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "1102",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "1101"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1103",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1102"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "1104",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "1103"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "11",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1105","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ },"sp": 6},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 10}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "17666" }, { "type": "list", "value": [] } ],
          "pc": "1104"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1105",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1105","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "Store",
          "explain": "pop value ({:}) and address (?d[\"not_empty\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ] },
          "npc": "1106",
          "pop": "2",
          "push": [ ],
          "pc": "1105"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "1107",
          "atomic": "0",
          "push": [ ],
          "pc": "1106"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1445",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1107"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1446",
          "pop": "1",
          "push": [ ],
          "pc": "1445"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1447",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1446"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "1448",
          "local": { },
          "push": [ ],
          "pc": "1447"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1449",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1448"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1450",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1449"
        },

        {
          "code": "Apply PC(973)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (973: \"release\")",
          "explain2": { "text": "pop an argument (#+) and call method (973: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "973",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "973","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1450"
        },

        {
          "code": "Frame release(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"release\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "974",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "973"
        }

      ],
      "ctxbag": {
          "13a8007ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a8007ea",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "974",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "dict", "value": [] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12528",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a8007ea",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "974",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "dict", "value": [] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "975",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "975","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "974"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "976",
          "atomic": "2",
          "push": [ ],
          "pc": "975"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "977",
          "readonly": "1",
          "push": [ ],
          "pc": "976"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "978",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "977"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (True)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "979",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "978"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "980",
          "pop": "1",
          "push": [ ],
          "pc": "979"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "981",
          "readonly": "0",
          "push": [ ],
          "pc": "980"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "982",
          "atomic": "1",
          "push": [ ],
          "pc": "981"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "983",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "982"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "984",
          "local": { },
          "push": [ ],
          "pc": "983"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "985",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "984"
        },

        {
          "code": "Store",
          "explain": "pop value (False) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "986",
          "pop": "2",
          "push": [ ],
          "pc": "985"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "987",
          "atomic": "0",
          "push": [ ],
          "pc": "986"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1451",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3}
          ],
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "987"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1452",
          "pop": "1",
          "push": [ ],
          "pc": "1451"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1777",
          "fp": "1",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1452"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1778",
          "pop": "1",
          "push": [ ],
          "pc": "1777"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1779",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1778"
        },

        {
          "code": "Push \"done right put\"",
          "explain": "push constant \"done right put\"",
          "explain2": { "text": "push constant \"done right put\"", "args": [] },
          "npc": "1780",
          "push": [ { "type": "atom", "value": "done right put" } ],
          "pc": "1779"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"done right put\", []); insert first value into the second; push result ([\"done right put\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "done right put" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] } ] },
          "npc": "1781",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] } ],
          "pc": "1780"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1782",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1781"
        },

        {
          "code": "DelVar self",
          "explain": "delete method variable self",
          "explain2": { "text": "delete method variable self", "args": [] },
          "npc": "1783",
          "local": { },
          "push": [ ],
          "pc": "1782"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"done right put\"]); insert first value into the second; push result ([\"done right put\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1784",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1783"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13354",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13e80072a",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1859",
        "sp": "1",
        "stack": [{ "type": "int", "value": "1" }],
        "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame peek_right_test(self)",
          "explain": "pop argument (1), assign to self, and run method \"peek_right_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "peek_right_test" } ] },
          "npc": "1860",
          "fp": "1",
          "trace": [
{"pc": "1860","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1859"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1861",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1860"
        },

        {
          "code": "Push \"call peek right\"",
          "explain": "push constant \"call peek right\"",
          "explain2": { "text": "push constant \"call peek right\"", "args": [] },
          "npc": "1862",
          "push": [ { "type": "atom", "value": "call peek right" } ],
          "pc": "1861"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"call peek right\", []); insert first value into the second; push result ([\"call peek right\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "call peek right" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] } ] },
          "npc": "1863",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] } ],
          "pc": "1862"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (1) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "self" } ] },
          "npc": "1864",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1863"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [\"call peek right\"]); insert first value into the second; push result ([\"call peek right\", 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1865",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1864"
        }

      ],
      "ctxbag": {
          "13c8001da": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c8001da",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1865",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] }],
          "trace": [
{"pc": "1865","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "15356",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c8001da",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1865",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] }],
        "trace": [
{"pc": "1865","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"call peek right\", 1]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] },
          "npc": "1866",
          "fp": "1",
          "trace": [
{"pc": "1866","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "1865"
        },

        {
          "code": "Push PC(1673)",
          "explain": "push program counter constant 1673 ()",
          "explain2": { "text": "push program counter constant 1673 ()", "args": [ { "type": "atom", "value": "peek_right" } ] },
          "npc": "1867",
          "push": [ { "type": "pc", "value": "1673" } ],
          "pc": "1866"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "1868",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1867"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?d, PC(1673)); push result (?PC(1673)[?d])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "pc", "value": "1673" }, { "type": "address", "func": { "type": "pc", "value": "1673" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "1869",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1673" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "1868"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?d) and call method (1673: \"peek_right\")",
          "explain2": { "text": "pop an argument (#+) and call method (1673: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "peek_right" } ] },
          "npc": "1673",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1673","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "self": { "type": "int", "value": "1" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1869"
        },

        {
          "code": "Frame peek_right(d)",
          "explain": "pop argument (?d), assign to d, and run method \"peek_right\"",
          "explain2": { "text": "pop argument (#+), assign to d, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "peek_right" } ] },
          "npc": "1674",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1673"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1675",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1674"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1676",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1675"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1677",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1676"
        },

        {
          "code": "Apply PC(954)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (954: \"acquire\")",
          "explain2": { "text": "pop an argument (#+) and call method (954: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "954",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "954","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1677"
        },

        {
          "code": "Frame acquire(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"acquire\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "955",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] } ],
          "pc": "954"
        }

      ],
      "ctxbag": {
          "12580044a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "12580044a",
          "fp": "7",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "955",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "16664",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "12580044a",
        "fp": "7",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "955",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "956",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "956","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "955"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "957",
          "readonly": "1",
          "push": [ ],
          "pc": "956"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "958",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "957"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "959",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "958"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "960",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "JumpCond False 962",
          "explain": "pop value (True), compare to False, and jump to 962 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 962 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "961",
          "pop": "1",
          "push": [ ],
          "pc": "960"
        },

        {
          "code": "Jump 965",
          "explain": "set program counter to 965",
          "explain2": { "text": "set program counter to 965", "args": [] },
          "npc": "965",
          "push": [ ],
          "pc": "961"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "966",
          "readonly": "0",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "967",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "966"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "968",
          "local": { },
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "969",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "968"
        },

        {
          "code": "Store",
          "explain": "pop value (True) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "True" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "970",
          "pop": "2",
          "push": [ ],
          "pc": "969"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "971",
          "atomic": "0",
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1678",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "971"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1679",
          "pop": "1",
          "push": [ ],
          "pc": "1678"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1680",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1679"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1681",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1680"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1682",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1681"
        }

      ],
      "ctxbag": {
          "12200000a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "12200000a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1682",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1682","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "18404",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "12200000a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1682",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1682","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1683",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1683","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1682"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1684",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1683"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (0, 1); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "1685",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1684"
        },

        {
          "code": "JumpCond False 1698",
          "explain": "pop value (False), compare to False, and jump to 1698 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1698 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1698",
          "pop": "1",
          "push": [ ],
          "pc": "1685"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1699",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1698"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1700",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1699"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"data\", ?d); push result (?d[\"data\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "data" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ] },
          "npc": "1701",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ],
          "pc": "1700"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1702",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1701"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1703",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1702"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1704",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1703"
        }

      ],
      "ctxbag": {
          "1150007aa": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "1150007aa",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1704",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1704","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"tail\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "20282",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "1150007aa",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1704",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1704","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"tail\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"tail\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1705",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1705","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1704"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1706",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1705"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "1707",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1706"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1708",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1707"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1709",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1708"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1710",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1709"
        }

      ],
      "ctxbag": {
          "11500094a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "11500094a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1710",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1710","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "22296",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "11500094a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1710",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1710","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1711",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1711","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1710"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 0); second value modulo the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] },
          "npc": "1712",
          "pop": "1",
          "push": [ ],
          "pc": "1711"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?d[\"data\"]); push result (?d[\"data\"][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1713",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1712"
        }

      ],
      "ctxbag": {
          "111800d8a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "111800d8a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1713",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1713","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"data\"][0]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "26099",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "111800d8a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1713",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1713","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"data\"][0]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"data\"][0]) and push value (None)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }, { "type": "address" } ] },
          "npc": "1714",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1714","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "1713"
        },

        {
          "code": "StoreVar right",
          "explain": "pop value (None) and store locally in variable \\\"right\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"right\"", "args": [ { "type": "address" } ] },
          "npc": "1715",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "right": { "type": "address" } },
          "pop": "1",
          "push": [ ],
          "pc": "1714"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1716",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1715"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "1717",
          "local": { "right": { "type": "address" } },
          "push": [ ],
          "pc": "1716"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1718",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1717"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1719",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1718"
        },

        {
          "code": "Apply PC(973)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (973: \"release\")",
          "explain2": { "text": "pop an argument (#+) and call method (973: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "973",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "973","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1719"
        },

        {
          "code": "Frame release(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"release\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "974",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] } ],
          "pc": "973"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13c80134a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c80134a",
          "fp": "7",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "974",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "29724",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c80134a",
        "fp": "7",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "974",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "975",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "975","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "974"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "976",
          "atomic": "2",
          "push": [ ],
          "pc": "975"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "977",
          "readonly": "1",
          "push": [ ],
          "pc": "976"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "978",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "977"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (True)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "979",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "978"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "980",
          "pop": "1",
          "push": [ ],
          "pc": "979"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "981",
          "readonly": "0",
          "push": [ ],
          "pc": "980"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "982",
          "atomic": "1",
          "push": [ ],
          "pc": "981"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "983",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "982"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "984",
          "local": { },
          "push": [ ],
          "pc": "983"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "985",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "984"
        },

        {
          "code": "Store",
          "explain": "pop value (False) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "986",
          "pop": "2",
          "push": [ ],
          "pc": "985"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "987",
          "atomic": "0",
          "push": [ ],
          "pc": "986"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1720",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3}
          ],
          "local": { "right": { "type": "address" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "987"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1721",
          "pop": "1",
          "push": [ ],
          "pc": "1720"
        },

        {
          "code": "ReturnOp(right)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1870",
          "fp": "1",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "1" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1721"
        },

        {
          "code": "StoreVar v",
          "explain": "pop value (None) and store locally in variable \\\"v\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"v\"", "args": [ { "type": "address" } ] },
          "npc": "1871",
          "local": { "self": { "type": "int", "value": "1" }, "v": { "type": "address" } },
          "pop": "1",
          "push": [ ],
          "pc": "1870"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1872",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1871"
        },

        {
          "code": "Push \"done peek right\"",
          "explain": "push constant \"done peek right\"",
          "explain2": { "text": "push constant \"done peek right\"", "args": [] },
          "npc": "1873",
          "push": [ { "type": "atom", "value": "done peek right" } ],
          "pc": "1872"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"done peek right\", []); insert first value into the second; push result ([\"done peek right\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "done peek right" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] } ] },
          "npc": "1874",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] } ],
          "pc": "1873"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (1) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "self" } ] },
          "npc": "1875",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1874"
        },

        {
          "code": "DelVar self",
          "explain": "delete method variable self",
          "explain2": { "text": "delete method variable self", "args": [] },
          "npc": "1876",
          "local": { "v": { "type": "address" } },
          "push": [ ],
          "pc": "1875"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [\"done peek right\"]); insert first value into the second; push result ([\"done peek right\", 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1877",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1876"
        },

        {
          "code": "LoadVar v",
          "explain": "push value (None) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address" }, { "type": "atom", "value": "v" } ] },
          "npc": "1878",
          "push": [ { "type": "address" } ],
          "pc": "1877"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "1879",
          "local": { },
          "push": [ ],
          "pc": "1878"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (None, [\"done peek right\", 1]); insert first value into the second; push result ([\"done peek right\", 1, None])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address" }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ] },
          "npc": "1880",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ],
          "pc": "1879"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13c8016da": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c8016da",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1880",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] }],
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "30664",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c8016da",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1880",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] }],
        "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"done peek right\", 1, None]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] },
          "npc": "1880",
          "fp": "1",
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Behavior failure on [\"done peek right\", 1, None]",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "1880"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "104aec52a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1880",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Behavior failure on [\"done peek right\", 1, None]",
          "this": { "type": "dict", "value": [] },
          "mode": "failed"
        }
      ]
    }

  ]
}

;
var boxSize = 10;
var timeWidth = 40;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
// var hvmrow = document.getElementById("hvmrow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

// printing contexts
var contexts = {};
var ctxGen = 0;

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_tuple(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "(" + result + ")";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(func, args) {
  var result = "?";
  var index = 0;
  if (func.type == "pc") {
    if (func.value == -1 || func.value == -2) {
      result += args[0].value;
      index = 1;
    }
    else if (func.value == -3) {
      result += "this." + args[0].value;
      index = 1;
    }
    else {
      result += json_string(func);
    }
  }
  else {
    result += json_string(func);
  }
  for (var i = index; i < args.length; i++) {
    result += "[" + json_string(args[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  // TODO.  Is JSON.stringify deterministic (same context --> same string)?
  var key = JSON.stringify(obj);
  if (!(key in contexts)) {
    contexts[key] = ++ctxGen;
  }
  var output = '<span title="CONTEXT\n';
  if ("id" in obj) {
    output += "id: " + json_string(obj["id"]) + "\n";
  }
  output += "pc: " + json_string(obj["pc"]) + "\n";
  output += "vars: " + stringify_vars(obj["vars"]) + "\n";
  var atomic = "atomic" in obj && obj["atomic"]["value"] == "True";
  var stopped = "stopped" in obj && obj["stopped"]["value"] == "True";
  if (atomic || stopped) {
    output += "mode:"
    if (atomic) output += " atomic";
    if (stopped) output += " stopped";
    output += "\n";
  }
  output += "sp: " + json_string(obj["sp"]);
  return output + '" style="color:blue">C' + contexts[key] + '</span>';

  // var pc = json_string(obj.pc);
  // return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    if ("func" in obj) {
      return json_string_address(obj.func, obj.args);
    }
    return "None";
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var loc = state.hvm.locs[pc];
  var module = state.hvm.modules[loc.module];
  loc.file = module.file;
  loc.code = module.lines[loc.line - 1];
  return loc;
//  var locs = state.locations;
//  while (pc >= 0) {
//    s = "" + pc;
//    if (locs.hasOwnProperty(s)) {
//      return locs[s];
//    }
//    pc--;
//  }
//  return noloc;
}

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + timeWidth - 1) / timeWidth);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > timeWidth ? timeWidth : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
  mes.nextstep.innerHTML = "";
  return t;
}

function updateStatus(mes) {
  for (var i = 0; i < mes.contexts.length; i++) {
    var c = mes.contexts[i];
    if (c.tid == mes.tid) {
      if (c.mode == "terminated") {
        mes.nextstep.innerHTML = "terminated"
      }
      else if (c.hasOwnProperty("next")) {
        switch (c.next.type) {
        case "Continue":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "stopped in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line;
          break;
        case "Store":
          mes.nextstep.innerHTML = "about to store " + json_string(c.next.value) + " in variable " + c.next.var;
          break;
        case "Load":
          mes.nextstep.innerHTML = "about to load variable " + c.next.var;
          break;
        case "Assert":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "assertion failed in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          mes.nextstep.style.color = "red";
          break;
        case "AtomicInc":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "about to execute in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          break;
        case "Print":
          mes.nextstep.innerHTML = "about to print " + json_string(c.next.value);
          break;
        default:
           mes.nextstep.innerHTML = "about to " + state.hvm.pretty[c.pc][1];
        }
      }
      break;
    }
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (false && k == "result" && obj[k].type == "address" && !("func" in obj)) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function method_call(m, arg) {
  var result = "";
  if (m.type == "atom") {
    result += m.value;
  }
  else {
    result += json_string(m);
  }
  if (arg.type == "list") {
    result += json_string_tuple(arg.value);
  }
  else {
    result += "(" + json_string(arg) + ")";
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    // mcell.innerHTML = trace[i].method;
    mcell.innerHTML = method_call(trace[i].method_name, trace[i].method_arg);
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    // var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    var vtext = document.createElement("div");
    vtext.innerHTML = stringify_vars(trace[i].vars);
    vcell.appendChild(vtext);
  }
  if (false && failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*timeWidth + x + 1;
  run_microsteps();
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var tid = mas.tid;
  var t = microsteps.length;
  megasteps[curMegaStep].contexts = mas.contexts;
  if (t > 0 && microsteps[t - 1].tid != tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
    megasteps[curMegaStep].tid = tid;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(tid),
    pc: parseInt(mis.pc),
    // invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts,
    hvm: mis.code,
    explain2: mis.explain2
  };
  if (misidx != 0) {
    previous = microsteps[t-1];
  }
  else {
    ctx = mas.context;
    previous = { mode: ctx.mode, };
    if (ctx.hasOwnProperty("atomic")) {
      previous.atomic = ctx["atomic"];
    }
    else {
      previous.atomic = 0;
    }
    if (ctx.hasOwnProperty("readonly")) {
      previous.readonly = ctx["readonly"];
    }
    else {
      previous.readonly = 0;
    }
    if (ctx.hasOwnProperty("interruptlevel")) {
      previous.interruptlevel = ctx["interruptlevel"];
    }
    else {
      previous.interruptlevel = 0;
    }
    if (ctx.hasOwnProperty("trace")) {
      previous.trace = ctx.trace;
    }
    else {
      previous.trace = [];
    }
    if (ctx.hasOwnProperty("fp")) {
      previous.fp = ctx.fp;
    }
    else {
      previous.fp = 0;
    }
    if (ctx.hasOwnProperty("stack")) {
      previous.stack = ctx.stack.map(x => json_string(x));
    }
    else {
      previous.stack = [];
    }
    if (mas.hasOwnProperty("shared")) {
      previous.shared = convert_vars(mas.shared);
    }
    else {
      previous.shared = {};
    }
  }

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = previous.mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else {
    microsteps[t].atomic = previous.atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else {
    microsteps[t].readonly = previous.readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else {
    microsteps[t].interruptlevel = previous.interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else {
    microsteps[t].trace = previous.trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace));
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else {
    microsteps[t].shared = previous.shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else {
    microsteps[t].fp = previous.fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = previous.stack.slice(0,
                              previous.stack.length - n);
  }
  else {
    microsteps[t].stack = previous.stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function explain_expand(e) {
    var s = e.text;
    var result = "";
    var arg = 0;
    for (var i = 0; i < s.length; i++) {
      if (s[i] == '#') {
        i++;
        if (i == s.length) {
          break;
        }
        if (s[i] == '#') {
          result += '#';
        }
        else if (s[i] == '+') {
          result += json_string(e.args[arg++]);
        }
        else if (s[i] == '@') {
          var addr = json_string(e.args[arg++]);
          result += addr.slice(1);
        }
        else {
          result += json_string(e.args[parseInt(s[i])]);
        }
      }
      else {
        result += s[i];
      }
    }
    return result;
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mes = megasteps[mis.mesidx];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i]);
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print);
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var cv = mis.contexts[ctx];
    var tid = parseInt(cv.tid);
    threads[tid].name = cv.name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(cv);
    threadtable.rows[tid].cells[3].innerHTML = cv.stack.slice(cv.fp).map(x => json_string(x));
  }
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

//  if (mis.invfails.length > 0) {
//    var inv = mis.invfails[0];
//    code = getCode(inv.pc);
//    coderow.style.color = "red";
//    coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
//    mis.cloc = null;
//  }
//  else
    {
    coderow.style.color = "blue";
    if (t+1 < microsteps.length) {
      var nmis = microsteps[t+1];
      code = getCode(nmis.pc);
      var l1 = parseInt(code.line);
      var l2 = parseInt(code.endline);
      if (l1 == l2 && l1 == code.stmt[0] && l2 == code.stmt[2]) {
        var c1 = parseInt(code.column) - 1;
        var c2 = parseInt(code.endcolumn);
        var s1 = code.code.slice(0, c1);
        var s2 = code.code.slice(c1, c2);
        var s3 = code.code.slice(c2);
        coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(s1) + "<span style='color:green'>" + escapeHTML(s2) + "</span>" + escapeHTML(s3);
      }
      else {
        coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code);
      }
    }
  }

  if (mis.failure != null) {
    mes.nextstep.innerHTML = '<span style="color:red">' + mis.failure + '</span>';
  }
  else if (t+1 < microsteps.length) {
    var nmis = microsteps[t+1];
    if (nmis.tid == mis.tid) {
        mes.nextstep.innerHTML = "next: " + explain_expand(nmis.explain2);
    }
    else {
        updateStatus(mes);
    }

    // hvmrow.innerHTML = "T" + nmis.tid + "/" + nmis.pc + ": " + nmis.hvm + " (" + explain_expand(nmis.explain2) + ")"
    currCloc = document.getElementById('C' + nmis.pc);
    currOffset = document.getElementById('P' + nmis.pc);
  }
  else {
    currCloc = null;
    currOffset = mis.offset;
    updateStatus(mes);
  }
}

function run_microsteps() {
  coderow.innerHTML = "";
  // hvmrow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
  }
  currCloc = document.getElementById('C0');
  currOffset = document.getElementById('P0');
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = threads[tid].stack;
  }

  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  if (currentTime < microsteps.length && (currentTime == 0 ||
            microsteps[currentTime - 1].tid != microsteps[currentTime].tid)) {
    var mis = microsteps[currentTime];
    var mes = megasteps[mis.mesidx];
    mes.nextstep.innerHTML = "next: " + explain_expand(mis.explain2);
    var mesrow = mestable.rows[mis.mesidx];
    mesrow.cells[3].innerHTML = mis.pc;

    if (mis.mesidx > 0) {
      var oldrow = mestable.rows[mis.mesidx - 1];
      for (var i = 0; i < vardir.length; i++) {
        mesrow.cells[i + 4].innerHTML = oldrow.cells[i + 4].innerHTML;
      }
    }
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = currentTime < totalTime ? microsteps[currentTime].mesidx : -1;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes);
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = currentTime < totalTime ? microsteps[currentTime].tid : -1;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid);
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
threads[0].stack = [ "()" ]
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  var nextstep = document.getElementById("nextstep" + i); 
  megasteps[i] = {
    canvas: canvas,
    nextstep: nextstep,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    tid: 0,
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>
