{
  "nstates": 34235,
  "issue": "Behavior violation: unexpected output",
  "hvm": {
    "modules": {
        "alloc": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/alloc.hny",
            "lines": [
                "pool = {:}",
                "next = 0",
                "",
                "# builtin malloc \"alloc$malloc\"",
                "# TODO.  builtin malloc temporarily disabled",
                "def malloc(v) returns copy:",
                "    atomically:",
                "        pool[next] = v",
                "        copy = ?pool[next]",
                "        next += 1",
                "",
                "# Commented out code tests for bad frees, but can lead to data races",
                "def free(r):",
                "    atomically:",
                "       # let poolcopy = pool:",
                "            del !r",
                "       #    assert poolcopy != pool, .bad_free",
                "",
                "def leak_check():",
                "    assert pool == {:}, .alloc_leak"
              ],
            "identifiers": {
                "free": "constant",
                "this": "local-var",
                "v": "local-const",
                "malloc": "constant",
                "next": "global",
                "leak_check": "constant",
                "r": "local-const",
                "pool": "global",
                "___": "___"
              }
          },
        "bag": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/bag.hny",
            "lines": [
                "def empty() returns bg:",
                "    bg = {:}",
                "",
                "def fromSet(s) returns bg:",
                "    bg = { elt:1 for elt in s }",
                "",
                "def fromList(a) returns bg:",
                "    bg = {:}",
                "    for v in a:",
                "        if v in bg:",
                "            bg[v] += 1",
                "        else:",
                "            bg[v] = 1",
                "",
                "builtin multiplicity \"bag$multiplicity\"",
                "def multiplicity(bg, elt) returns count:",
                "    if elt in bg:",
                "        count = bg[elt]",
                "    else:",
                "        count = 0",
                "",
                "builtin size \"bag$size\"",
                "def size(bg) returns count:",
                "    count = 0",
                "    for _:c in bg:",
                "        count += c",
                "",
                "builtin bmin \"bag$bmin\"",
                "def bmin(bg) returns count:",
                "    assert bg != {:}",
                "    count = min(keys(bg))",
                "",
                "builtin bmax \"bag$bmax\"",
                "def bmax(bg) returns count:",
                "    assert bg != {:}",
                "    count = max(keys(bg))",
                "",
                "def bchoose(bg) returns elt:",
                "    elt = choose(keys(bg))",
                "",
                "builtin add \"bag$add\"",
                "def add(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        result[elt] += 1",
                "    else:",
                "        result[elt] = 1",
                "",
                "builtin remove \"bag$remove\"",
                "def remove(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        assert result[elt] > 0",
                "        result[elt] -= 1",
                "        if result[elt] == 0:",
                "            del result[elt]",
                "",
                "# Return set of all subbags of bg of size k",
                "def combinations(bg, k) returns result:",
                "    if k == 0:",
                "        result = { {:} }",
                "    else:",
                "        let n = size(bg):",
                "            if k > n:",
                "                result = {}",
                "            elif k == n:",
                "                result = { bg }",
                "            else:",
                "                let hd = bmin(bg) let tl = remove(bg, hd):",
                "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
                "                                | combinations(tl, k)"
              ],
            "identifiers": {
                "tl": "local-const",
                "fromSet": "constant",
                "x": "local-const",
                "empty": "constant",
                "multiplicity": "constant",
                "size": "constant",
                "n": "local-const",
                "k": "local-const",
                "hd": "local-const",
                "a": "local-const",
                "bmax": "constant",
                "add": "constant",
                "c": "local-const",
                "combinations": "constant",
                "elt": "local-const",
                "this": "local-var",
                "remove": "constant",
                "v": "local-const",
                "s": "local-const",
                "___": "___",
                "fromList": "constant",
                "bchoose": "constant",
                "bmin": "constant",
                "bg": "local-const"
              }
          },
        "__main__": {
            "file": "bdeque_test.hny",
            "lines": [
                "import bdeque",
                "const SIZE = 2",
                "const N_PUT_LEFT = 1",
                "const N_PUT_RIGHT = 2",
                "const N_GET_LEFT = 1",
                "const N_GET_RIGHT = 1",
                "const N_PEEK_LEFT = 0",
                "const N_PEEK_RIGHT = 1",
                "",
                "d = bdeque.Bdeque(SIZE)",
                "",
                "def put_left_test(self):",
                "    print(\"call left put\", self)",
                "    bdeque.put_left(?d, (self, \"left\"))",
                "    print(\"done left put\", self)",
                "",
                "def put_right_test(self):",
                "    print(\"call right put\", self)",
                "    bdeque.put_right(?d, (self, \"rights\"))",
                "    print(\"done right put\", self)",
                "",
                "def get_left_test(self):",
                "    print(\"call left get\", self)",
                "    let v = bdeque.get_left(?d):",
                "        print(\"done left get\", self, v)",
                "",
                "def get_right_test(self):",
                "    print(\"call right get\", self)",
                "    let v = bdeque.get_right(?d):",
                "        print(\"done right get\", self, v)",
                "",
                "def peek_left_test(self):",
                "    print(\"call peek left\", self)",
                "    let v = bdeque.peek_left(?d):",
                "        print(\"done peek left\", self, v) ",
                "",
                "def peek_right_test(self):",
                "    print(\"call peek right\", self)",
                "    let v = bdeque.peek_right(?d):",
                "        print(\"done peek right\", self, v) ",
                "",
                "",
                "for i in {1..N_PUT_LEFT}:",
                "    spawn put_left_test(i)",
                "for i in {1..N_PUT_RIGHT}:",
                "    spawn put_right_test(i)",
                "for i in {1..N_GET_LEFT}:",
                "    spawn get_left_test(i)",
                "for i in {1..N_GET_RIGHT}:",
                "    spawn get_right_test(i)",
                "for i in {1..N_PEEK_LEFT}:",
                "    spawn peek_left_test(i)",
                "for i in {1..N_PEEK_RIGHT}:",
                "    spawn peek_right_test(i)",
                "",
                "    "
              ],
            "identifiers": {
                "peek_right_test": "constant",
                "d": "global",
                "N_GET_LEFT": "constant",
                "self": "local-const",
                "N_PUT_LEFT": "constant",
                "N_PUT_RIGHT": "constant",
                "i": "local-const",
                "N_GET_RIGHT": "constant",
                "bdeque": "module",
                "this": "local-var",
                "v": "local-const",
                "N_PEEK_RIGHT": "constant",
                "get_right_test": "constant",
                "get_left_test": "constant",
                "peek_left_test": "constant",
                "put_right_test": "constant",
                "N_PEEK_LEFT": "constant",
                "put_left_test": "constant",
                "___": "___",
                "SIZE": "constant"
              }
          },
        "synch": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/synch.hny",
            "lines": [
                "import list",
                "import bag",
                "",
                "def atomic_load(p) returns current:",
                "    atomically current = !p",
                "",
                "def atomic_store(p, v):",
                "    atomically !p = v",
                "",
                "def tas(lk) returns oldvalue:",
                "    atomically:",
                "        oldvalue = !lk",
                "        !lk = True",
                "",
                "def cas(p, old, new) returns success:",
                "    atomically:",
                "        success = !p == old",
                "        if success:",
                "            !p = new",
                "",
                "def BinSema(initial) returns sema:",
                "    assert initial in { False, True }",
                "    sema = initial",
                "",
                "def Lock() returns result:",
                "    result = BinSema(False)",
                "",
                "def acquired(binsema) returns result:",
                "    result = !binsema",
                "    ",
                "def held(binsema) returns result:",
                "    result = !binsema",
                "",
                "def acquire(binsema):",
                "    atomically when not !binsema:",
                "        !binsema = True",
                "",
                "def release(binsema):",
                "    atomically:",
                "        assert !binsema",
                "        !binsema = False",
                "",
                "def Condition() returns result:",
                "    result = bag.empty()",
                "",
                "def wait(c, lk):",
                "    var cnt = 0",
                "    let (), ctx = save():",
                "        atomically:",
                "            cnt = bag.multiplicity(!c, ctx)",
                "            !c = bag.add(!c, ctx)",
                "            !lk = False",
                "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):",
                "            !lk = True",
                "",
                "def notify(c):",
                "    atomically if !c != bag.empty():",
                "        !c = bag.remove(!c, bag.bchoose(!c))",
                "",
                "def notifyAll(c):",
                "    atomically !c = bag.empty()",
                "",
                "def Semaphore(cnt) returns result:",
                "    result = cnt",
                "",
                "def P(sema):",
                "    atomically when !sema > 0:",
                "        !sema -= 1",
                "",
                "def V(sema):",
                "    atomically !sema += 1",
                "    ",
                "def Queue() returns result:",
                "    result = []",
                "",
                "def get(q) returns result:",
                "    atomically when !q != []:",
                "        result = list.head(!q)",
                "        !q = list.tail(!q)",
                "",
                "def put(q, item):",
                "    atomically !q = list.append(!q, item)"
              ],
            "identifiers": {
                "held": "constant",
                "get": "constant",
                "initial": "local-const",
                "release": "constant",
                "bag": "module",
                "cnt": "local-const",
                "acquired": "constant",
                "tas": "constant",
                "atomic_load": "constant",
                "BinSema": "constant",
                "c": "local-const",
                "cas": "constant",
                "Semaphore": "constant",
                "this": "local-var",
                "v": "local-const",
                "Lock": "constant",
                "list": "module",
                "lk": "local-const",
                "wait": "constant",
                "binsema": "local-const",
                "p": "local-const",
                "q": "local-const",
                "atomic_store": "constant",
                "V": "constant",
                "new": "local-const",
                "P": "constant",
                "notifyAll": "constant",
                "put": "constant",
                "Queue": "constant",
                "___": "___",
                "old": "local-const",
                "Condition": "constant",
                "sema": "local-const",
                "item": "local-const",
                "notify": "constant",
                "ctx": "local-const",
                "acquire": "constant"
              }
          },
        "bdeque": {
            "file": "bdeque_impl.hny",
            "lines": [
                "from synch import Lock, acquire, release, wait, Condition, notify, notifyAll",
                "from alloc import malloc, free",
                "",
                "def Bdeque(n) returns initial:",
                "    '''",
                "    returns the initial value of an empty deque",
                "    '''",
                "    initial = { ",
                "        .data: [None,] *n, .head: 0, .tail: 1 % n, .count: 0, .size: n, ",
                "        .not_full: Condition(), .not_empty: Condition(), .lock: Lock()",
                "    }",
                "# put_condition = wait for it to be not full! not_full",
                "# put? not_full",
                "# get_condition = wait for it to be not empty! not_empty ",
                "# get? not_empty",
                "",
                "def put_left(d, v):",
                "    '''",
                "    d points to a deque and v is some value. ",
                "    If the deque is full, the operation should wait.",
                "    Put v at the right-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == d->size:",
                "        wait(?d->not_full, ?d->lock)",
                "    d->data[d->head] = v ",
                "    d->head = (d->head - 1) % d->size",
                "    d->count += 1",
                "    # notify all that it is no longer empty (if count is now 1) ",
                "    if d->count == 1:",
                "        notifyAll(?d->not_empty) ",
                "    release(?d->lock)",
                "",
                "def put_right(d, v):",
                "    '''",
                "    d points to a deque and v is some value. ",
                "    If the deque is full, the operation should wait.",
                "    Put v at the left-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == d->size:",
                "        wait(?d->not_full, ?d->lock)",
                "    d->data[d->tail] = v ",
                "    d->tail = (d->head + 1) % d->size",
                "    d->count += 1",
                "    # notify all that it is no longer empty (if count is now 1) ",
                "    if d->count == 1:",
                "        notifyAll(?d->not_empty) ",
                "    release(?d->lock)",
                "    ",
                "def get_left(d) returns left:",
                "    '''",
                "    d points to a deque. ",
                "    If deque is empty, the operation should wait.",
                "    Otherwise, it should remove and return the value at the left-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    d->head = (d->head + 1) % d->size",
                "    left = d->data[d->head]",
                "    d->count -= 1",
                "    # notify all that it is no longer full (if count is now = size) ",
                "    if d->count == (d->size - 1):",
                "        notifyAll(?d->not_full) ",
                "    release(?d->lock)",
                "",
                "def get_right(d) returns right:",
                "    '''",
                "    d points to a deque. ",
                "    If deque is empty, the operation should wait. ",
                "    Otherwise, it should remove and return the value at the right-end of the deque. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    d->tail = (d->head - 1) % d->size",
                "    right = d->data[d->tail]",
                "    d->count -= 1",
                "    # notify all that it is no longer full (if count is now = size) ",
                "    if d->count == (d->size - 1):",
                "        notifyAll(?d->not_full) ",
                "    release(?d->lock)",
                "",
                "def peek_left(d) returns left: ",
                "    '''",
                "    d points to a deque. ",
                "    If the deque is empty, the operation should wait. ",
                "    Otherwise, after waiting, it should return the left-most value. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    left = d->data[(d->head + 1) % d->n]",
                "    release(?d->lock)",
                "",
                "def peek_right(d) returns right: ",
                "    '''",
                "    d points to a deque. ",
                "    If the deque is empty, the operation should wait. ",
                "    Otherwise, after waiting, it should return the right-most value. ",
                "    '''",
                "    acquire(?d->lock)",
                "    while d->count == 0:",
                "        wait(?d->not_empty, ?d->lock)",
                "    right = d->data[(d->tail - 1) % d->size]",
                "    release(?d->lock)"
              ],
            "identifiers": {
                "d": "local-const",
                "alloc": "module",
                "Bdeque": "constant",
                "release": "imported",
                "peek_left": "constant",
                "get_left": "constant",
                "peek_right": "constant",
                "put_left": "constant",
                "n": "local-const",
                "free": "imported",
                "put_right": "constant",
                "synch": "module",
                "this": "local-var",
                "v": "local-const",
                "Lock": "imported",
                "wait": "imported",
                "malloc": "imported",
                "get_right": "constant",
                "notifyAll": "imported",
                "___": "___",
                "Condition": "imported",
                "notify": "imported",
                "acquire": "imported"
              }
          },
        "list": {
            "file": "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/harmony_model_checker/modules/list.hny",
            "lines": [
                "# return s[b:e]",
                "def subseq(s, b, e) returns result:",
                "    result = [ s[x] for x in {b..e-1} ]",
                "",
                "def append(s, e) returns result:",
                "    result = s + [e,]",
                "",
                "def head(s) returns result:",
                "    result = s[0]",
                "",
                "builtin tail \"list$tail\"",
                "def tail(s) returns result:",
                "    result = subseq(s, 1, len(s))",
                "",
                "# sum of a list or set",
                "def sum(a) returns accu:",
                "    accu = 0",
                "    for v in a:",
                "        accu += v",
                "",
                "# convert list (or values of a dict) to a set",
                "def set(a) returns result:",
                "    result = { v for v in a }",
                "",
                "# convert set into a (sorted) list",
                "def list(a) returns result:",
                "    result = [ v for v in a ]",
                "",
                "# convert values of a dictionary into a list",
                "def values(d) returns result:",
                "    result = [ v for _:v in d ]",
                "",
                "# like Python .items()",
                "def items(d) returns result:",
                "    result = [ (k, v) for k:v in d ]",
                "",
                "# quicksort of a list",
                "def qsort(a) returns sorted:",
                "    if a == []:",
                "        sorted = []",
                "    else:",
                "        let (pivot, rest) = head(a), tail(a)",
                "        let lower = [ v for v in rest where v < pivot ]",
                "        let higher = [ v for v in rest where v >= pivot ]:",
                "            sorted = qsort(lower) + [pivot,] + qsort(higher)",
                "",
                "# like Python sorted()",
                "def sorted(d) returns result:",
                "    result = qsort(list(d))",
                "",
                "# like Python reversed()",
                "def reversed(d) returns result:",
                "    let n = len(d):",
                "        result = [ d[n-i] for i in { 1..n } ]",
                "",
                "# like Python index()",
                "def index(d, e) returns i:",
                "    i = 0",
                "    while d[i] != e:",
                "        i += 1",
                "",
                "# like Python startswith (only defined for strings)",
                "def startswith(d, prefix) returns result:",
                "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
                "",
                "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
                "def foldl(d, f, z) returns result:",
                "    result = z",
                "    for e in d:",
                "        result = f(result, e)",
                "",
                "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
                "def foldr(d, f, z) returns result:",
                "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
                "",
                "# Python functools reduce operator",
                "def reduce(f, d, z) returns result:",
                "    result = foldl(d, f, z)",
                "",
                "# Return a permutation of set s",
                "def permuted(s) returns perm:",
                "    perm = []",
                "    var c = s",
                "    while c != {}:",
                "        let e = choose c:",
                "            perm += [ e, ]",
                "            c -= { e }",
                "",
                "# Return a list of elements satisfying the condition",
                "def filter(cond, s) returns t:",
                "    t = [ e for e in s where cond(e) ]",
                "",
                "# Return a list of elements mapped by f",
                "def map(f, s) returns t:",
                "    t = [ f(e) for e in s ]"
              ],
            "identifiers": {
                "f": "local-const",
                "z": "local-const",
                "filter": "constant",
                "d": "local-const",
                "head": "constant",
                "x": "local-const",
                "set": "constant",
                "n": "local-const",
                "higher": "local-const",
                "i": "local-const",
                "startswith": "constant",
                "foldl": "constant",
                "values": "constant",
                "k": "local-const",
                "reversed": "constant",
                "e": "local-const",
                "map": "constant",
                "qsort": "constant",
                "pivot": "local-const",
                "a": "local-const",
                "c": "local-var",
                "rest": "local-const",
                "b": "local-const",
                "permuted": "constant",
                "this": "local-var",
                "v": "local-const",
                "list": "constant",
                "prefix": "local-const",
                "subseq": "constant",
                "cond": "local-const",
                "s": "local-const",
                "lower": "local-const",
                "reduce": "constant",
                "tail": "constant",
                "___": "___",
                "sum": "constant",
                "items": "constant",
                "foldr": "constant",
                "sorted": "constant",
                "index": "constant",
                "append": "constant"
              }
          }
      },
    "labels": {
        "__end__": 1968
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame subseq(s, b, e)",
            "start of method subseq"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu3",
            "initialize accumulator for list comprehension: pop a value and store in $accu3"
          ],
        [
            "LoadVar b",
            "push the value of b"
          ],
        [
            "DelVar b",
            "delete method variable b"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 26",
            "check if loop is done: pop a value and jump to 26 if the value is False"
          ],
        [
            "LoadVar $accu3",
            "load accumulator: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu3",
            "update accumulator: pop a value and store in $accu3"
          ],
        [
            "Jump 14",
            "set program counter to 14"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu3",
            "load final accumulator result: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame append(s, e)",
            "start of method append"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 54",
            "jump over method definition: set program counter to 54"
          ],
        [
            "Frame head(s)",
            "start of method head"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(57)",
            "push constant PC(57)"
          ],
        [
            "Builtin(list$tail)",
            "top of stack is a built-in operation called list$tail"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame tail(s)",
            "start of method tail"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(2)",
            "call method PC(2)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame sum(a)",
            "start of method sum"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 87",
            "check if loop is done: pop a value and jump to 87 if the value is False"
          ],
        [
            "LoadVar accu",
            "push the value of accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "Jump 78",
            "set program counter to 78"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(accu)",
            "restore caller method state and push accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame set(a)",
            "start of method set"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu72",
            "initialize accumulator for set comprehension: pop a value and store in $accu72"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 107",
            "check if loop is done: pop a value and jump to 107 if the value is False"
          ],
        [
            "LoadVar $accu72",
            "load accumulator: push the value of $accu72"
          ],
        [
            "DelVar $accu72",
            "delete method variable $accu72"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu72",
            "update accumulator: pop a value and store in $accu72"
          ],
        [
            "Jump 98",
            "set program counter to 98"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu72",
            "load final accumulator result: push the value of $accu72"
          ],
        [
            "DelVar $accu72",
            "delete method variable $accu72"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame list(a)",
            "start of method list"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu88",
            "initialize accumulator for list comprehension: pop a value and store in $accu88"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 129",
            "check if loop is done: pop a value and jump to 129 if the value is False"
          ],
        [
            "LoadVar $accu88",
            "load accumulator: push the value of $accu88"
          ],
        [
            "DelVar $accu88",
            "delete method variable $accu88"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu88",
            "update accumulator: pop a value and store in $accu88"
          ],
        [
            "Jump 120",
            "set program counter to 120"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu88",
            "load final accumulator result: push the value of $accu88"
          ],
        [
            "DelVar $accu88",
            "delete method variable $accu88"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame values(d)",
            "start of method values"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu104",
            "initialize accumulator for list comprehension: pop a value and store in $accu104"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, v)",
            "get next element and assign to _:v; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 152",
            "check if loop is done: pop a value and jump to 152 if the value is False"
          ],
        [
            "LoadVar $accu104",
            "load accumulator: push the value of $accu104"
          ],
        [
            "DelVar $accu104",
            "delete method variable $accu104"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu104",
            "update accumulator: pop a value and store in $accu104"
          ],
        [
            "Jump 142",
            "set program counter to 142"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu104",
            "load final accumulator result: push the value of $accu104"
          ],
        [
            "DelVar $accu104",
            "delete method variable $accu104"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame items(d)",
            "start of method items"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu120",
            "initialize accumulator for list comprehension: pop a value and store in $accu120"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(k, v)",
            "get next element and assign to k:v; push False or True depending on success"
          ],
        [
            "JumpCond False 179",
            "check if loop is done: pop a value and jump to 179 if the value is False"
          ],
        [
            "LoadVar $accu120",
            "load accumulator: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu120",
            "update accumulator: pop a value and store in $accu120"
          ],
        [
            "Jump 165",
            "set program counter to 165"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu120",
            "load final accumulator result: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame qsort(a)",
            "start of method qsort"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 195",
            "pop a value and jump to 195 if the value is False"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "Jump 261",
            "set program counter to 261"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Apply PC(45)",
            "call method PC(45)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Apply PC(57)",
            "call method PC(57)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (pivot, rest)",
            "pop a value and store in (pivot, rest)"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu155",
            "initialize accumulator for list comprehension: pop a value and store in $accu155"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 222",
            "check if loop is done: pop a value and jump to 222 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 208",
            "pop a value and jump to 208 if the value is False"
          ],
        [
            "LoadVar $accu155",
            "load accumulator: push the value of $accu155"
          ],
        [
            "DelVar $accu155",
            "delete method variable $accu155"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu155",
            "update accumulator: pop a value and store in $accu155"
          ],
        [
            "Jump 208",
            "set program counter to 208"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu155",
            "load final accumulator result: push the value of $accu155"
          ],
        [
            "DelVar $accu155",
            "delete method variable $accu155"
          ],
        [
            "StoreVar lower",
            "pop a value and store in lower"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu172",
            "initialize accumulator for list comprehension: pop a value and store in $accu172"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "DelVar rest",
            "delete method variable rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 245",
            "check if loop is done: pop a value and jump to 245 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 231",
            "pop a value and jump to 231 if the value is False"
          ],
        [
            "LoadVar $accu172",
            "load accumulator: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu172",
            "update accumulator: pop a value and store in $accu172"
          ],
        [
            "Jump 231",
            "set program counter to 231"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu172",
            "load final accumulator result: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "StoreVar higher",
            "pop a value and store in higher"
          ],
        [
            "LoadVar lower",
            "push the value of lower"
          ],
        [
            "DelVar lower",
            "delete method variable lower"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "DelVar pivot",
            "delete method variable pivot"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar higher",
            "push the value of higher"
          ],
        [
            "DelVar higher",
            "delete method variable higher"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "ReturnOp(sorted)",
            "restore caller method state and push sorted"
          ],
        [
            "DelVar sorted",
            "delete method variable sorted"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame sorted(d)",
            "start of method sorted"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(113)",
            "call method PC(113)"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame reversed(d)",
            "start of method reversed"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu211",
            "initialize accumulator for list comprehension: pop a value and store in $accu211"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 298",
            "check if loop is done: pop a value and jump to 298 if the value is False"
          ],
        [
            "LoadVar $accu211",
            "load accumulator: push the value of $accu211"
          ],
        [
            "DelVar $accu211",
            "delete method variable $accu211"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu211",
            "update accumulator: pop a value and store in $accu211"
          ],
        [
            "Jump 284",
            "set program counter to 284"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "LoadVar $accu211",
            "load final accumulator result: push the value of $accu211"
          ],
        [
            "DelVar $accu211",
            "delete method variable $accu211"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame index(d, e)",
            "start of method index"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 322",
            "pop a value and jump to 322 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 309",
            "set program counter to 309"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "ReturnOp(i)",
            "restore caller method state and push i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame startswith(d, prefix)",
            "start of method startswith"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "JumpCond False 368",
            "pop a value and jump to 368 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu257",
            "initialize accumulator for list comprehension: pop a value and store in $accu257"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 361",
            "check if loop is done: pop a value and jump to 361 if the value is False"
          ],
        [
            "LoadVar $accu257",
            "load accumulator: push the value of $accu257"
          ],
        [
            "DelVar $accu257",
            "delete method variable $accu257"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu257",
            "update accumulator: pop a value and store in $accu257"
          ],
        [
            "Jump 344",
            "set program counter to 344"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "LoadVar $accu257",
            "load final accumulator result: push the value of $accu257"
          ],
        [
            "DelVar $accu257",
            "delete method variable $accu257"
          ],
        [
            "1-ary all",
            "pop 1 value and push the result of applying all"
          ],
        [
            "Jump 371",
            "set program counter to 371"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame foldl(d, f, z)",
            "start of method foldl"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 396",
            "check if loop is done: pop a value and jump to 396 if the value is False"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 382",
            "set program counter to 382"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame foldr(d, f, z)",
            "start of method foldr"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 412",
            "pop a value and jump to 412 if the value is False"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "Jump 434",
            "set program counter to 434"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(57)",
            "call method PC(57)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(400)",
            "call method PC(400)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame reduce(f, d, z)",
            "start of method reduce"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(374)",
            "call method PC(374)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame permuted(s)",
            "start of method permuted"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 482",
            "pop a value and jump to 482 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar e",
            "pop a value and store in e"
          ],
        [
            "LoadVar perm",
            "push the value of perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "Jump 459",
            "set program counter to 459"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(perm)",
            "restore caller method state and push perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame filter(cond, s)",
            "start of method filter"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu377",
            "initialize accumulator for list comprehension: pop a value and store in $accu377"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 507",
            "check if loop is done: pop a value and jump to 507 if the value is False"
          ],
        [
            "LoadVar cond",
            "push the value of cond"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 492",
            "pop a value and jump to 492 if the value is False"
          ],
        [
            "LoadVar $accu377",
            "load accumulator: push the value of $accu377"
          ],
        [
            "DelVar $accu377",
            "delete method variable $accu377"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu377",
            "update accumulator: pop a value and store in $accu377"
          ],
        [
            "Jump 492",
            "set program counter to 492"
          ],
        [
            "DelVar cond",
            "delete method variable cond"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "LoadVar $accu377",
            "load final accumulator result: push the value of $accu377"
          ],
        [
            "DelVar $accu377",
            "delete method variable $accu377"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame map(f, s)",
            "start of method map"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu398",
            "initialize accumulator for list comprehension: pop a value and store in $accu398"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 533",
            "check if loop is done: pop a value and jump to 533 if the value is False"
          ],
        [
            "LoadVar $accu398",
            "load accumulator: push the value of $accu398"
          ],
        [
            "DelVar $accu398",
            "delete method variable $accu398"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu398",
            "update accumulator: pop a value and store in $accu398"
          ],
        [
            "Jump 521",
            "set program counter to 521"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar $accu398",
            "load final accumulator result: push the value of $accu398"
          ],
        [
            "DelVar $accu398",
            "delete method variable $accu398"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame empty()",
            "start of method empty"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame fromSet(s)",
            "start of method fromSet"
          ],
        [
            "Push {:}",
            "initialize accumulator for dict comprehension: push constant {:}"
          ],
        [
            "StoreVar $accu422",
            "initialize accumulator for dict comprehension: pop a value and store in $accu422"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(elt)",
            "get next element and assign to elt; push False or True depending on success"
          ],
        [
            "JumpCond False 563",
            "check if loop is done: pop a value and jump to 563 if the value is False"
          ],
        [
            "LoadVar $accu422",
            "load accumulator: push the value of $accu422"
          ],
        [
            "DelVar $accu422",
            "delete method variable $accu422"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar $accu422",
            "update accumulator: pop a value and store in $accu422"
          ],
        [
            "Jump 553",
            "set program counter to 553"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "LoadVar $accu422",
            "load final accumulator result: push the value of $accu422"
          ],
        [
            "DelVar $accu422",
            "delete method variable $accu422"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 602",
            "jump over method definition: set program counter to 602"
          ],
        [
            "Frame fromList(a)",
            "start of method fromList"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 599",
            "check if loop is done: pop a value and jump to 599 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 592",
            "pop a value and jump to 592 if the value is False"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 576",
            "set program counter to 576"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 576",
            "set program counter to 576"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Builtin(bag$multiplicity)",
            "top of stack is a built-in operation called bag$multiplicity"
          ],
        [
            "Jump 624",
            "jump over method definition: set program counter to 624"
          ],
        [
            "Frame multiplicity(bg, elt)",
            "start of method multiplicity"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 618",
            "pop a value and jump to 618 if the value is False"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 622",
            "set program counter to 622"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(627)",
            "push constant PC(627)"
          ],
        [
            "Builtin(bag$size)",
            "top of stack is a built-in operation called bag$size"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame size(bg)",
            "start of method size"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, c)",
            "get next element and assign to _:c; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 643",
            "check if loop is done: pop a value and jump to 643 if the value is False"
          ],
        [
            "LoadVar count",
            "push the value of count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 633",
            "set program counter to 633"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(649)",
            "push constant PC(649)"
          ],
        [
            "Builtin(bag$bmin)",
            "top of stack is a built-in operation called bag$bmin"
          ],
        [
            "Jump 665",
            "jump over method definition: set program counter to 665"
          ],
        [
            "Frame bmin(bg)",
            "start of method bmin"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary min",
            "pop 1 value and push the result of applying min"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(668)",
            "push constant PC(668)"
          ],
        [
            "Builtin(bag$bmax)",
            "top of stack is a built-in operation called bag$bmax"
          ],
        [
            "Jump 693",
            "jump over method definition: set program counter to 693"
          ],
        [
            "Frame bmax(bg)",
            "start of method bmax"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Jump 693",
            "jump over method definition: set program counter to 693"
          ],
        [
            "Frame bchoose(bg)",
            "start of method bchoose"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar elt",
            "pop a value and store in elt"
          ],
        [
            "ReturnOp(elt)",
            "restore caller method state and push elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push PC(696)",
            "push constant PC(696)"
          ],
        [
            "Builtin(bag$add)",
            "top of stack is a built-in operation called bag$add"
          ],
        [
            "Jump 722",
            "jump over method definition: set program counter to 722"
          ],
        [
            "Frame add(bg, elt)",
            "start of method add"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 715",
            "pop a value and jump to 715 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 721",
            "set program counter to 721"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(725)",
            "push constant PC(725)"
          ],
        [
            "Builtin(bag$remove)",
            "top of stack is a built-in operation called bag$remove"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame remove(bg, elt)",
            "start of method remove"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 765",
            "pop a value and jump to 765 if the value is False"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 765",
            "pop a value and jump to 765 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame combinations(bg, k)",
            "start of method combinations"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 781",
            "pop a value and jump to 781 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(627)",
            "call method PC(627)"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 794",
            "pop a value and jump to 794 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 806",
            "pop a value and jump to 806 if the value is False"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 856",
            "set program counter to 856"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(649)",
            "call method PC(649)"
          ],
        [
            "StoreVar hd",
            "pop a value and store in hd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(725)",
            "call method PC(725)"
          ],
        [
            "StoreVar tl",
            "pop a value and store in tl"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu645",
            "initialize accumulator for set comprehension: pop a value and store in $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(768)",
            "call method PC(768)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 842",
            "check if loop is done: pop a value and jump to 842 if the value is False"
          ],
        [
            "LoadVar $accu645",
            "load accumulator: push the value of $accu645"
          ],
        [
            "DelVar $accu645",
            "delete method variable $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(696)",
            "call method PC(696)"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu645",
            "update accumulator: pop a value and store in $accu645"
          ],
        [
            "Jump 828",
            "set program counter to 828"
          ],
        [
            "DelVar hd",
            "delete method variable hd"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu645",
            "load final accumulator result: push the value of $accu645"
          ],
        [
            "DelVar $accu645",
            "delete method variable $accu645"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "DelVar tl",
            "delete method variable tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(768)",
            "call method PC(768)"
          ],
        [
            "2-ary |",
            "pop 2 values and push the result of applying |"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame atomic_load(p)",
            "start of method atomic_load"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar current",
            "pop a value and store in current"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(current)",
            "restore caller method state and push current"
          ],
        [
            "DelVar current",
            "delete method variable current"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame atomic_store(p, v)",
            "start of method atomic_store"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame tas(lk)",
            "start of method tas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar oldvalue",
            "pop a value and store in oldvalue"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(oldvalue)",
            "restore caller method state and push oldvalue"
          ],
        [
            "DelVar oldvalue",
            "delete method variable oldvalue"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame cas(p, old, new)",
            "start of method cas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar old",
            "push the value of old"
          ],
        [
            "DelVar old",
            "delete method variable old"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "StoreVar success",
            "pop a value and store in success"
          ],
        [
            "LoadVar success",
            "push the value of success"
          ],
        [
            "JumpCond False 906",
            "pop a value and jump to 906 if the value is False"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar new",
            "push the value of new"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(success)",
            "restore caller method state and push success"
          ],
        [
            "DelVar success",
            "delete method variable success"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame BinSema(initial)",
            "start of method BinSema"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "DelVar initial",
            "delete method variable initial"
          ],
        [
            "StoreVar sema",
            "pop a value and store in sema"
          ],
        [
            "ReturnOp(sema)",
            "restore caller method state and push sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Lock()",
            "start of method Lock"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Apply PC(912)",
            "call method PC(912)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame acquired(binsema)",
            "start of method acquired"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame held(binsema)",
            "start of method held"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame acquire(binsema)",
            "start of method acquire"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 962",
            "pop a value and jump to 962 if the value is False"
          ],
        [
            "Jump 965",
            "set program counter to 965"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 955",
            "set program counter to 955"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame release(binsema)",
            "start of method release"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Condition()",
            "start of method Condition"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame wait(c, lk)",
            "start of method wait"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Save",
            "pop a value and save context"
          ],
        [
            "Continue",
            "a no-op, must follow a Stop or Save operation"
          ],
        [
            "StoreVar ((), ctx)",
            "pop a value and store in ((), ctx)"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(696)",
            "push constant PC(696)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 1050",
            "pop a value and jump to 1050 if the value is False"
          ],
        [
            "Push PC(605)",
            "push constant PC(605)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "Jump 1051",
            "set program counter to 1051"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 1056",
            "pop a value and jump to 1056 if the value is False"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "DelVar ctx",
            "delete method variable ctx"
          ],
        [
            "Jump 1059",
            "set program counter to 1059"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1032",
            "set program counter to 1032"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame notify(c)",
            "start of method notify"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1093",
            "pop a value and jump to 1093 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(725)",
            "push constant PC(725)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push PC(685)",
            "push constant PC(685)"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame notifyAll(c)",
            "start of method notifyAll"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push PC(541)",
            "push constant PC(541)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Semaphore(cnt)",
            "start of method Semaphore"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame P(sema)",
            "start of method P"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 1125",
            "pop a value and jump to 1125 if the value is False"
          ],
        [
            "Jump 1128",
            "set program counter to 1128"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1117",
            "set program counter to 1117"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame V(sema)",
            "start of method V"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame Queue()",
            "start of method Queue"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame get(q)",
            "start of method get"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1167",
            "pop a value and jump to 1167 if the value is False"
          ],
        [
            "Jump 1170",
            "set program counter to 1170"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1158",
            "set program counter to 1158"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "Push PC(45)",
            "push constant PC(45)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(57)",
            "push constant PC(57)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1205",
            "jump over method definition: set program counter to 1205"
          ],
        [
            "Frame put(q, item)",
            "start of method put"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(33)",
            "push constant PC(33)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar item",
            "push the value of item"
          ],
        [
            "DelVar item",
            "delete method variable item"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Store alloc$pool",
            "pop a value and store it in shared variable pool"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame malloc(v)",
            "start of method malloc"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "StoreVar copy",
            "pop a value and store in copy"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(copy)",
            "restore caller method state and push copy"
          ],
        [
            "DelVar copy",
            "delete method variable copy"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame free(r)",
            "start of method free"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar r",
            "push the value of r"
          ],
        [
            "DelVar r",
            "delete method variable r"
          ],
        [
            "Del",
            "pop an address and delete the shared variable at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame leak_check()",
            "start of method leak_check"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load alloc$pool",
            "push value of shared variable pool"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Push \"alloc_leak\"",
            "push constant \"alloc_leak\""
          ],
        [
            "Assert2",
            "pop a value and a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame Bdeque(n)",
            "start of method Bdeque"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary *",
            "pop 2 values and push the result of applying *"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(989)",
            "call method PC(989)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(989)",
            "call method PC(989)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(931)",
            "call method PC(931)"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar initial",
            "pop a value and store in initial"
          ],
        [
            "ReturnOp(initial)",
            "restore caller method state and push initial"
          ],
        [
            "DelVar initial",
            "delete method variable initial"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame put_left(d, v)",
            "start of method put_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1318",
            "pop a value and jump to 1318 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1296",
            "set program counter to 1296"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1364",
            "pop a value and jump to 1364 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame put_right(d, v)",
            "start of method put_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1400",
            "pop a value and jump to 1400 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1378",
            "set program counter to 1378"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1446",
            "pop a value and jump to 1446 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame get_left(d)",
            "start of method get_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1479",
            "pop a value and jump to 1479 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1460",
            "set program counter to 1460"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar left",
            "pop a value and store in left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1529",
            "pop a value and jump to 1529 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(left)",
            "restore caller method state and push left"
          ],
        [
            "DelVar left",
            "delete method variable left"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame get_right(d)",
            "start of method get_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1563",
            "pop a value and jump to 1563 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1544",
            "set program counter to 1544"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar right",
            "pop a value and store in right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1613",
            "pop a value and jump to 1613 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_full\"",
            "push constant \"not_full\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(1097)",
            "call method PC(1097)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(right)",
            "restore caller method state and push right"
          ],
        [
            "DelVar right",
            "delete method variable right"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame peek_left(d)",
            "start of method peek_left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1647",
            "pop a value and jump to 1647 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1628",
            "set program counter to 1628"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"head\"",
            "push constant \"head\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"n\"",
            "push constant \"n\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar left",
            "pop a value and store in left"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(left)",
            "restore caller method state and push left"
          ],
        [
            "DelVar left",
            "delete method variable left"
          ],
        [
            "Jump 1723",
            "jump over method definition: set program counter to 1723"
          ],
        [
            "Frame peek_right(d)",
            "start of method peek_right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(954)",
            "call method PC(954)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"count\"",
            "push constant \"count\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 1698",
            "pop a value and jump to 1698 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"not_empty\"",
            "push constant \"not_empty\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(998)",
            "call method PC(998)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1679",
            "set program counter to 1679"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"data\"",
            "push constant \"data\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"tail\"",
            "push constant \"tail\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"size\"",
            "push constant \"size\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary %",
            "pop 2 values and push the result of applying %"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar right",
            "pop a value and store in right"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"lock\"",
            "push constant \"lock\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Apply PC(973)",
            "call method PC(973)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(right)",
            "restore caller method state and push right"
          ],
        [
            "DelVar right",
            "delete method variable right"
          ],
        [
            "Push PC(1250)",
            "push constant PC(1250)"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store d",
            "pop a value and store it in shared variable d"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame put_left_test(self)",
            "start of method put_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call left put\"",
            "push constant \"call left put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1290)",
            "push constant PC(1290)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push \"left\"",
            "push constant \"left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done left put\"",
            "push constant \"done left put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame put_right_test(self)",
            "start of method put_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call right put\"",
            "push constant \"call right put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1372)",
            "push constant PC(1372)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push \"rights\"",
            "push constant \"rights\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done right put\"",
            "push constant \"done right put\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame get_left_test(self)",
            "start of method get_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call left get\"",
            "push constant \"call left get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1454)",
            "push constant PC(1454)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done left get\"",
            "push constant \"done left get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame get_right_test(self)",
            "start of method get_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call right get\"",
            "push constant \"call right get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1538)",
            "push constant PC(1538)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done right get\"",
            "push constant \"done right get\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame peek_left_test(self)",
            "start of method peek_left_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call peek left\"",
            "push constant \"call peek left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1622)",
            "push constant PC(1622)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done peek left\"",
            "push constant \"done peek left\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1882",
            "jump over method definition: set program counter to 1882"
          ],
        [
            "Frame peek_right_test(self)",
            "start of method peek_right_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"call peek right\"",
            "push constant \"call peek right\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(1673)",
            "push constant PC(1673)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"done peek right\"",
            "push constant \"done peek right\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1895",
            "check if loop is done: pop a value and jump to 1895 if the value is False"
          ],
        [
            "Push ?PC(1729)",
            "push constant ?PC(1729)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1886",
            "set program counter to 1886"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1909",
            "check if loop is done: pop a value and jump to 1909 if the value is False"
          ],
        [
            "Push ?PC(1758)",
            "push constant ?PC(1758)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1900",
            "set program counter to 1900"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1923",
            "check if loop is done: pop a value and jump to 1923 if the value is False"
          ],
        [
            "Push ?PC(1787)",
            "push constant ?PC(1787)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1914",
            "set program counter to 1914"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1937",
            "check if loop is done: pop a value and jump to 1937 if the value is False"
          ],
        [
            "Push ?PC(1811)",
            "push constant ?PC(1811)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1928",
            "set program counter to 1928"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1951",
            "check if loop is done: pop a value and jump to 1951 if the value is False"
          ],
        [
            "Push ?PC(1835)",
            "push constant ?PC(1835)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1942",
            "set program counter to 1942"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 1965",
            "check if loop is done: pop a value and jump to 1965 if the value is False"
          ],
        [
            "Push ?PC(1859)",
            "push constant ?PC(1859)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 1956",
            "set program counter to 1956"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 33,
            "column": 14
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 33,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 48
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 30
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 75,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 89,
            "column": 84
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 90,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 94
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 96
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 42
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 55,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 43
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 17,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 21,
            "column": 19
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 33,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 55
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 57,
            "column": 44
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 66,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 69,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 73
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 39
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 41,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 74
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 53,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 29,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 37,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 34,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 55,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 6,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 55,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 61
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 69
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 37,
            "column": 35
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 59,
            "stmt": [
                57,
                16,
                59,
                6
              ],
            "line": 57,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 33,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 39,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 41
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 69,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 24
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 26,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 49,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 60,
            "column": 60
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 67,
            "column": 63
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "bdeque",
            "endline": 9,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 30,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 42,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 55,
            "column": 54
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 55,
            "column": 45
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 62,
            "column": 58
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 70,
            "column": 69
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 10,
            "endcolumn": 70,
            "column": 65
          },
        {
            "module": "bdeque",
            "endline": 10,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 9,
            "endcolumn": 70,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 8,
            "stmt": [
                8,
                5,
                11,
                5
              ],
            "line": 8,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                30
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                36
              ],
            "line": 25,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                30
              ],
            "line": 24,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                37
              ],
            "line": 27,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                17
              ],
            "line": 28,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                21
              ],
            "line": 30,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 31,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 31,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                32
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                19
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 40,
            "stmt": [
                40,
                5,
                40,
                21
              ],
            "line": 40,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 29,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                36
              ],
            "line": 42,
            "endcolumn": 36,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                30
              ],
            "line": 41,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                37
              ],
            "line": 44,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                17
              ],
            "line": 45,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                21
              ],
            "line": 47,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 31,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 31,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 48,
            "stmt": [
                48,
                9,
                48,
                32
              ],
            "line": 48,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                21
              ],
            "line": 49,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                20
              ],
            "line": 34,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 57,
            "stmt": [
                57,
                5,
                57,
                21
              ],
            "line": 57,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 59,
            "stmt": [
                59,
                9,
                59,
                37
              ],
            "line": 59,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                24
              ],
            "line": 58,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                37
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                27
              ],
            "line": 61,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 62,
            "stmt": [
                62,
                5,
                62,
                17
              ],
            "line": 62,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 32,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                33
              ],
            "line": 64,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 65,
            "stmt": [
                65,
                9,
                65,
                31
              ],
            "line": 65,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                21
              ],
            "line": 66,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                29
              ],
            "line": 51,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                21
              ],
            "line": 74,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 76,
            "stmt": [
                76,
                9,
                76,
                37
              ],
            "line": 76,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 75,
            "stmt": [
                75,
                5,
                75,
                24
              ],
            "line": 75,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 11,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 37,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 77,
            "stmt": [
                77,
                5,
                77,
                37
              ],
            "line": 77,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                28
              ],
            "line": 78,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 79,
            "stmt": [
                79,
                5,
                79,
                17
              ],
            "line": 79,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 32,
            "column": 8
          },
        {
            "module": "bdeque",
            "endline": 81,
            "stmt": [
                81,
                5,
                81,
                33
              ],
            "line": 81,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 82,
            "stmt": [
                82,
                9,
                82,
                31
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                21
              ],
            "line": 83,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 68,
            "stmt": [
                68,
                1,
                68,
                31
              ],
            "line": 68,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                21
              ],
            "line": 91,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 93,
            "stmt": [
                93,
                9,
                93,
                37
              ],
            "line": 93,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 92,
            "stmt": [
                92,
                5,
                92,
                24
              ],
            "line": 92,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 27,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 39,
            "column": 20
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "bdeque",
            "endline": 94,
            "stmt": [
                94,
                5,
                94,
                40
              ],
            "line": 94,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                21
              ],
            "line": 95,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 85,
            "stmt": [
                85,
                1,
                85,
                30
              ],
            "line": 85,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 103,
            "stmt": [
                103,
                5,
                103,
                21
              ],
            "line": 103,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 26,
            "column": 15
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 36,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 105,
            "stmt": [
                105,
                9,
                105,
                37
              ],
            "line": 105,
            "endcolumn": 37,
            "column": 9
          },
        {
            "module": "bdeque",
            "endline": 104,
            "stmt": [
                104,
                5,
                104,
                24
              ],
            "line": 104,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 25
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 32,
            "column": 22
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 40
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 37
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 43,
            "column": 21
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 44,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 44,
            "column": 13
          },
        {
            "module": "bdeque",
            "endline": 106,
            "stmt": [
                106,
                5,
                106,
                44
              ],
            "line": 106,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 107,
            "stmt": [
                107,
                5,
                107,
                21
              ],
            "line": 107,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bdeque",
            "endline": 97,
            "stmt": [
                97,
                1,
                97,
                32
              ],
            "line": 97,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                32
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 37,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 38,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                39
              ],
            "line": 14,
            "endcolumn": 39,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                32
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                24
              ],
            "line": 12,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                33
              ],
            "line": 18,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 40,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 41,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                5,
                19,
                42
              ],
            "line": 19,
            "endcolumn": 42,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                33
              ],
            "line": 20,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                1,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 31,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                32
              ],
            "line": 23,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                31
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                9,
                25,
                39
              ],
            "line": 25,
            "endcolumn": 39,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                24
              ],
            "line": 22,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                33
              ],
            "line": 28,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                32
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 30,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                40
              ],
            "line": 30,
            "endcolumn": 40,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                25
              ],
            "line": 27,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                5,
                33,
                33
              ],
            "line": 33,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 32,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                32
              ],
            "line": 34,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 30,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 36,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 39,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                9,
                35,
                40
              ],
            "line": 35,
            "endcolumn": 40,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                1,
                32,
                25
              ],
            "line": 32,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                34
              ],
            "line": 38,
            "endcolumn": 34,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 33,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 33,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                33
              ],
            "line": 39,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 31,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 40,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 41,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                26
              ],
            "line": 37,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                26
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                24
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                27
              ],
            "line": 46,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                45,
                1,
                45,
                25
              ],
            "line": 45,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                26
              ],
            "line": 48,
            "endcolumn": 26,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                1,
                47,
                24
              ],
            "line": 47,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                5,
                50,
                27
              ],
            "line": 50,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                25
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                27
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                25
              ],
            "line": 51,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                5,
                54,
                28
              ],
            "line": 54,
            "endcolumn": 28,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 53,
            "stmt": [
                53,
                1,
                53,
                26
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                1,
                1,
                56,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "(s, b, e)",
            "name": "subseq",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "value": "b",
            "op": "LoadVar"
          },
        {
            "value": "b",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "26",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "(s, e)",
            "name": "append",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "54",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "head",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Push"
          },
        {
            "value": "list$tail",
            "op": "Builtin"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "tail",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "sum",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "87",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "accu",
            "op": "LoadVar"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "pc": "78",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "accu",
            "op": "Return"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "set",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu72",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "107",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu72",
            "op": "LoadVar"
          },
        {
            "value": "$accu72",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu72",
            "op": "StoreVar"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu72",
            "op": "LoadVar"
          },
        {
            "value": "$accu72",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "list",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu88",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "129",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu88",
            "op": "LoadVar"
          },
        {
            "value": "$accu88",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu88",
            "op": "StoreVar"
          },
        {
            "pc": "120",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu88",
            "op": "LoadVar"
          },
        {
            "value": "$accu88",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "values",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu104",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "152",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu104",
            "op": "LoadVar"
          },
        {
            "value": "$accu104",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu104",
            "op": "StoreVar"
          },
        {
            "pc": "142",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu104",
            "op": "LoadVar"
          },
        {
            "value": "$accu104",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "items",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "k",
            "op": "Cut"
          },
        {
            "pc": "179",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "pc": "165",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "qsort",
            "op": "Frame"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "195",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "pc": "261",
            "op": "Jump"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(pivot, rest)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu155",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "222",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "208",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu155",
            "op": "LoadVar"
          },
        {
            "value": "$accu155",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu155",
            "op": "StoreVar"
          },
        {
            "pc": "208",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu155",
            "op": "LoadVar"
          },
        {
            "value": "$accu155",
            "op": "DelVar"
          },
        {
            "value": "lower",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": "rest",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "245",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "231",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "pc": "231",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "higher",
            "op": "StoreVar"
          },
        {
            "value": "lower",
            "op": "LoadVar"
          },
        {
            "value": "lower",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "higher",
            "op": "LoadVar"
          },
        {
            "value": "higher",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "result": "sorted",
            "op": "Return"
          },
        {
            "value": "sorted",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "sorted",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "113"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "reversed",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu211",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "298",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu211",
            "op": "LoadVar"
          },
        {
            "value": "$accu211",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu211",
            "op": "StoreVar"
          },
        {
            "pc": "284",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": "$accu211",
            "op": "LoadVar"
          },
        {
            "value": "$accu211",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, e)",
            "name": "index",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "322",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "309",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "result": "i",
            "op": "Return"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, prefix)",
            "name": "startswith",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "368",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu257",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "361",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu257",
            "op": "LoadVar"
          },
        {
            "value": "$accu257",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu257",
            "op": "StoreVar"
          },
        {
            "pc": "344",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": "$accu257",
            "op": "LoadVar"
          },
        {
            "value": "$accu257",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "all",
            "op": "Nary"
          },
        {
            "pc": "371",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldl",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "396",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "382",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldr",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "412",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "pc": "434",
            "op": "Jump"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "400"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(f, d, z)",
            "name": "reduce",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "374"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "permuted",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "482",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "e",
            "op": "StoreVar"
          },
        {
            "value": "perm",
            "op": "LoadVar"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "pc": "459",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "perm",
            "op": "Return"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(cond, s)",
            "name": "filter",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu377",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "507",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "cond",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "492",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu377",
            "op": "LoadVar"
          },
        {
            "value": "$accu377",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu377",
            "op": "StoreVar"
          },
        {
            "pc": "492",
            "op": "Jump"
          },
        {
            "value": "cond",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "$accu377",
            "op": "LoadVar"
          },
        {
            "value": "$accu377",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "(f, s)",
            "name": "map",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu398",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "533",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu398",
            "op": "LoadVar"
          },
        {
            "value": "$accu398",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu398",
            "op": "StoreVar"
          },
        {
            "pc": "521",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "$accu398",
            "op": "LoadVar"
          },
        {
            "value": "$accu398",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "empty",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "fromSet",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu422",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "Cut"
          },
        {
            "pc": "563",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu422",
            "op": "LoadVar"
          },
        {
            "value": "$accu422",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "$accu422",
            "op": "StoreVar"
          },
        {
            "pc": "553",
            "op": "Jump"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": "$accu422",
            "op": "LoadVar"
          },
        {
            "value": "$accu422",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "602",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "fromList",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "599",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "592",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "576",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "576",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": "bag$multiplicity",
            "op": "Builtin"
          },
        {
            "pc": "624",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "multiplicity",
            "op": "Frame"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "618",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "622",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "627"
              },
            "op": "Push"
          },
        {
            "value": "bag$size",
            "op": "Builtin"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "size",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "c",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "643",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "count",
            "op": "LoadVar"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "633",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmin",
            "op": "Builtin"
          },
        {
            "pc": "665",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmin",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "min",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "668"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmax",
            "op": "Builtin"
          },
        {
            "pc": "693",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmax",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "pc": "693",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bchoose",
            "op": "Frame"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": "elt",
            "op": "StoreVar"
          },
        {
            "result": "elt",
            "op": "Return"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Push"
          },
        {
            "value": "bag$add",
            "op": "Builtin"
          },
        {
            "pc": "722",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "add",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "715",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "721",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Push"
          },
        {
            "value": "bag$remove",
            "op": "Builtin"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "remove",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "765",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "765",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(bg, k)",
            "name": "combinations",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "781",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "627"
              },
            "op": "Apply"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "794",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "806",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "856",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Apply"
          },
        {
            "value": "hd",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Apply"
          },
        {
            "value": "tl",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu645",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "768"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "842",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu645",
            "op": "LoadVar"
          },
        {
            "value": "$accu645",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu645",
            "op": "StoreVar"
          },
        {
            "pc": "828",
            "op": "Jump"
          },
        {
            "value": "hd",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu645",
            "op": "LoadVar"
          },
        {
            "value": "$accu645",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "value": "tl",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "768"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "|",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "p",
            "name": "atomic_load",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "current",
            "op": "StoreVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "current",
            "op": "Return"
          },
        {
            "value": "current",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(p, v)",
            "name": "atomic_store",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "lk",
            "name": "tas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "oldvalue",
            "op": "StoreVar"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "oldvalue",
            "op": "Return"
          },
        {
            "value": "oldvalue",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(p, old, new)",
            "name": "cas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "old",
            "op": "LoadVar"
          },
        {
            "value": "old",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": "success",
            "op": "StoreVar"
          },
        {
            "value": "success",
            "op": "LoadVar"
          },
        {
            "pc": "906",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "new",
            "op": "LoadVar"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "success",
            "op": "Return"
          },
        {
            "value": "success",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "initial",
            "name": "BinSema",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": "initial",
            "op": "DelVar"
          },
        {
            "value": "sema",
            "op": "StoreVar"
          },
        {
            "result": "sema",
            "op": "Return"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Lock",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "912"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquired",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "held",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquire",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "962",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "965",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "955",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "release",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Condition",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(c, lk)",
            "name": "wait",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "op": "Save"
          },
        {
            "op": "Continue"
          },
        {
            "value": "((), ctx)",
            "op": "StoreVar"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "696"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "1050",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "pc",
                "value": "605"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "1051",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "1056",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "ctx",
            "op": "DelVar"
          },
        {
            "pc": "1059",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1032",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notify",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1093",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "725"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "685"
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notifyAll",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "541"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "cnt",
            "name": "Semaphore",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "P",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "1125",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1128",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1117",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "V",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Queue",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "q",
            "name": "get",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1167",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1170",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1158",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "57"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1205",
            "op": "Jump"
          },
        {
            "args": "(q, item)",
            "name": "put",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "33"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "item",
            "op": "LoadVar"
          },
        {
            "value": "item",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "v",
            "name": "malloc",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "copy",
            "op": "StoreVar"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "copy",
            "op": "Return"
          },
        {
            "value": "copy",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "r",
            "name": "free",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "r",
            "op": "LoadVar"
          },
        {
            "value": "r",
            "op": "DelVar"
          },
        {
            "op": "Del"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "leak_check",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "alloc_leak"
              },
            "op": "Push"
          },
        {
            "op": "Assert2"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "n",
            "name": "Bdeque",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "*",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "989"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "989"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "931"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "initial",
            "op": "StoreVar"
          },
        {
            "result": "initial",
            "op": "Return"
          },
        {
            "value": "initial",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "put_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1318",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1296",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1364",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "put_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1400",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1378",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1446",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "get_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1479",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1460",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "left",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1529",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "left",
            "op": "Return"
          },
        {
            "value": "left",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "get_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1563",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1544",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "right",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1613",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_full"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "1097"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "right",
            "op": "Return"
          },
        {
            "value": "right",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "peek_left",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1647",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1628",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "head"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "n"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "left",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "left",
            "op": "Return"
          },
        {
            "value": "left",
            "op": "DelVar"
          },
        {
            "pc": "1723",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "peek_right",
            "op": "Frame"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "954"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "count"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "1698",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "not_empty"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1679",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "data"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "tail"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "size"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "%",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "right",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "lock"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "973"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "result": "right",
            "op": "Return"
          },
        {
            "value": "right",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "1250"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "d"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "put_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call left put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1290"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done left put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "put_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call right put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1372"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "rights"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done right put"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "get_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call left get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1454"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done left get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "get_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call right get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1538"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done right get"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "peek_left_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call peek left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1622"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done peek left"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1882",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "peek_right_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "call peek right"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "1673"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "done peek right"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1895",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1729"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1886",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1909",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1758"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1900",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1923",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1787"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1914",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1937",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1811"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1928",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1951",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1835"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1942",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "1965",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1859"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "1956",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "1075a134a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Jump 54",
          "explain": "jump over method definition: set program counter to 54",
          "explain2": { "text": "jump over method definition: set program counter to 54", "args": [] },
          "npc": "54",
          "push": [ ],
          "pc": "1"
        },

        {
          "code": "Push PC(57)",
          "explain": "push constant PC(57)",
          "explain2": { "text": "push constant PC(57)", "args": [] },
          "npc": "55",
          "push": [ { "type": "pc", "value": "57" } ],
          "pc": "54"
        },

        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc () and bind to built-in method list$tail",
          "explain2": { "text": "pop pc () and bind to built-in method list$tail", "args": [ { "type": "pc", "value": "57" } ] },
          "npc": "56",
          "pop": "1",
          "push": [ ],
          "pc": "55"
        },

        {
          "code": "Jump 602",
          "explain": "jump over method definition: set program counter to 602",
          "explain2": { "text": "jump over method definition: set program counter to 602", "args": [] },
          "npc": "602",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push PC(605)",
          "explain": "push constant PC(605)",
          "explain2": { "text": "push constant PC(605)", "args": [] },
          "npc": "603",
          "push": [ { "type": "pc", "value": "605" } ],
          "pc": "602"
        },

        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc () and bind to built-in method bag$multiplicity",
          "explain2": { "text": "pop pc () and bind to built-in method bag$multiplicity", "args": [ { "type": "pc", "value": "605" } ] },
          "npc": "604",
          "pop": "1",
          "push": [ ],
          "pc": "603"
        },

        {
          "code": "Jump 624",
          "explain": "jump over method definition: set program counter to 624",
          "explain2": { "text": "jump over method definition: set program counter to 624", "args": [] },
          "npc": "624",
          "push": [ ],
          "pc": "604"
        },

        {
          "code": "Push PC(627)",
          "explain": "push constant PC(627)",
          "explain2": { "text": "push constant PC(627)", "args": [] },
          "npc": "625",
          "push": [ { "type": "pc", "value": "627" } ],
          "pc": "624"
        },

        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc () and bind to built-in method bag$size",
          "explain2": { "text": "pop pc () and bind to built-in method bag$size", "args": [ { "type": "pc", "value": "627" } ] },
          "npc": "626",
          "pop": "1",
          "push": [ ],
          "pc": "625"
        },

        {
          "code": "Jump 646",
          "explain": "jump over method definition: set program counter to 646",
          "explain2": { "text": "jump over method definition: set program counter to 646", "args": [] },
          "npc": "646",
          "push": [ ],
          "pc": "626"
        },

        {
          "code": "Push PC(649)",
          "explain": "push constant PC(649)",
          "explain2": { "text": "push constant PC(649)", "args": [] },
          "npc": "647",
          "push": [ { "type": "pc", "value": "649" } ],
          "pc": "646"
        },

        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc () and bind to built-in method bag$bmin",
          "explain2": { "text": "pop pc () and bind to built-in method bag$bmin", "args": [ { "type": "pc", "value": "649" } ] },
          "npc": "648",
          "pop": "1",
          "push": [ ],
          "pc": "647"
        },

        {
          "code": "Jump 665",
          "explain": "jump over method definition: set program counter to 665",
          "explain2": { "text": "jump over method definition: set program counter to 665", "args": [] },
          "npc": "665",
          "push": [ ],
          "pc": "648"
        },

        {
          "code": "Push PC(668)",
          "explain": "push constant PC(668)",
          "explain2": { "text": "push constant PC(668)", "args": [] },
          "npc": "666",
          "push": [ { "type": "pc", "value": "668" } ],
          "pc": "665"
        },

        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc () and bind to built-in method bag$bmax",
          "explain2": { "text": "pop pc () and bind to built-in method bag$bmax", "args": [ { "type": "pc", "value": "668" } ] },
          "npc": "667",
          "pop": "1",
          "push": [ ],
          "pc": "666"
        },

        {
          "code": "Jump 693",
          "explain": "jump over method definition: set program counter to 693",
          "explain2": { "text": "jump over method definition: set program counter to 693", "args": [] },
          "npc": "693",
          "push": [ ],
          "pc": "667"
        },

        {
          "code": "Push PC(696)",
          "explain": "push constant PC(696)",
          "explain2": { "text": "push constant PC(696)", "args": [] },
          "npc": "694",
          "push": [ { "type": "pc", "value": "696" } ],
          "pc": "693"
        },

        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc () and bind to built-in method bag$add",
          "explain2": { "text": "pop pc () and bind to built-in method bag$add", "args": [ { "type": "pc", "value": "696" } ] },
          "npc": "695",
          "pop": "1",
          "push": [ ],
          "pc": "694"
        },

        {
          "code": "Jump 722",
          "explain": "jump over method definition: set program counter to 722",
          "explain2": { "text": "jump over method definition: set program counter to 722", "args": [] },
          "npc": "722",
          "push": [ ],
          "pc": "695"
        },

        {
          "code": "Push PC(725)",
          "explain": "push constant PC(725)",
          "explain2": { "text": "push constant PC(725)", "args": [] },
          "npc": "723",
          "push": [ { "type": "pc", "value": "725" } ],
          "pc": "722"
        },

        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc () and bind to built-in method bag$remove",
          "explain2": { "text": "pop pc () and bind to built-in method bag$remove", "args": [ { "type": "pc", "value": "725" } ] },
          "npc": "724",
          "pop": "1",
          "push": [ ],
          "pc": "723"
        },

        {
          "code": "Jump 1205",
          "explain": "jump over method definition: set program counter to 1205",
          "explain2": { "text": "jump over method definition: set program counter to 1205", "args": [] },
          "npc": "1205",
          "push": [ ],
          "pc": "724"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1206",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1205"
        },

        {
          "code": "Store alloc$pool",
          "explain": "pop value ({:}) and store into variable alloc$pool",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ] },
          "shared": { "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "1207",
          "pop": "1",
          "push": [ ],
          "pc": "1206"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1208",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1207"
        },

        {
          "code": "Store alloc$next",
          "explain": "pop value (0) and store into variable alloc$next",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$next" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "1209",
          "pop": "1",
          "push": [ ],
          "pc": "1208"
        },

        {
          "code": "Jump 1723",
          "explain": "jump over method definition: set program counter to 1723",
          "explain2": { "text": "jump over method definition: set program counter to 1723", "args": [] },
          "npc": "1723",
          "push": [ ],
          "pc": "1209"
        },

        {
          "code": "Push PC(1250)",
          "explain": "push program counter constant 1250 ()",
          "explain2": { "text": "push program counter constant 1250 ()", "args": [ { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1724",
          "push": [ { "type": "pc", "value": "1250" } ],
          "pc": "1723"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "1725",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1724"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (2, PC(1250)); push result (?PC(1250)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "pc", "value": "1250" }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1726",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1725"
        },

        {
          "code": "Load",
          "explain": "pop an argument (2) and call method (1250: \"Bdeque\")",
          "explain2": { "text": "pop an argument (#+) and call method (1250: #+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1250",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "27618" }, { "type": "int", "value": "2" } ],
          "pc": "1726"
        },

        {
          "code": "Frame Bdeque(n)",
          "explain": "pop argument (2), assign to n, and run method \"Bdeque\"",
          "explain2": { "text": "pop argument (#+), assign to n, and run method #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "Bdeque" } ] },
          "npc": "1251",
          "local": { "n": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1250"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1252",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1251"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1253",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1252"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1254",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1253"
        },

        {
          "code": "Push None",
          "explain": "push constant None",
          "explain2": { "text": "push constant None", "args": [] },
          "npc": "1255",
          "push": [ { "type": "address" } ],
          "pc": "1254"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (None, []); insert first value into the second; push result ([None])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address" } ] } ] },
          "npc": "1256",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address" } ] } ],
          "pc": "1255"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1257",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1256"
        },

        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [None]); create multiple copies of list; push result ([None, None])",
          "explain2": { "text": "pop 2 values (#+, #+); create multiple copies of list; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "address" } ] }, { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } ] },
          "npc": "1258",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } ],
          "pc": "1257"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([None, None], \"data\", {:}); add key/value pair to dictionary; push result ({ \"data\": [None, None] })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] }, { "type": "atom", "value": "data" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] } ] },
          "npc": "1259",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] } ],
          "pc": "1258"
        },

        {
          "code": "Push \"head\"",
          "explain": "push constant \"head\"",
          "explain2": { "text": "push constant \"head\"", "args": [] },
          "npc": "1260",
          "push": [ { "type": "atom", "value": "head" } ],
          "pc": "1259"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1261",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1260"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"head\", { \"data\": [None, None] }); add key/value pair to dictionary; push result ({ \"data\": [None, None], \"head\": 0 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "head" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] } ] },
          "npc": "1262",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "1261"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1263",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1262"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1264",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1263"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1265",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1264"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 1); second value modulo the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "1266",
          "pop": "1",
          "push": [ ],
          "pc": "1265"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (1, \"tail\", { \"data\": [None, None], \"head\": 0 }); add key/value pair to dictionary; push result ({ \"data\": [None, None], \"head\": 0, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tail" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1267",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1266"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1268",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1267"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1269",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1268"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"count\", { \"data\": [None, None], \"head\": 0, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "count" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1270",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1269"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1271",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1270"
        },

        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "n" } ] },
          "npc": "1272",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1271"
        },

        {
          "code": "DelVar n",
          "explain": "delete method variable n",
          "explain2": { "text": "delete method variable n", "args": [] },
          "npc": "1273",
          "local": { },
          "push": [ ],
          "pc": "1272"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (2, \"size\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "size" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1274",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1273"
        },

        {
          "code": "Push \"not_full\"",
          "explain": "push constant \"not_full\"",
          "explain2": { "text": "push constant \"not_full\"", "args": [] },
          "npc": "1275",
          "push": [ { "type": "atom", "value": "not_full" } ],
          "pc": "1274"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1276",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1275"
        },

        {
          "code": "Apply PC(989)",
          "explain": "pop an argument ([]) and call method (989: \"Condition\")",
          "explain2": { "text": "pop an argument (#+) and call method (989: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Condition" } ] },
          "npc": "989",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "989","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20418" }, { "type": "list", "value": [] } ],
          "pc": "1276"
        },

        {
          "code": "Frame Condition()",
          "explain": "pop argument () and run method \"Condition\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Condition" } ] },
          "npc": "990",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "989"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "991",
          "push": [ ],
          "pc": "990"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "992",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "991"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "993",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "992"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "993"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "15906" }, { "type": "list", "value": [] } ],
          "pc": "994"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "995",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "996",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "995"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1277",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1277","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "996"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"not_full\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "dict", "value": [] }, { "type": "atom", "value": "not_full" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1278",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1277"
        },

        {
          "code": "Push \"not_empty\"",
          "explain": "push constant \"not_empty\"",
          "explain2": { "text": "push constant \"not_empty\"", "args": [] },
          "npc": "1279",
          "push": [ { "type": "atom", "value": "not_empty" } ],
          "pc": "1278"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1280",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1279"
        },

        {
          "code": "Apply PC(989)",
          "explain": "pop an argument ([]) and call method (989: \"Condition\")",
          "explain2": { "text": "pop an argument (#+) and call method (989: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Condition" } ] },
          "npc": "989",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "989","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20482" }, { "type": "list", "value": [] } ],
          "pc": "1280"
        },

        {
          "code": "Frame Condition()",
          "explain": "pop argument () and run method \"Condition\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Condition" } ] },
          "npc": "990",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "989"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "991",
          "push": [ ],
          "pc": "990"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "992",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "991"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "993",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "992"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "993"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "15906" }, { "type": "list", "value": [] } ],
          "pc": "994"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "995",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "995","xpc": "989","method_name": { "type": "atom", "value": "Condition" },
"method_arg": { "type": "list", "value": [] },
"method": "Condition()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ({:}) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "996",
          "local": { "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "995"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1281",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1281","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "996"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ({:}, \"not_empty\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "dict", "value": [] }, { "type": "atom", "value": "not_empty" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1282",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1281"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1283",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1282"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1284",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1283"
        },

        {
          "code": "Apply PC(931)",
          "explain": "pop an argument ([]) and call method (931: \"Lock\")",
          "explain2": { "text": "pop an argument (#+) and call method (931: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Lock" } ] },
          "npc": "931",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "931","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "push": [ { "type": "int", "value": "20546" }, { "type": "list", "value": [] } ],
          "pc": "1284"
        },

        {
          "code": "Frame Lock()",
          "explain": "pop argument () and run method \"Lock\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Lock" } ] },
          "npc": "932",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "931"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "933",
          "push": [ ],
          "pc": "932"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "934",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "933"
        },

        {
          "code": "Apply PC(912)",
          "explain": "pop an argument (False) and call method (912: \"BinSema\")",
          "explain2": { "text": "pop an argument (#+) and call method (912: #+)", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "912",
          "fp": "12",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "935","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8},{"pc": "912","xpc": "912","method_name": { "type": "atom", "value": "BinSema" },
"method_arg": { "type": "bool", "value": "False" },
"method": "BinSema(False)","calltype": "normal","vars":{ },"sp": 11}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "14946" }, { "type": "bool", "value": "False" } ],
          "pc": "934"
        },

        {
          "code": "Frame BinSema(initial)",
          "explain": "pop argument (False), assign to initial, and run method \"BinSema\"",
          "explain2": { "text": "pop argument (#+), assign to initial, and run method #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "913",
          "local": { "initial": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "912"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "914",
          "atomic": "2",
          "push": [ ],
          "pc": "913"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "915",
          "readonly": "1",
          "push": [ ],
          "pc": "914"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (False) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "initial" } ] },
          "npc": "916",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "915"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "917",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "916"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "918",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "917"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "919",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "918"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "920",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "919"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "921",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "920"
        },

        {
          "code": "2-ary in",
          "explain": "pop 2 values ({ False, True }, False); check if the second value is a member of the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the second value is a member of the first; push result (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "922",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "921"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "923",
          "pop": "1",
          "push": [ ],
          "pc": "922"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "924",
          "readonly": "0",
          "push": [ ],
          "pc": "923"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "925",
          "atomic": "1",
          "push": [ ],
          "pc": "924"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (False) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "initial" } ] },
          "npc": "926",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "925"
        },

        {
          "code": "DelVar initial",
          "explain": "delete method variable initial",
          "explain2": { "text": "delete method variable initial", "args": [] },
          "npc": "927",
          "local": { },
          "push": [ ],
          "pc": "926"
        },

        {
          "code": "StoreVar sema",
          "explain": "pop value (False) and store locally in variable \\\"sema\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"sema\"", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "928",
          "local": { "sema": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "927"
        },

        {
          "code": "ReturnOp(sema)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "935",
          "fp": "9",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "935","xpc": "931","method_name": { "type": "atom", "value": "Lock" },
"method_arg": { "type": "list", "value": [] },
"method": "Lock()","calltype": "normal","vars":{ },"sp": 8}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "928"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "936",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "935"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "bool", "value": "False" } ] },
          "npc": "1285",
          "fp": "4",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "1285","xpc": "1250","method_name": { "type": "atom", "value": "Bdeque" },
"method_arg": { "type": "int", "value": "2" },
"method": "Bdeque(2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "936"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (False, \"lock\", { \"count\": 0, \"data\": [None, None], \"head\": 0, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }); add key/value pair to dictionary; push result ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "atom", "value": "lock" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1286",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1285"
        },

        {
          "code": "StoreVar initial",
          "explain": "pop value ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }) and store locally in variable \\\"initial\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"initial\"", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1287",
          "local": { "initial": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1286"
        },

        {
          "code": "ReturnOp(initial)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ] },
          "npc": "1727",
          "fp": "1",
          "trace": [
{"pc": "1727","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1287"
        },

        {
          "code": "Store d",
          "explain": "pop value ({ \"count\": 0, \"data\": [None, None], \"head\": 0, \"lock\": False, \"not_empty\": {:}, \"not_full\": {:}, \"size\": 2, \"tail\": 1 }) and store into variable d",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1728",
          "pop": "1",
          "push": [ ],
          "pc": "1727"
        },

        {
          "code": "Jump 1882",
          "explain": "jump over method definition: set program counter to 1882",
          "explain2": { "text": "jump over method definition: set program counter to 1882", "args": [] },
          "npc": "1882",
          "push": [ ],
          "pc": "1728"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1883",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1882"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1884",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1883"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1885",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1884"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1886",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1885"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1887",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1886"
        },

        {
          "code": "JumpCond False 1895",
          "explain": "pop value (True), compare to False, and jump to 1895 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1895 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1888",
          "pop": "1",
          "push": [ ],
          "pc": "1887"
        },

        {
          "code": "Push ?PC(1729)",
          "explain": "push constant ?PC(1729)",
          "explain2": { "text": "push constant ?PC(1729)", "args": [] },
          "npc": "1889",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [ ] } ],
          "pc": "1888"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1890",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1889"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1891",
          "local": { },
          "push": [ ],
          "pc": "1890"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1729)); push result (?PC(1729)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1892",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1729" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1891"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1893",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1892"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1729: \"put_left_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1729: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "put_left_test" } ] },
          "npc": "1894",
          "pop": "2",
          "push": [ ],
          "pc": "1893"
        },

        {
          "code": "Jump 1886",
          "explain": "set program counter to 1886",
          "explain2": { "text": "set program counter to 1886", "args": [] },
          "npc": "1886",
          "push": [ ],
          "pc": "1894"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1887",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1886"
        },

        {
          "code": "JumpCond False 1895",
          "explain": "pop value (False), compare to False, and jump to 1895 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1895 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1895",
          "pop": "1",
          "push": [ ],
          "pc": "1887"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1896",
          "push": [ ],
          "pc": "1895"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1897",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1896"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "1898",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1897"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 1); range of integers; push result ({ 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1899",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1898"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1900",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1899"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1, 2 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1901",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (True), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1902",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "Push ?PC(1758)",
          "explain": "push constant ?PC(1758)",
          "explain2": { "text": "push constant ?PC(1758)", "args": [] },
          "npc": "1903",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] } ],
          "pc": "1902"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1904",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1903"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1905",
          "local": { },
          "push": [ ],
          "pc": "1904"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1758)); push result (?PC(1758)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1906",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1905"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1907",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1906"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1758: \"put_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1758: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1908",
          "pop": "2",
          "push": [ ],
          "pc": "1907"
        },

        {
          "code": "Jump 1900",
          "explain": "set program counter to 1900",
          "explain2": { "text": "set program counter to 1900", "args": [] },
          "npc": "1900",
          "push": [ ],
          "pc": "1908"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1, 2 }); assign value (2) to i; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1901",
          "local": { "i": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (True), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1902",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "Push ?PC(1758)",
          "explain": "push constant ?PC(1758)",
          "explain2": { "text": "push constant ?PC(1758)", "args": [] },
          "npc": "1903",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] } ],
          "pc": "1902"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (2) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "i" } ] },
          "npc": "1904",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1903"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1905",
          "local": { },
          "push": [ ],
          "pc": "1904"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?PC(1758)); push result (?PC(1758)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1906",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1758" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1905"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1907",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1906"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (2), and pc (1758: \"put_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1758: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "2" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1908",
          "pop": "2",
          "push": [ ],
          "pc": "1907"
        },

        {
          "code": "Jump 1900",
          "explain": "set program counter to 1900",
          "explain2": { "text": "set program counter to 1900", "args": [] },
          "npc": "1900",
          "push": [ ],
          "pc": "1908"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1901",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1900"
        },

        {
          "code": "JumpCond False 1909",
          "explain": "pop value (False), compare to False, and jump to 1909 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1909 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1909",
          "pop": "1",
          "push": [ ],
          "pc": "1901"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1910",
          "push": [ ],
          "pc": "1909"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1911",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1910"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1912",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1911"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1913",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1912"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1914",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1913"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1915",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1914"
        },

        {
          "code": "JumpCond False 1923",
          "explain": "pop value (True), compare to False, and jump to 1923 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1923 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1916",
          "pop": "1",
          "push": [ ],
          "pc": "1915"
        },

        {
          "code": "Push ?PC(1787)",
          "explain": "push constant ?PC(1787)",
          "explain2": { "text": "push constant ?PC(1787)", "args": [] },
          "npc": "1917",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [ ] } ],
          "pc": "1916"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1918",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1917"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1919",
          "local": { },
          "push": [ ],
          "pc": "1918"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1787)); push result (?PC(1787)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1920",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1787" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1919"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1921",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1920"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1787: \"get_left_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1787: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "get_left_test" } ] },
          "npc": "1922",
          "pop": "2",
          "push": [ ],
          "pc": "1921"
        },

        {
          "code": "Jump 1914",
          "explain": "set program counter to 1914",
          "explain2": { "text": "set program counter to 1914", "args": [] },
          "npc": "1914",
          "push": [ ],
          "pc": "1922"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1915",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1914"
        },

        {
          "code": "JumpCond False 1923",
          "explain": "pop value (False), compare to False, and jump to 1923 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1923 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1923",
          "pop": "1",
          "push": [ ],
          "pc": "1915"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1924",
          "push": [ ],
          "pc": "1923"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1925",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1924"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1926",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1925"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1927",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1926"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1928",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1927"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1929",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1928"
        },

        {
          "code": "JumpCond False 1937",
          "explain": "pop value (True), compare to False, and jump to 1937 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1937 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1930",
          "pop": "1",
          "push": [ ],
          "pc": "1929"
        },

        {
          "code": "Push ?PC(1811)",
          "explain": "push constant ?PC(1811)",
          "explain2": { "text": "push constant ?PC(1811)", "args": [] },
          "npc": "1931",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [ ] } ],
          "pc": "1930"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1932",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1931"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1933",
          "local": { },
          "push": [ ],
          "pc": "1932"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1811)); push result (?PC(1811)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1934",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1811" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1933"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1935",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1934"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1811: \"get_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1811: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "get_right_test" } ] },
          "npc": "1936",
          "pop": "2",
          "push": [ ],
          "pc": "1935"
        },

        {
          "code": "Jump 1928",
          "explain": "set program counter to 1928",
          "explain2": { "text": "set program counter to 1928", "args": [] },
          "npc": "1928",
          "push": [ ],
          "pc": "1936"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1929",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1928"
        },

        {
          "code": "JumpCond False 1937",
          "explain": "pop value (False), compare to False, and jump to 1937 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1937 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1937",
          "pop": "1",
          "push": [ ],
          "pc": "1929"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1938",
          "push": [ ],
          "pc": "1937"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1939",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1938"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1940",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1939"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (0, 1); range of integers; push result ({})",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "set", "value": [] } ] },
          "npc": "1941",
          "pop": "2",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1940"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1942",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1941"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({}); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "1943",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1942"
        },

        {
          "code": "JumpCond False 1951",
          "explain": "pop value (False), compare to False, and jump to 1951 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1951 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1951",
          "pop": "1",
          "push": [ ],
          "pc": "1943"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1952",
          "push": [ ],
          "pc": "1951"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1953",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1952"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1954",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1953"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (1, 1); range of integers; push result ({ 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1955",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1954"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1956",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1955"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1957",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1956"
        },

        {
          "code": "JumpCond False 1965",
          "explain": "pop value (True), compare to False, and jump to 1965 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1965 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1958",
          "pop": "1",
          "push": [ ],
          "pc": "1957"
        },

        {
          "code": "Push ?PC(1859)",
          "explain": "push constant ?PC(1859)",
          "explain2": { "text": "push constant ?PC(1859)", "args": [] },
          "npc": "1959",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [ ] } ],
          "pc": "1958"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "1960",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1959"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1961",
          "local": { },
          "push": [ ],
          "pc": "1960"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1859)); push result (?PC(1859)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1962",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1859" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1961"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1963",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1962"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (1859: \"peek_right_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1859: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "peek_right_test" } ] },
          "npc": "1964",
          "pop": "2",
          "push": [ ],
          "pc": "1963"
        },

        {
          "code": "Jump 1956",
          "explain": "set program counter to 1956",
          "explain2": { "text": "set program counter to 1956", "args": [] },
          "npc": "1956",
          "push": [ ],
          "pc": "1964"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1957",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1956"
        },

        {
          "code": "JumpCond False 1965",
          "explain": "pop value (False), compare to False, and jump to 1965 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1965 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1965",
          "pop": "1",
          "push": [ ],
          "pc": "1957"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "1966",
          "push": [ ],
          "pc": "1965"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1966",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "1966"
        }

      ],
      "ctxbag": {
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80063a": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13e80063a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13e80063a",
        "fp": "1",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1758",
        "sp": "1",
        "stack": [{ "type": "int", "value": "2" }],
        "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "2" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame put_right_test(self)",
          "explain": "pop argument (2), assign to self, and run method \"put_right_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "put_right_test" } ] },
          "npc": "1759",
          "fp": "1",
          "trace": [
{"pc": "1759","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1758"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1760",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1759"
        },

        {
          "code": "Push \"call right put\"",
          "explain": "push constant \"call right put\"",
          "explain2": { "text": "push constant \"call right put\"", "args": [] },
          "npc": "1761",
          "push": [ { "type": "atom", "value": "call right put" } ],
          "pc": "1760"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"call right put\", []); insert first value into the second; push result ([\"call right put\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "call right put" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] } ] },
          "npc": "1762",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] } ],
          "pc": "1761"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1763",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1762"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"call right put\"]); insert first value into the second; push result ([\"call right put\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1764",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1763"
        }

      ],
      "ctxbag": {
          "13c8000ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c8000ea",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1764",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1764","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "19",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c8000ea",
        "fp": "1",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1764",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] }],
        "trace": [
{"pc": "1764","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"call right put\", 2]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "call right put" }, { "type": "int", "value": "2" } ] },
          "npc": "1765",
          "fp": "1",
          "trace": [
{"pc": "1765","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "1764"
        },

        {
          "code": "Push PC(1372)",
          "explain": "push program counter constant 1372 ()",
          "explain2": { "text": "push program counter constant 1372 ()", "args": [ { "type": "atom", "value": "put_right" } ] },
          "npc": "1766",
          "push": [ { "type": "pc", "value": "1372" } ],
          "pc": "1765"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1767",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1766"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "1768",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1767"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?d, []); insert first value into the second; push result ([?d])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "1769",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "1768"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1770",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1769"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1771",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1770"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "1772",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1771"
        },

        {
          "code": "Push \"rights\"",
          "explain": "push constant \"rights\"",
          "explain2": { "text": "push constant \"rights\"", "args": [] },
          "npc": "1773",
          "push": [ { "type": "atom", "value": "rights" } ],
          "pc": "1772"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"rights\", [2]); insert first value into the second; push result ([2, \"rights\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "rights" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
          "npc": "1774",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ],
          "pc": "1773"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([2, \"rights\"], [?d]); insert first value into the second; push result ([?d, [2, \"rights\"]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] },
          "npc": "1775",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ],
          "pc": "1774"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([?d, [2, \"rights\"]], PC(1372)); push result (?PC(1372)[[?d, [2, \"rights\"]]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "pc", "value": "1372" }, { "type": "address", "func": { "type": "pc", "value": "1372" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] } ] },
          "npc": "1776",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1372" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ] } ],
          "pc": "1775"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([?d, [2, \"rights\"]]) and call method (1372: \"put_right\")",
          "explain2": { "text": "pop an argument (#+) and call method (1372: #+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "atom", "value": "put_right" } ] },
          "npc": "1372",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1372","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "self": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } ],
          "pc": "1776"
        },

        {
          "code": "Frame put_right(d, v)",
          "explain": "pop argument ([?d, [2, \"rights\"]]), assign to (d, v), and run method \"put_right\"",
          "explain2": { "text": "pop argument (#+), assign to (d, v), and run method #+", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] }, { "type": "atom", "value": "put_right" } ] },
          "npc": "1373",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "1372"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1374",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1373"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1375",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1374"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1376",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1375"
        },

        {
          "code": "Apply PC(954)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (954: \"acquire\")",
          "explain2": { "text": "pop an argument (#+) and call method (954: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "954",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "954","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1376"
        },

        {
          "code": "Frame acquire(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"acquire\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "955",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] } ],
          "pc": "954"
        }

      ],
      "ctxbag": {
          "1258002ca": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1258002ca",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "955",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "29",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1258002ca",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "955",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "22018" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "956",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3},{"pc": "956","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "955"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "957",
          "readonly": "1",
          "push": [ ],
          "pc": "956"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "958",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "957"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "959",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "958"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "960",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "JumpCond False 962",
          "explain": "pop value (True), compare to False, and jump to 962 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 962 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "961",
          "pop": "1",
          "push": [ ],
          "pc": "960"
        },

        {
          "code": "Jump 965",
          "explain": "set program counter to 965",
          "explain2": { "text": "set program counter to 965", "args": [] },
          "npc": "965",
          "push": [ ],
          "pc": "961"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "966",
          "readonly": "0",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "967",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "966"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "968",
          "local": { },
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "969",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "968"
        },

        {
          "code": "Store",
          "explain": "pop value (True) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "True" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "970",
          "pop": "2",
          "push": [ ],
          "pc": "969"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "971",
          "atomic": "0",
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1377",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1377","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "971"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1378",
          "pop": "1",
          "push": [ ],
          "pc": "1377"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1379",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1378"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1380",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1379"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1381",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1380"
        }

      ],
      "ctxbag": {
          "11180000a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11180000a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1381",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1381","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "156",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11180000a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1381",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1381","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1382",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1382","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1381"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1383",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1382"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1384",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1383"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1385",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1384"
        }

      ],
      "ctxbag": {
          "13a80003a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a80003a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1385",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1385","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "436",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a80003a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1385",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1385","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1386",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1386","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1385"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (2, 0); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "bool", "value": "False" } ] },
          "npc": "1387",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1386"
        },

        {
          "code": "JumpCond False 1400",
          "explain": "pop value (False), compare to False, and jump to 1400 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1400 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1400",
          "pop": "1",
          "push": [ ],
          "pc": "1387"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1401",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1400"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1402",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1401"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"data\", ?d); push result (?d[\"data\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "data" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ] },
          "npc": "1403",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ],
          "pc": "1402"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1404",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1403"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1405",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1404"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1406",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1405"
        }

      ],
      "ctxbag": {
          "13c80057a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c80057a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1406",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1406","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"tail\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "490",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c80057a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1406",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1406","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"tail\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"tail\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1407",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1407","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1406"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?d[\"data\"]); push result (?d[\"data\"][1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1408",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1407"
        },

        {
          "code": "LoadVar v",
          "explain": "push value ([2, \"rights\"]) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "atom", "value": "v" } ] },
          "npc": "1409",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ],
          "pc": "1408"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "1410",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "push": [ ],
          "pc": "1409"
        }

      ],
      "ctxbag": {
          "11500005a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11500005a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1410",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1410","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"data\"][1]", "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1288",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "address" } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11500005a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1410",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1410","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"data\"][1]", "value": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value ([2, \"rights\"]) and address (?d[\"data\"][1]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "1" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1411",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1411","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1410"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1412",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1411"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1413",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1412"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1414",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1413"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1415",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1414"
        },

        {
          "code": "Push \"head\"",
          "explain": "push constant \"head\"",
          "explain2": { "text": "push constant \"head\"", "args": [] },
          "npc": "1416",
          "push": [ { "type": "atom", "value": "head" } ],
          "pc": "1415"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"head\", ?d); push result (?d[\"head\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "head" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] } ] },
          "npc": "1417",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] } ],
          "pc": "1416"
        }

      ],
      "ctxbag": {
          "13a8005ca": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a8005ca",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1417",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1417","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"head\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "2276",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a8005ca",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1417",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1417","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"head\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"head\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "head" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1418",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1418","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1417"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1419",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1418"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "1420",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1419"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1421",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1420"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1422",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1421"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1423",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1422"
        }

      ],
      "ctxbag": {
          "13c80068a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c80068a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1423",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1423","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3030",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13c80068a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1423",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1423","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1424",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1424","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1423"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 1); second value modulo the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "1425",
          "pop": "1",
          "push": [ ],
          "pc": "1424"
        }

      ],
      "ctxbag": {
          "12000042a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "12000042a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1425",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1425","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"tail\"]", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4241",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "12000042a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1425",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1425","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"tail\"]", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?d[\"tail\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1426",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1426","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1425"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1427",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1426"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1428",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1427"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1429",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1428"
        },

        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "explain2": { "text": "push a copy of the top value on the stack", "args": [] },
          "npc": "1430",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1429"
        }

      ],
      "ctxbag": {
          "12000047a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "12000047a",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1430",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1430","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5679",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "12000047a",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1430",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1430","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1431",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1431","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1430"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1432",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1431"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "1433",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1432"
        }

      ],
      "ctxbag": {
          "1220005ba": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1220005ba",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1433",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1433","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Store", "var": "d[\"count\"]", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6742",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1220005ba",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1433",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1433","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Store", "var": "d[\"count\"]", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?d[\"count\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "1434",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1434","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "2",
          "push": [ ],
          "pc": "1433"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1435",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1434"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1436",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1435"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1437",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1436"
        }

      ],
      "ctxbag": {
          "1150002ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "1150002ea",
          "fp": "4",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1437",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1437","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8066",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "1150002ea",
        "fp": "4",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1437",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1437","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1438",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1438","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1437"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1439",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1438"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (1, 1); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "1440",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1439"
        },

        {
          "code": "JumpCond False 1446",
          "explain": "pop value (True), compare to False, and jump to 1446 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1446 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1441",
          "pop": "1",
          "push": [ ],
          "pc": "1440"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1442",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1441"
        },

        {
          "code": "Push \"not_empty\"",
          "explain": "push constant \"not_empty\"",
          "explain2": { "text": "push constant \"not_empty\"", "args": [] },
          "npc": "1443",
          "push": [ { "type": "atom", "value": "not_empty" } ],
          "pc": "1442"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"not_empty\", ?d); push result (?d[\"not_empty\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "not_empty" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ] },
          "npc": "1444",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1443"
        },

        {
          "code": "Apply PC(1097)",
          "explain": "pop an argument (?d[\"not_empty\"]) and call method (1097: \"notifyAll\")",
          "explain2": { "text": "pop an argument (#+) and call method (1097: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "notifyAll" } ] },
          "npc": "1097",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1097","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1444"
        },

        {
          "code": "Frame notifyAll(c)",
          "explain": "pop argument (?d[\"not_empty\"]), assign to c, and run method \"notifyAll\"",
          "explain2": { "text": "pop argument (#+), assign to c, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "notifyAll" } ] },
          "npc": "1098",
          "local": { "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] } ],
          "pc": "1097"
        }

      ],
      "ctxbag": {
          "11180066a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "11180066a",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1098",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1098","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10883",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "11180066a",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "1098",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23106" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1098","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "1099",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1099","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ "c": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "1098"
        },

        {
          "code": "LoadVar c",
          "explain": "push value (?d[\"not_empty\"]) of variable \"c\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] }, { "type": "atom", "value": "c" } ] },
          "npc": "1100",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ],
          "pc": "1099"
        },

        {
          "code": "DelVar c",
          "explain": "delete method variable c",
          "explain2": { "text": "delete method variable c", "args": [] },
          "npc": "1101",
          "local": { },
          "push": [ ],
          "pc": "1100"
        },

        {
          "code": "Push PC(541)",
          "explain": "push program counter constant 541 ()",
          "explain2": { "text": "push program counter constant 541 ()", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "1102",
          "push": [ { "type": "pc", "value": "541" } ],
          "pc": "1101"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1103",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1102"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(541)); push result (?PC(541)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "541" }, { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "1104",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "541" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "1103"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (541: \"empty\")",
          "explain2": { "text": "pop an argument (#+) and call method (541: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "empty" } ] },
          "npc": "541",
          "fp": "11",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1105","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ },"sp": 6},{"pc": "541","xpc": "541","method_name": { "type": "atom", "value": "empty" },
"method_arg": { "type": "list", "value": [] },
"method": "empty()","calltype": "normal","vars":{ },"sp": 10}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "17666" }, { "type": "list", "value": [] } ],
          "pc": "1104"
        },

        {
          "code": "Frame empty()",
          "explain": "pop argument () and run method \"empty\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "empty" } ] },
          "npc": "542",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "541"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "543",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "542"
        },

        {
          "code": "StoreVar bg",
          "explain": "pop value ({:}) and store locally in variable \\\"bg\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"bg\"", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "544",
          "local": { "bg": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "543"
        },

        {
          "code": "ReturnOp(bg)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [] } ] },
          "npc": "1105",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "1105","xpc": "1097","method_name": { "type": "atom", "value": "notifyAll" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] },
"method": "notifyAll(?d[\"not_empty\"])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "544"
        },

        {
          "code": "Store",
          "explain": "pop value ({:}) and address (?d[\"not_empty\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "not_empty" } ] } ] },
          "npc": "1106",
          "pop": "2",
          "push": [ ],
          "pc": "1105"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "1107",
          "atomic": "0",
          "push": [ ],
          "pc": "1106"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1445",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1445","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1107"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1446",
          "pop": "1",
          "push": [ ],
          "pc": "1445"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1447",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1446"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "1448",
          "local": { },
          "push": [ ],
          "pc": "1447"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1449",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1448"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1450",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1449"
        },

        {
          "code": "Apply PC(973)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (973: \"release\")",
          "explain2": { "text": "pop an argument (#+) and call method (973: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "973",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "973","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1450"
        },

        {
          "code": "Frame release(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"release\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "974",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "973"
        }

      ],
      "ctxbag": {
          "13a8007ea": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13a8007ea",
          "fp": "7",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "974",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "dict", "value": [] }],
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12528",
      "tid": "3",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "put_right_test(2)",
      "context": {
        "tid": "3",
        "hvalue": "13a8007ea",
        "fp": "7",
        "name": "put_right_test(2)",
        "entry": "1758",
        "pc": "974",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "28418" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "23202" }, { "type": "dict", "value": [] }],
        "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "975",
          "fp": "7",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3},{"pc": "975","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "974"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "976",
          "atomic": "2",
          "push": [ ],
          "pc": "975"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "977",
          "readonly": "1",
          "push": [ ],
          "pc": "976"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "978",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "977"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (True)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "979",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "978"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "980",
          "pop": "1",
          "push": [ ],
          "pc": "979"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "981",
          "readonly": "0",
          "push": [ ],
          "pc": "980"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "982",
          "atomic": "1",
          "push": [ ],
          "pc": "981"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "983",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "982"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "984",
          "local": { },
          "push": [ ],
          "pc": "983"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "985",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "984"
        },

        {
          "code": "Store",
          "explain": "pop value (False) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "986",
          "pop": "2",
          "push": [ ],
          "pc": "985"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "987",
          "atomic": "0",
          "push": [ ],
          "pc": "986"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1451",
          "fp": "4",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "1451","xpc": "1372","method_name": { "type": "atom", "value": "put_right" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] },
"method": "put_right(?d, [2, \"rights\"])","calltype": "normal","vars":{ },"sp": 3}
          ],
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "987"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1452",
          "pop": "1",
          "push": [ ],
          "pc": "1451"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1777",
          "fp": "1",
          "trace": [
{"pc": "1777","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1452"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1778",
          "pop": "1",
          "push": [ ],
          "pc": "1777"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1779",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1778"
        },

        {
          "code": "Push \"done right put\"",
          "explain": "push constant \"done right put\"",
          "explain2": { "text": "push constant \"done right put\"", "args": [] },
          "npc": "1780",
          "push": [ { "type": "atom", "value": "done right put" } ],
          "pc": "1779"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"done right put\", []); insert first value into the second; push result ([\"done right put\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "done right put" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] } ] },
          "npc": "1781",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] } ],
          "pc": "1780"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "1782",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1781"
        },

        {
          "code": "DelVar self",
          "explain": "delete method variable self",
          "explain2": { "text": "delete method variable self", "args": [] },
          "npc": "1783",
          "local": { },
          "push": [ ],
          "pc": "1782"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"done right put\"]); insert first value into the second; push result ([\"done right put\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "1784",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1783"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1",
          "13e80072a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13e80072a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1859",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13354",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13e80072a",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1859",
        "sp": "1",
        "stack": [{ "type": "int", "value": "1" }],
        "trace": [
{"pc": "1859","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "peek_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame peek_right_test(self)",
          "explain": "pop argument (1), assign to self, and run method \"peek_right_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "peek_right_test" } ] },
          "npc": "1860",
          "fp": "1",
          "trace": [
{"pc": "1860","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1859"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1861",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1860"
        },

        {
          "code": "Push \"call peek right\"",
          "explain": "push constant \"call peek right\"",
          "explain2": { "text": "push constant \"call peek right\"", "args": [] },
          "npc": "1862",
          "push": [ { "type": "atom", "value": "call peek right" } ],
          "pc": "1861"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"call peek right\", []); insert first value into the second; push result ([\"call peek right\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "call peek right" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] } ] },
          "npc": "1863",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] } ],
          "pc": "1862"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (1) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "self" } ] },
          "npc": "1864",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1863"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [\"call peek right\"]); insert first value into the second; push result ([\"call peek right\", 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1865",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1864"
        }

      ],
      "ctxbag": {
          "13c8001da": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c8001da",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1865",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] }],
          "trace": [
{"pc": "1865","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "15356",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c8001da",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1865",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] }],
        "trace": [
{"pc": "1865","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"call peek right\", 1]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "call peek right" }, { "type": "int", "value": "1" } ] },
          "npc": "1866",
          "fp": "1",
          "trace": [
{"pc": "1866","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "1865"
        },

        {
          "code": "Push PC(1673)",
          "explain": "push program counter constant 1673 ()",
          "explain2": { "text": "push program counter constant 1673 ()", "args": [ { "type": "atom", "value": "peek_right" } ] },
          "npc": "1867",
          "push": [ { "type": "pc", "value": "1673" } ],
          "pc": "1866"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "1868",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1867"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?d, PC(1673)); push result (?PC(1673)[?d])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "pc", "value": "1673" }, { "type": "address", "func": { "type": "pc", "value": "1673" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "1869",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1673" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "1868"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?d) and call method (1673: \"peek_right\")",
          "explain2": { "text": "pop an argument (#+) and call method (1673: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "peek_right" } ] },
          "npc": "1673",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1673","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "self": { "type": "int", "value": "1" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1869"
        },

        {
          "code": "Frame peek_right(d)",
          "explain": "pop argument (?d), assign to d, and run method \"peek_right\"",
          "explain2": { "text": "pop argument (#+), assign to d, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "peek_right" } ] },
          "npc": "1674",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1673"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1675",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1674"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1676",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1675"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1677",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1676"
        },

        {
          "code": "Apply PC(954)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (954: \"acquire\")",
          "explain2": { "text": "pop an argument (#+) and call method (954: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "954",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "954","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1677"
        },

        {
          "code": "Frame acquire(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"acquire\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "955",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] } ],
          "pc": "954"
        }

      ],
      "ctxbag": {
          "12580044a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "12580044a",
          "fp": "7",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "955",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "16664",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "12580044a",
        "fp": "7",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "955",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "26834" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "955","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "956",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3},{"pc": "956","xpc": "954","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "acquire(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "955"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "957",
          "readonly": "1",
          "push": [ ],
          "pc": "956"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "958",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "957"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "959",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "958"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "960",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "JumpCond False 962",
          "explain": "pop value (True), compare to False, and jump to 962 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 962 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "961",
          "pop": "1",
          "push": [ ],
          "pc": "960"
        },

        {
          "code": "Jump 965",
          "explain": "set program counter to 965",
          "explain2": { "text": "set program counter to 965", "args": [] },
          "npc": "965",
          "push": [ ],
          "pc": "961"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "966",
          "readonly": "0",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "967",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "966"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "968",
          "local": { },
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "969",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "968"
        },

        {
          "code": "Store",
          "explain": "pop value (True) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "True" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "970",
          "pop": "2",
          "push": [ ],
          "pc": "969"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "971",
          "atomic": "0",
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1678",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1678","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "971"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1679",
          "pop": "1",
          "push": [ ],
          "pc": "1678"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1680",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1679"
        },

        {
          "code": "Push \"count\"",
          "explain": "push constant \"count\"",
          "explain2": { "text": "push constant \"count\"", "args": [] },
          "npc": "1681",
          "push": [ { "type": "atom", "value": "count" } ],
          "pc": "1680"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"count\", ?d); push result (?d[\"count\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "count" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ] },
          "npc": "1682",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] } ],
          "pc": "1681"
        }

      ],
      "ctxbag": {
          "12200000a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "12200000a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1682",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1682","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"count\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "18404",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "12200000a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1682",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1682","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"count\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"count\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "count" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1683",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1683","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1682"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1684",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1683"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values (0, 1); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "1685",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1684"
        },

        {
          "code": "JumpCond False 1698",
          "explain": "pop value (False), compare to False, and jump to 1698 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1698 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1698",
          "pop": "1",
          "push": [ ],
          "pc": "1685"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1699",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1698"
        },

        {
          "code": "Push \"data\"",
          "explain": "push constant \"data\"",
          "explain2": { "text": "push constant \"data\"", "args": [] },
          "npc": "1700",
          "push": [ { "type": "atom", "value": "data" } ],
          "pc": "1699"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"data\", ?d); push result (?d[\"data\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "data" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ] },
          "npc": "1701",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] } ],
          "pc": "1700"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1702",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1701"
        },

        {
          "code": "Push \"tail\"",
          "explain": "push constant \"tail\"",
          "explain2": { "text": "push constant \"tail\"", "args": [] },
          "npc": "1703",
          "push": [ { "type": "atom", "value": "tail" } ],
          "pc": "1702"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"tail\", ?d); push result (?d[\"tail\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "tail" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ] },
          "npc": "1704",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] } ],
          "pc": "1703"
        }

      ],
      "ctxbag": {
          "1150007aa": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "1150007aa",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1704",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1704","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"tail\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "20282",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "1150007aa",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1704",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1704","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"tail\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"tail\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "tail" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1705",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1705","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1704"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1706",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1705"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "1707",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1706"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1708",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1707"
        },

        {
          "code": "Push \"size\"",
          "explain": "push constant \"size\"",
          "explain2": { "text": "push constant \"size\"", "args": [] },
          "npc": "1709",
          "push": [ { "type": "atom", "value": "size" } ],
          "pc": "1708"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"size\", ?d); push result (?d[\"size\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "size" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ] },
          "npc": "1710",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] } ],
          "pc": "1709"
        }

      ],
      "ctxbag": {
          "11500094a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "11500094a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1710",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1710","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"size\"]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "22296",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "11500094a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1710",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1710","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"size\"]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"size\"]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "size" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "1711",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1711","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1710"
        },

        {
          "code": "2-ary %",
          "explain": "pop 2 values (2, 0); second value modulo the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); second value modulo the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] },
          "npc": "1712",
          "pop": "1",
          "push": [ ],
          "pc": "1711"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?d[\"data\"]); push result (?d[\"data\"][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1713",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1712"
        }

      ],
      "ctxbag": {
          "111800d8a": "1",
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "111800d8a",
          "fp": "4",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1713",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1713","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "Load", "var": "d[\"data\"][0]" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "26099",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "111800d8a",
        "fp": "4",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1713",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1713","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "Load", "var": "d[\"data\"][0]" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address (?d[\"data\"][0]) and push value (None)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "data" }, { "type": "int", "value": "0" } ] }, { "type": "address" } ] },
          "npc": "1714",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1714","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "1713"
        },

        {
          "code": "StoreVar right",
          "explain": "pop value (None) and store locally in variable \\\"right\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"right\"", "args": [ { "type": "address" } ] },
          "npc": "1715",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "right": { "type": "address" } },
          "pop": "1",
          "push": [ ],
          "pc": "1714"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "1716",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "1715"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "1717",
          "local": { "right": { "type": "address" } },
          "push": [ ],
          "pc": "1716"
        },

        {
          "code": "Push \"lock\"",
          "explain": "push constant \"lock\"",
          "explain2": { "text": "push constant \"lock\"", "args": [] },
          "npc": "1718",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1717"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"lock\", ?d); push result (?d[\"lock\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "lock" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "npc": "1719",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1718"
        },

        {
          "code": "Apply PC(973)",
          "explain": "pop an argument (?d[\"lock\"]) and call method (973: \"release\")",
          "explain2": { "text": "pop an argument (#+) and call method (973: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "973",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "973","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1719"
        },

        {
          "code": "Frame release(binsema)",
          "explain": "pop argument (?d[\"lock\"]), assign to binsema, and run method \"release\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "release" } ] },
          "npc": "974",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] } ],
          "pc": "973"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13c80134a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c80134a",
          "fp": "7",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "974",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] }],
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "29724",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c80134a",
        "fp": "7",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "974",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "29906" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "27506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "right" }, "value": { "type": "address" } } ] }],
        "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "974","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "975",
          "fp": "7",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3},{"pc": "975","xpc": "973","method_name": { "type": "atom", "value": "release" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] },
"method": "release(?d[\"lock\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } },"sp": 6}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "974"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "976",
          "atomic": "2",
          "push": [ ],
          "pc": "975"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "977",
          "readonly": "1",
          "push": [ ],
          "pc": "976"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "978",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "977"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"lock\"]) and push value (True)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "979",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "978"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "980",
          "pop": "1",
          "push": [ ],
          "pc": "979"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "981",
          "readonly": "0",
          "push": [ ],
          "pc": "980"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "explain2": { "text": "decrement atomic counter from 2 to 1: remains atomic", "args": [ ] },
          "npc": "982",
          "atomic": "1",
          "push": [ ],
          "pc": "981"
        },

        {
          "code": "LoadVar binsema",
          "explain": "push value (?d[\"lock\"]) of variable \"binsema\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] }, { "type": "atom", "value": "binsema" } ] },
          "npc": "983",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "982"
        },

        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "explain2": { "text": "delete method variable binsema", "args": [] },
          "npc": "984",
          "local": { },
          "push": [ ],
          "pc": "983"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "985",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "984"
        },

        {
          "code": "Store",
          "explain": "pop value (False) and address (?d[\"lock\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "lock" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
          "npc": "986",
          "pop": "2",
          "push": [ ],
          "pc": "985"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "987",
          "atomic": "0",
          "push": [ ],
          "pc": "986"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1720",
          "fp": "4",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "1720","xpc": "1673","method_name": { "type": "atom", "value": "peek_right" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "peek_right(?d)","calltype": "normal","vars":{ "right": { "type": "address" } },"sp": 3}
          ],
          "local": { "right": { "type": "address" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "987"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "1721",
          "pop": "1",
          "push": [ ],
          "pc": "1720"
        },

        {
          "code": "ReturnOp(right)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1870",
          "fp": "1",
          "trace": [
{"pc": "1870","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "1" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "1721"
        },

        {
          "code": "StoreVar v",
          "explain": "pop value (None) and store locally in variable \\\"v\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"v\"", "args": [ { "type": "address" } ] },
          "npc": "1871",
          "local": { "self": { "type": "int", "value": "1" }, "v": { "type": "address" } },
          "pop": "1",
          "push": [ ],
          "pc": "1870"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1872",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1871"
        },

        {
          "code": "Push \"done peek right\"",
          "explain": "push constant \"done peek right\"",
          "explain2": { "text": "push constant \"done peek right\"", "args": [] },
          "npc": "1873",
          "push": [ { "type": "atom", "value": "done peek right" } ],
          "pc": "1872"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"done peek right\", []); insert first value into the second; push result ([\"done peek right\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "done peek right" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] } ] },
          "npc": "1874",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] } ],
          "pc": "1873"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (1) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "self" } ] },
          "npc": "1875",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1874"
        },

        {
          "code": "DelVar self",
          "explain": "delete method variable self",
          "explain2": { "text": "delete method variable self", "args": [] },
          "npc": "1876",
          "local": { "v": { "type": "address" } },
          "push": [ ],
          "pc": "1875"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [\"done peek right\"]); insert first value into the second; push result ([\"done peek right\", 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1877",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1876"
        },

        {
          "code": "LoadVar v",
          "explain": "push value (None) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address" }, { "type": "atom", "value": "v" } ] },
          "npc": "1878",
          "push": [ { "type": "address" } ],
          "pc": "1877"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "1879",
          "local": { },
          "push": [ ],
          "pc": "1878"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (None, [\"done peek right\", 1]); insert first value into the second; push result ([\"done peek right\", 1, None])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address" }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ] },
          "npc": "1880",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ],
          "pc": "1879"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13c8016da": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "13c8016da",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1880",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] }],
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "30664",
      "tid": "6",
      "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "count" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "data" }, "value": { "type": "list", "value": [{ "type": "address" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "atom", "value": "rights" } ] } ] } }, { "key": { "type": "atom", "value": "head" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "not_empty" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "not_full" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "atom", "value": "size" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "tail" }, "value": { "type": "int", "value": "1" } } ] } },
      "name": "peek_right_test(1)",
      "context": {
        "tid": "6",
        "hvalue": "13c8016da",
        "fp": "1",
        "name": "peek_right_test(1)",
        "entry": "1859",
        "pc": "1880",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] }],
        "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"done peek right\", 1, None]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "done peek right" }, { "type": "int", "value": "1" }, { "type": "address" } ] },
          "npc": "1880",
          "fp": "1",
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Behavior failure on [\"done peek right\", 1, None]",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "1880"
        }

      ],
      "ctxbag": {
          "13c800c1a": "1",
          "13e80055a": "1",
          "13e8005ca": "1",
          "13e80068a": "1",
          "13e8006da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "13e80075a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1966",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1966","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "13e80055a",
          "fp": "1",
          "name": "put_left_test(1)",
          "entry": "1729",
          "pc": "1729",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1729","xpc": "1729","method_name": { "type": "atom", "value": "put_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "13e8005ca",
          "fp": "1",
          "name": "put_right_test(1)",
          "entry": "1758",
          "pc": "1758",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1758","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "put_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "put_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "13c800c1a",
          "fp": "1",
          "name": "put_right_test(2)",
          "entry": "1758",
          "pc": "1784",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "1784","xpc": "1758","method_name": { "type": "atom", "value": "put_right_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "put_right_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "done right put" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "13e80068a",
          "fp": "1",
          "name": "get_left_test(1)",
          "entry": "1787",
          "pc": "1787",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1787","xpc": "1787","method_name": { "type": "atom", "value": "get_left_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_left_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_left_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "13e8006da",
          "fp": "1",
          "name": "get_right_test(1)",
          "entry": "1811",
          "pc": "1811",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "1811","xpc": "1811","method_name": { "type": "atom", "value": "get_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "get_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "get_right_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "6",
          "hvalue": "104aec52a",
          "fp": "1",
          "name": "peek_right_test(1)",
          "entry": "1859",
          "pc": "1880",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "1880","xpc": "1859","method_name": { "type": "atom", "value": "peek_right_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "peek_right_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Behavior failure on [\"done peek right\", 1, None]",
          "this": { "type": "dict", "value": [] },
          "mode": "failed"
        }
      ]
    }

  ]
}
